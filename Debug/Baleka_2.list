
C:\Users\MuhammadHaaroon\Documents\Fourth year\Thesis\Code\Baleka_2\Debug\Baleka_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08006ac4  08006ac4  00016ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00007d94  20000000  08007008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00027d94  2**0
                  CONTENTS
  7 .bss          00004f18  20007d94  20007d94  00027d94  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000ccac  2000ccac  00027d94  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00027d94  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016ac8  00000000  00000000  00027dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003270  00000000  00000000  0003e88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b927  00000000  00000000  00041afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f08  00000000  00000000  0004d428  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012c8  00000000  00000000  0004e330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000765a  00000000  00000000  0004f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005cb6  00000000  00000000  00056c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0005c908  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e14  00000000  00000000  0005c988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007d94 	.word	0x20007d94
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aac 	.word	0x08006aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007d98 	.word	0x20007d98
 80001cc:	08006aac 	.word	0x08006aac

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x30>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b9a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ba2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000baa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f827 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f004 ffd2 	bl	8005b5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f004 fdf8 	bl	80057ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	bd08      	pop	{r3, pc}
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000bc4:	4a02      	ldr	r2, [pc, #8]	; (8000bd0 <HAL_IncTick+0xc>)
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000c314 	.word	0x2000c314

08000bd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bd4:	4b01      	ldr	r3, [pc, #4]	; (8000bdc <HAL_GetTick+0x8>)
 8000bd6:	6818      	ldr	r0, [r3, #0]
}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2000c314 	.word	0x2000c314

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000be2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff6 	bl	8000bd4 <HAL_GetTick>
  uint32_t wait = Delay;
 8000be8:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 8000bec:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000bee:	bf18      	it	ne
 8000bf0:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	f7ff ffef 	bl	8000bd4 <HAL_GetTick>
 8000bf6:	1b40      	subs	r0, r0, r5
 8000bf8:	42a0      	cmp	r0, r4
 8000bfa:	d3fa      	bcc.n	8000bf2 <HAL_Delay+0x12>
  {
  }
}
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bd30      	pop	{r4, r5, pc}

08000c00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c02:	68d3      	ldr	r3, [r2, #12]
 8000c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c08:	041b      	lsls	r3, r3, #16
 8000c0a:	0c1b      	lsrs	r3, r3, #16
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000c10:	0200      	lsls	r0, r0, #8
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000c1a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000c1c:	60d3      	str	r3, [r2, #12]
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_NVIC_SetPriority+0x60>)
 8000c26:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	2c04      	cmp	r4, #4
 8000c36:	bf28      	it	cs
 8000c38:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	2d06      	cmp	r5, #6

  return (
 8000c3c:	f04f 0501 	mov.w	r5, #1
 8000c40:	fa05 f404 	lsl.w	r4, r5, r4
 8000c44:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c48:	bf8c      	ite	hi
 8000c4a:	3b03      	subhi	r3, #3
 8000c4c:	2300      	movls	r3, #0

  return (
 8000c4e:	400c      	ands	r4, r1
 8000c50:	409c      	lsls	r4, r3
 8000c52:	fa05 f303 	lsl.w	r3, r5, r3
 8000c56:	3b01      	subs	r3, #1
 8000c58:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000c5a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000c5c:	ea42 0204 	orr.w	r2, r2, r4
 8000c60:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	bfaf      	iteee	ge
 8000c66:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	f000 000f 	andlt.w	r0, r0, #15
 8000c6e:	4b06      	ldrlt	r3, [pc, #24]	; (8000c88 <HAL_NVIC_SetPriority+0x64>)
 8000c70:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	bfa5      	ittet	ge
 8000c74:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c78:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c80:	bd30      	pop	{r4, r5, pc}
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00
 8000c88:	e000ed14 	.word	0xe000ed14

08000c8c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c8c:	0942      	lsrs	r2, r0, #5
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f000 001f 	and.w	r0, r0, #31
 8000c94:	fa03 f000 	lsl.w	r0, r3, r0
 8000c98:	4b01      	ldr	r3, [pc, #4]	; (8000ca0 <HAL_NVIC_EnableIRQ+0x14>)
 8000c9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	3801      	subs	r0, #1
 8000ca6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000caa:	d20a      	bcs.n	8000cc2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb0:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	21f0      	movs	r1, #240	; 0xf0
 8000cb4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cd2:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cd4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cd6:	bf0c      	ite	eq
 8000cd8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cdc:	f022 0204 	bicne.w	r2, r2, #4
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ce8:	6803      	ldr	r3, [r0, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000cf0:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000cf4:	2118      	movs	r1, #24
 8000cf6:	3a10      	subs	r2, #16
 8000cf8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000cfc:	4904      	ldr	r1, [pc, #16]	; (8000d10 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000cfe:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d00:	bf88      	it	hi
 8000d02:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d04:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d06:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d08:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000d0a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	08006b9e 	.word	0x08006b9e

08000d14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ff5c 	bl	8000bd4 <HAL_GetTick>
 8000d1c:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d064      	beq.n	8000dec <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d22:	2300      	movs	r3, #0
 8000d24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d28:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d30:	6813      	ldr	r3, [r2, #0]
 8000d32:	f023 0301 	bic.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d38:	6820      	ldr	r0, [r4, #0]
 8000d3a:	6803      	ldr	r3, [r0, #0]
 8000d3c:	07d9      	lsls	r1, r3, #31
 8000d3e:	d508      	bpl.n	8000d52 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d40:	f7ff ff48 	bl	8000bd4 <HAL_GetTick>
 8000d44:	1b40      	subs	r0, r0, r5
 8000d46:	2805      	cmp	r0, #5
 8000d48:	d9f6      	bls.n	8000d38 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e051      	b.n	8000df6 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d52:	6803      	ldr	r3, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d54:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d56:	6861      	ldr	r1, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d58:	69a5      	ldr	r5, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d5a:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d5c:	68a3      	ldr	r3, [r4, #8]
 8000d5e:	4319      	orrs	r1, r3
 8000d60:	68e3      	ldr	r3, [r4, #12]
 8000d62:	4319      	orrs	r1, r3
 8000d64:	6923      	ldr	r3, [r4, #16]
 8000d66:	4319      	orrs	r1, r3
 8000d68:	6963      	ldr	r3, [r4, #20]
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	69e1      	ldr	r1, [r4, #28]
 8000d6e:	432b      	orrs	r3, r5
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6a21      	ldr	r1, [r4, #32]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d7a:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d7c:	bf01      	itttt	eq
 8000d7e:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 8000d80:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8000d82:	4331      	orreq	r1, r6
 8000d84:	430b      	orreq	r3, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d86:	6003      	str	r3, [r0, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d88:	6943      	ldr	r3, [r0, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d8a:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d8c:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d90:	ea43 0302 	orr.w	r3, r3, r2

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d94:	d11c      	bne.n	8000dd0 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d9a:	4313      	orrs	r3, r2
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d9c:	b1c1      	cbz	r1, 8000dd0 <HAL_DMA_Init+0xbc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d9e:	b925      	cbnz	r5, 8000daa <HAL_DMA_Init+0x96>
  {
    switch (tmp)
 8000da0:	2a01      	cmp	r2, #1
 8000da2:	d00b      	beq.n	8000dbc <HAL_DMA_Init+0xa8>
 8000da4:	d312      	bcc.n	8000dcc <HAL_DMA_Init+0xb8>
 8000da6:	2a02      	cmp	r2, #2
 8000da8:	e00f      	b.n	8000dca <HAL_DMA_Init+0xb6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000daa:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8000dae:	d109      	bne.n	8000dc4 <HAL_DMA_Init+0xb0>
  {
    switch (tmp)
 8000db0:	2a03      	cmp	r2, #3
 8000db2:	d80d      	bhi.n	8000dd0 <HAL_DMA_Init+0xbc>
 8000db4:	e8df f002 	tbb	[pc, r2]
 8000db8:	021c0a1c 	.word	0x021c0a1c
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000dbc:	f1b1 7fc0 	cmp.w	r1, #25165824	; 0x1800000
 8000dc0:	d106      	bne.n	8000dd0 <HAL_DMA_Init+0xbc>
 8000dc2:	e015      	b.n	8000df0 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000dc4:	2a02      	cmp	r2, #2
 8000dc6:	d913      	bls.n	8000df0 <HAL_DMA_Init+0xdc>
 8000dc8:	2a03      	cmp	r2, #3
 8000dca:	d101      	bne.n	8000dd0 <HAL_DMA_Init+0xbc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dcc:	01ca      	lsls	r2, r1, #7
 8000dce:	d40f      	bmi.n	8000df0 <HAL_DMA_Init+0xdc>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dd0:	6143      	str	r3, [r0, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f7ff ff88 	bl	8000ce8 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dd8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000dda:	233f      	movs	r3, #63	; 0x3f
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de0:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000de2:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de4:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000de6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000dec:	2001      	movs	r0, #1
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000df4:	2001      	movs	r0, #1
 8000df6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	f010803f 	.word	0xf010803f

08000e00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e00:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e02:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000e06:	2c01      	cmp	r4, #1
 8000e08:	d038      	beq.n	8000e7c <HAL_DMA_Start_IT+0x7c>
 8000e0a:	2401      	movs	r4, #1
 8000e0c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e10:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e14:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e16:	2c01      	cmp	r4, #1
 8000e18:	f04f 0500 	mov.w	r5, #0
 8000e1c:	f04f 0402 	mov.w	r4, #2
 8000e20:	d128      	bne.n	8000e74 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e22:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e26:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e28:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e2a:	6825      	ldr	r5, [r4, #0]
 8000e2c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000e30:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e32:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e34:	6883      	ldr	r3, [r0, #8]
 8000e36:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e38:	bf0e      	itee	eq
 8000e3a:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000e3c:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000e3e:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e40:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e42:	bf08      	it	eq
 8000e44:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e46:	233f      	movs	r3, #63	; 0x3f
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	f043 0316 	orr.w	r3, r3, #22
 8000e52:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000e54:	6963      	ldr	r3, [r4, #20]
 8000e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5a:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e5e:	b11b      	cbz	r3, 8000e68 <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000e70:	2000      	movs	r0, #0
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000e74:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000e78:	4620      	mov	r0, r4
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e7c:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}

08000e80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e84:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000e86:	f7ff fea5 	bl	8000bd4 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000e8e:	2b02      	cmp	r3, #2
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  
  uint32_t tickstart = HAL_GetTick();
 8000e90:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e92:	d006      	beq.n	8000ea2 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	f022 0216 	bic.w	r2, r2, #22
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000eb6:	b90a      	cbnz	r2, 8000ebc <HAL_DMA_Abort+0x3c>
 8000eb8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000eba:	b11a      	cbz	r2, 8000ec4 <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f022 0208 	bic.w	r2, r2, #8
 8000ec2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	f010 0001 	ands.w	r0, r0, #1
 8000ed4:	d00d      	beq.n	8000ef2 <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ed6:	f7ff fe7d 	bl	8000bd4 <HAL_GetTick>
 8000eda:	1b80      	subs	r0, r0, r6
 8000edc:	2805      	cmp	r0, #5
 8000ede:	d9f5      	bls.n	8000ecc <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ee4:	2003      	movs	r0, #3
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ef4:	233f      	movs	r3, #63	; 0x3f
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000efa:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8000f04:	bd70      	pop	{r4, r5, r6, pc}

08000f06 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d003      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
 8000f14:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f16:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
}
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f32:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f34:	4b59      	ldr	r3, [pc, #356]	; (800109c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f36:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f38:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000f3a:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	4093      	lsls	r3, r2
 8000f40:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f42:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f44:	d00c      	beq.n	8000f60 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f46:	6801      	ldr	r1, [r0, #0]
 8000f48:	6808      	ldr	r0, [r1, #0]
 8000f4a:	0740      	lsls	r0, r0, #29
 8000f4c:	d508      	bpl.n	8000f60 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f4e:	6808      	ldr	r0, [r1, #0]
 8000f50:	f020 0004 	bic.w	r0, r0, #4
 8000f54:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f56:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <HAL_DMA_IRQHandler+0x174>)
 8000f62:	4093      	lsls	r3, r2
 8000f64:	421e      	tst	r6, r3
 8000f66:	d008      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f68:	6821      	ldr	r1, [r4, #0]
 8000f6a:	6949      	ldr	r1, [r1, #20]
 8000f6c:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f6e:	bf41      	itttt	mi
 8000f70:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f72:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000f74:	f043 0302 	orrmi.w	r3, r3, #2
 8000f78:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f7a:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <HAL_DMA_IRQHandler+0x178>)
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	421e      	tst	r6, r3
 8000f80:	d008      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f82:	6821      	ldr	r1, [r4, #0]
 8000f84:	6809      	ldr	r1, [r1, #0]
 8000f86:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f88:	bf41      	itttt	mi
 8000f8a:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f8c:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000f8e:	f043 0304 	orrmi.w	r3, r3, #4
 8000f92:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f94:	2310      	movs	r3, #16
 8000f96:	fa03 f202 	lsl.w	r2, r3, r2
 8000f9a:	4216      	tst	r6, r2
 8000f9c:	d017      	beq.n	8000fce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	6819      	ldr	r1, [r3, #0]
 8000fa2:	0709      	lsls	r1, r1, #28
 8000fa4:	d513      	bpl.n	8000fce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fa6:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	0350      	lsls	r0, r2, #13
 8000fac:	d504      	bpl.n	8000fb8 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0319      	lsls	r1, r3, #12
 8000fb2:	d508      	bpl.n	8000fc6 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000fb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fb6:	e007      	b.n	8000fc8 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fbc:	bf5e      	ittt	pl
 8000fbe:	681a      	ldrpl	r2, [r3, #0]
 8000fc0:	f022 0208 	bicpl.w	r2, r2, #8
 8000fc4:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fc8:	b10b      	cbz	r3, 8000fce <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000fca:	4620      	mov	r0, r4
 8000fcc:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000fce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	408a      	lsls	r2, r1
 8000fd4:	4216      	tst	r6, r2
 8000fd6:	d03b      	beq.n	8001050 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	06c6      	lsls	r6, r0, #27
 8000fde:	d537      	bpl.n	8001050 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000fe0:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000fe2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000fe6:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fe8:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000fea:	d119      	bne.n	8001020 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fec:	f022 0216 	bic.w	r2, r2, #22
 8000ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ff2:	695a      	ldr	r2, [r3, #20]
 8000ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ff8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ffa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ffc:	b90a      	cbnz	r2, 8001002 <HAL_DMA_IRQHandler+0xd6>
 8000ffe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001000:	b11a      	cbz	r2, 800100a <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	f022 0208 	bic.w	r2, r2, #8
 8001008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800100a:	233f      	movs	r3, #63	; 0x3f
 800100c:	408b      	lsls	r3, r1
 800100e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001010:	2300      	movs	r3, #0
 8001012:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001016:	2301      	movs	r3, #1
 8001018:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800101c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800101e:	e037      	b.n	8001090 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001020:	0350      	lsls	r0, r2, #13
 8001022:	d504      	bpl.n	800102e <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0319      	lsls	r1, r3, #12
 8001028:	d40e      	bmi.n	8001048 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800102a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800102c:	e00d      	b.n	800104a <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001034:	d108      	bne.n	8001048 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	f021 0110 	bic.w	r1, r1, #16
 800103c:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800103e:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001040:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001044:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001048:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800104a:	b10b      	cbz	r3, 8001050 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800104c:	4620      	mov	r0, r4
 800104e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001050:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001052:	b303      	cbz	r3, 8001096 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001054:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001056:	07da      	lsls	r2, r3, #31
 8001058:	d519      	bpl.n	800108e <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800105a:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800105c:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800105e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 800106a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800106e:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8001072:	9b01      	ldr	r3, [sp, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	429f      	cmp	r7, r3
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	d302      	bcc.n	8001082 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	07db      	lsls	r3, r3, #31
 8001080:	d4f7      	bmi.n	8001072 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001082:	2300      	movs	r3, #0
 8001084:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001088:	2301      	movs	r3, #1
 800108a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800108e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001090:	b10b      	cbz	r3, 8001096 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001092:	4620      	mov	r0, r4
 8001094:	4798      	blx	r3
    }
  }
}
 8001096:	b003      	add	sp, #12
 8001098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109a:	bf00      	nop
 800109c:	20007d28 	.word	0x20007d28
 80010a0:	00800001 	.word	0x00800001
 80010a4:	00800004 	.word	0x00800004

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ac:	4f6a      	ldr	r7, [pc, #424]	; (8001258 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8001260 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001264 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80010c2:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c4:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80010c6:	ea34 0303 	bics.w	r3, r4, r3
 80010ca:	f040 80bd 	bne.w	8001248 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ce:	684d      	ldr	r5, [r1, #4]
 80010d0:	f025 0a10 	bic.w	sl, r5, #16
 80010d4:	f1ba 0f02 	cmp.w	sl, #2
 80010d8:	d114      	bne.n	8001104 <HAL_GPIO_Init+0x5c>
 80010da:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80010de:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e2:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e6:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80010ee:	230f      	movs	r3, #15
 80010f0:	fa03 f30b 	lsl.w	r3, r3, fp
 80010f4:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f8:	690b      	ldr	r3, [r1, #16]
 80010fa:	fa03 f30b 	lsl.w	r3, r3, fp
 80010fe:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001100:	f8c9 3020 	str.w	r3, [r9, #32]
 8001104:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001108:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110c:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001112:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001116:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111e:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001122:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001126:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001128:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 800112c:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800112e:	d80f      	bhi.n	8001150 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001130:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001138:	fa06 f60b 	lsl.w	r6, r6, fp
 800113c:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800113e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001142:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001146:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800114a:	4096      	lsls	r6, r2
 800114c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800114e:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001150:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001152:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001156:	688b      	ldr	r3, [r1, #8]
 8001158:	fa03 f30b 	lsl.w	r3, r3, fp
 800115c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8001160:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001162:	00eb      	lsls	r3, r5, #3
 8001164:	d570      	bpl.n	8001248 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	9303      	str	r3, [sp, #12]
 800116a:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001170:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001174:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8001178:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800117c:	f022 0903 	bic.w	r9, r2, #3
 8001180:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8001184:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001188:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 800118c:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118e:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001194:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001198:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800119c:	260f      	movs	r6, #15
 800119e:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a4:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a8:	d01c      	beq.n	80011e4 <HAL_GPIO_Init+0x13c>
 80011aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011ae:	4298      	cmp	r0, r3
 80011b0:	d01a      	beq.n	80011e8 <HAL_GPIO_Init+0x140>
 80011b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011b6:	4298      	cmp	r0, r3
 80011b8:	d018      	beq.n	80011ec <HAL_GPIO_Init+0x144>
 80011ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011be:	4298      	cmp	r0, r3
 80011c0:	d016      	beq.n	80011f0 <HAL_GPIO_Init+0x148>
 80011c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011c6:	4298      	cmp	r0, r3
 80011c8:	d014      	beq.n	80011f4 <HAL_GPIO_Init+0x14c>
 80011ca:	4540      	cmp	r0, r8
 80011cc:	d014      	beq.n	80011f8 <HAL_GPIO_Init+0x150>
 80011ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d2:	4298      	cmp	r0, r3
 80011d4:	d012      	beq.n	80011fc <HAL_GPIO_Init+0x154>
 80011d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011da:	4298      	cmp	r0, r3
 80011dc:	bf14      	ite	ne
 80011de:	2308      	movne	r3, #8
 80011e0:	2307      	moveq	r3, #7
 80011e2:	e00c      	b.n	80011fe <HAL_GPIO_Init+0x156>
 80011e4:	2300      	movs	r3, #0
 80011e6:	e00a      	b.n	80011fe <HAL_GPIO_Init+0x156>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e008      	b.n	80011fe <HAL_GPIO_Init+0x156>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e006      	b.n	80011fe <HAL_GPIO_Init+0x156>
 80011f0:	2303      	movs	r3, #3
 80011f2:	e004      	b.n	80011fe <HAL_GPIO_Init+0x156>
 80011f4:	2304      	movs	r3, #4
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x156>
 80011f8:	2305      	movs	r3, #5
 80011fa:	e000      	b.n	80011fe <HAL_GPIO_Init+0x156>
 80011fc:	2306      	movs	r3, #6
 80011fe:	fa03 f30a 	lsl.w	r3, r3, sl
 8001202:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001208:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 800120a:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120c:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001210:	bf0c      	ite	eq
 8001212:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001214:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8001216:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800121a:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800121e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001222:	bf0c      	ite	eq
 8001224:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001226:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001228:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122a:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800122c:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001230:	bf0c      	ite	eq
 8001232:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001234:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8001236:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800123a:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123e:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001240:	bf54      	ite	pl
 8001242:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001244:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8001246:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001248:	3201      	adds	r2, #1
 800124a:	2a10      	cmp	r2, #16
 800124c:	f47f af38 	bne.w	80010c0 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001250:	b005      	add	sp, #20
 8001252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001256:	bf00      	nop
 8001258:	40013c00 	.word	0x40013c00
 800125c:	40020000 	.word	0x40020000
 8001260:	40023800 	.word	0x40023800
 8001264:	40021400 	.word	0x40021400

08001268 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	b902      	cbnz	r2, 800126c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126a:	0409      	lsls	r1, r1, #16
 800126c:	6181      	str	r1, [r0, #24]
 800126e:	4770      	bx	lr

08001270 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001270:	6943      	ldr	r3, [r0, #20]
 8001272:	4059      	eors	r1, r3
 8001274:	6141      	str	r1, [r0, #20]
 8001276:	4770      	bx	lr

08001278 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001278:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800127e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001280:	07d8      	lsls	r0, r3, #31
 8001282:	d403      	bmi.n	800128c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	0799      	lsls	r1, r3, #30
 8001288:	d44b      	bmi.n	8001322 <HAL_RCC_OscConfig+0xaa>
 800128a:	e09b      	b.n	80013c4 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128c:	4b8c      	ldr	r3, [pc, #560]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	f002 020c 	and.w	r2, r2, #12
 8001294:	2a04      	cmp	r2, #4
 8001296:	d007      	beq.n	80012a8 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001298:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129a:	f002 020c 	and.w	r2, r2, #12
 800129e:	2a08      	cmp	r2, #8
 80012a0:	d10b      	bne.n	80012ba <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	025a      	lsls	r2, r3, #9
 80012a6:	d508      	bpl.n	80012ba <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	039b      	lsls	r3, r3, #14
 80012ae:	d5e9      	bpl.n	8001284 <HAL_RCC_OscConfig+0xc>
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e6      	bne.n	8001284 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80012b6:	2001      	movs	r0, #1
 80012b8:	e164      	b.n	8001584 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ba:	6863      	ldr	r3, [r4, #4]
 80012bc:	4d80      	ldr	r5, [pc, #512]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 80012be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c2:	d006      	beq.n	80012d2 <HAL_RCC_OscConfig+0x5a>
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d108      	bne.n	80012dc <HAL_RCC_OscConfig+0x64>
 80012ca:	682b      	ldr	r3, [r5, #0]
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d0:	602b      	str	r3, [r5, #0]
 80012d2:	682b      	ldr	r3, [r5, #0]
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	602b      	str	r3, [r5, #0]
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x76>
 80012dc:	682a      	ldr	r2, [r5, #0]
 80012de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012e2:	602a      	str	r2, [r5, #0]
 80012e4:	682a      	ldr	r2, [r5, #0]
 80012e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012ea:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ec:	b16b      	cbz	r3, 800130a <HAL_RCC_OscConfig+0x92>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff fc71 	bl	8000bd4 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4d73      	ldr	r5, [pc, #460]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	039f      	lsls	r7, r3, #14
 80012fa:	d4c3      	bmi.n	8001284 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fc6a 	bl	8000bd4 <HAL_GetTick>
 8001300:	1b80      	subs	r0, r0, r6
 8001302:	2864      	cmp	r0, #100	; 0x64
 8001304:	d9f7      	bls.n	80012f6 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 8001306:	2003      	movs	r0, #3
 8001308:	e13c      	b.n	8001584 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fc63 	bl	8000bd4 <HAL_GetTick>
 800130e:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	0398      	lsls	r0, r3, #14
 8001314:	d5b6      	bpl.n	8001284 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001316:	f7ff fc5d 	bl	8000bd4 <HAL_GetTick>
 800131a:	1b80      	subs	r0, r0, r6
 800131c:	2864      	cmp	r0, #100	; 0x64
 800131e:	d9f7      	bls.n	8001310 <HAL_RCC_OscConfig+0x98>
 8001320:	e7f1      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001322:	4b67      	ldr	r3, [pc, #412]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	f012 0f0c 	tst.w	r2, #12
 800132a:	d007      	beq.n	800133c <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132c:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	f002 020c 	and.w	r2, r2, #12
 8001332:	2a08      	cmp	r2, #8
 8001334:	d117      	bne.n	8001366 <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	0259      	lsls	r1, r3, #9
 800133a:	d414      	bmi.n	8001366 <HAL_RCC_OscConfig+0xee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	0792      	lsls	r2, r2, #30
 8001342:	d502      	bpl.n	800134a <HAL_RCC_OscConfig+0xd2>
 8001344:	68e2      	ldr	r2, [r4, #12]
 8001346:	2a01      	cmp	r2, #1
 8001348:	d1b5      	bne.n	80012b6 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134a:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	21f8      	movs	r1, #248	; 0xf8
 800134e:	fa91 f1a1 	rbit	r1, r1
 8001352:	6920      	ldr	r0, [r4, #16]
 8001354:	fab1 f181 	clz	r1, r1
 8001358:	fa00 f101 	lsl.w	r1, r0, r1
 800135c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001364:	e02e      	b.n	80013c4 <HAL_RCC_OscConfig+0x14c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001366:	68e2      	ldr	r2, [r4, #12]
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_RCC_OscConfig+0x24c>)
 800136a:	b1ea      	cbz	r2, 80013a8 <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fc30 	bl	8000bd4 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	4d52      	ldr	r5, [pc, #328]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	4851      	ldr	r0, [pc, #324]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 800137c:	079b      	lsls	r3, r3, #30
 800137e:	d405      	bmi.n	800138c <HAL_RCC_OscConfig+0x114>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fc28 	bl	8000bd4 <HAL_GetTick>
 8001384:	1b80      	subs	r0, r0, r6
 8001386:	2802      	cmp	r0, #2
 8001388:	d9f6      	bls.n	8001378 <HAL_RCC_OscConfig+0x100>
 800138a:	e7bc      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	6803      	ldr	r3, [r0, #0]
 800138e:	22f8      	movs	r2, #248	; 0xf8
 8001390:	fa92 f2a2 	rbit	r2, r2
 8001394:	6921      	ldr	r1, [r4, #16]
 8001396:	fab2 f282 	clz	r2, r2
 800139a:	fa01 f202 	lsl.w	r2, r1, r2
 800139e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013a2:	4313      	orrs	r3, r2
 80013a4:	6003      	str	r3, [r0, #0]
 80013a6:	e00d      	b.n	80013c4 <HAL_RCC_OscConfig+0x14c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fc13 	bl	8000bd4 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4d44      	ldr	r5, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	682b      	ldr	r3, [r5, #0]
 80013b4:	079f      	lsls	r7, r3, #30
 80013b6:	d505      	bpl.n	80013c4 <HAL_RCC_OscConfig+0x14c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc0c 	bl	8000bd4 <HAL_GetTick>
 80013bc:	1b80      	subs	r0, r0, r6
 80013be:	2802      	cmp	r0, #2
 80013c0:	d9f7      	bls.n	80013b2 <HAL_RCC_OscConfig+0x13a>
 80013c2:	e7a0      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	071e      	lsls	r6, r3, #28
 80013c8:	d403      	bmi.n	80013d2 <HAL_RCC_OscConfig+0x15a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	075d      	lsls	r5, r3, #29
 80013ce:	d548      	bpl.n	8001462 <HAL_RCC_OscConfig+0x1ea>
 80013d0:	e01f      	b.n	8001412 <HAL_RCC_OscConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013d2:	6962      	ldr	r2, [r4, #20]
 80013d4:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <HAL_RCC_OscConfig+0x250>)
 80013d6:	b172      	cbz	r2, 80013f6 <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fbfa 	bl	8000bd4 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e0:	4d37      	ldr	r5, [pc, #220]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013e6:	0798      	lsls	r0, r3, #30
 80013e8:	d4ef      	bmi.n	80013ca <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff fbf3 	bl	8000bd4 <HAL_GetTick>
 80013ee:	1b80      	subs	r0, r0, r6
 80013f0:	2802      	cmp	r0, #2
 80013f2:	d9f7      	bls.n	80013e4 <HAL_RCC_OscConfig+0x16c>
 80013f4:	e787      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fbec 	bl	8000bd4 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	4d30      	ldr	r5, [pc, #192]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fe:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001402:	0799      	lsls	r1, r3, #30
 8001404:	d5e1      	bpl.n	80013ca <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fbe5 	bl	8000bd4 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	2802      	cmp	r0, #2
 800140e:	d9f7      	bls.n	8001400 <HAL_RCC_OscConfig+0x188>
 8001410:	e779      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001418:	4d2c      	ldr	r5, [pc, #176]	; (80014cc <HAL_RCC_OscConfig+0x254>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001434:	f7ff fbce 	bl	8000bd4 <HAL_GetTick>
 8001438:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800143a:	682b      	ldr	r3, [r5, #0]
 800143c:	05da      	lsls	r2, r3, #23
 800143e:	d513      	bpl.n	8001468 <HAL_RCC_OscConfig+0x1f0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	68a3      	ldr	r3, [r4, #8]
 8001442:	4d1f      	ldr	r5, [pc, #124]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 8001444:	2b01      	cmp	r3, #1
 8001446:	d115      	bne.n	8001474 <HAL_RCC_OscConfig+0x1fc>
 8001448:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fbc0 	bl	8000bd4 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	4d1a      	ldr	r5, [pc, #104]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001456:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800145e:	079b      	lsls	r3, r3, #30
 8001460:	d519      	bpl.n	8001496 <HAL_RCC_OscConfig+0x21e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	69a2      	ldr	r2, [r4, #24]
 8001464:	bba2      	cbnz	r2, 80014d0 <HAL_RCC_OscConfig+0x258>
 8001466:	e072      	b.n	800154e <HAL_RCC_OscConfig+0x2d6>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001468:	f7ff fbb4 	bl	8000bd4 <HAL_GetTick>
 800146c:	1b80      	subs	r0, r0, r6
 800146e:	2802      	cmp	r0, #2
 8001470:	d9e3      	bls.n	800143a <HAL_RCC_OscConfig+0x1c2>
 8001472:	e748      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	2b05      	cmp	r3, #5
 8001476:	d104      	bne.n	8001482 <HAL_RCC_OscConfig+0x20a>
 8001478:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	672b      	str	r3, [r5, #112]	; 0x70
 8001480:	e7e2      	b.n	8001448 <HAL_RCC_OscConfig+0x1d0>
 8001482:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001484:	f022 0201 	bic.w	r2, r2, #1
 8001488:	672a      	str	r2, [r5, #112]	; 0x70
 800148a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800148c:	f022 0204 	bic.w	r2, r2, #4
 8001490:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001492:	b133      	cbz	r3, 80014a2 <HAL_RCC_OscConfig+0x22a>
 8001494:	e7dc      	b.n	8001450 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff fb9d 	bl	8000bd4 <HAL_GetTick>
 800149a:	1b80      	subs	r0, r0, r6
 800149c:	42b8      	cmp	r0, r7
 800149e:	d9dd      	bls.n	800145c <HAL_RCC_OscConfig+0x1e4>
 80014a0:	e731      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb97 	bl	8000bd4 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014aa:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014ae:	0798      	lsls	r0, r3, #30
 80014b0:	d5d7      	bpl.n	8001462 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fb8f 	bl	8000bd4 <HAL_GetTick>
 80014b6:	1b80      	subs	r0, r0, r6
 80014b8:	42b8      	cmp	r0, r7
 80014ba:	d9f7      	bls.n	80014ac <HAL_RCC_OscConfig+0x234>
 80014bc:	e723      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
 80014cc:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d0:	4d2e      	ldr	r5, [pc, #184]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80014d2:	68ab      	ldr	r3, [r5, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	f43f aeec 	beq.w	80012b6 <HAL_RCC_OscConfig+0x3e>
 80014de:	4e2c      	ldr	r6, [pc, #176]	; (8001590 <HAL_RCC_OscConfig+0x318>)
 80014e0:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e2:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e4:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e6:	d141      	bne.n	800156c <HAL_RCC_OscConfig+0x2f4>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb74 	bl	8000bd4 <HAL_GetTick>
 80014ec:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	682b      	ldr	r3, [r5, #0]
 80014f0:	4f26      	ldr	r7, [pc, #152]	; (800158c <HAL_RCC_OscConfig+0x314>)
 80014f2:	0199      	lsls	r1, r3, #6
 80014f4:	d42d      	bmi.n	8001552 <HAL_RCC_OscConfig+0x2da>
 80014f6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80014fa:	fa92 f2a2 	rbit	r2, r2
 80014fe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001502:	fab2 fe82 	clz	lr, r2
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800150e:	fab3 f583 	clz	r5, r3
 8001512:	fa92 f2a2 	rbit	r2, r2
 8001516:	69e0      	ldr	r0, [r4, #28]
 8001518:	6a23      	ldr	r3, [r4, #32]
 800151a:	fab2 f182 	clz	r1, r2
 800151e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001520:	4303      	orrs	r3, r0
 8001522:	fa02 f20e 	lsl.w	r2, r2, lr
 8001526:	ea43 0002 	orr.w	r0, r3, r2
 800152a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800152c:	085a      	lsrs	r2, r3, #1
 800152e:	3a01      	subs	r2, #1
 8001530:	fa02 f305 	lsl.w	r3, r2, r5
 8001534:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001536:	4303      	orrs	r3, r0
 8001538:	408a      	lsls	r2, r1
 800153a:	4313      	orrs	r3, r2
 800153c:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153e:	2301      	movs	r3, #1
 8001540:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fb47 	bl	8000bd4 <HAL_GetTick>
 8001546:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	019a      	lsls	r2, r3, #6
 800154c:	d508      	bpl.n	8001560 <HAL_RCC_OscConfig+0x2e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800154e:	2000      	movs	r0, #0
 8001550:	e018      	b.n	8001584 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001552:	f7ff fb3f 	bl	8000bd4 <HAL_GetTick>
 8001556:	ebc8 0000 	rsb	r0, r8, r0
 800155a:	2802      	cmp	r0, #2
 800155c:	d9c7      	bls.n	80014ee <HAL_RCC_OscConfig+0x276>
 800155e:	e6d2      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fb38 	bl	8000bd4 <HAL_GetTick>
 8001564:	1b00      	subs	r0, r0, r4
 8001566:	2802      	cmp	r0, #2
 8001568:	d9ee      	bls.n	8001548 <HAL_RCC_OscConfig+0x2d0>
 800156a:	e6cc      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fb32 	bl	8000bd4 <HAL_GetTick>
 8001570:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	682b      	ldr	r3, [r5, #0]
 8001574:	019b      	lsls	r3, r3, #6
 8001576:	d5ea      	bpl.n	800154e <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fb2c 	bl	8000bd4 <HAL_GetTick>
 800157c:	1b00      	subs	r0, r0, r4
 800157e:	2802      	cmp	r0, #2
 8001580:	d9f7      	bls.n	8001572 <HAL_RCC_OscConfig+0x2fa>
 8001582:	e6c0      	b.n	8001306 <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001584:	b002      	add	sp, #8
 8001586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	42470060 	.word	0x42470060

08001594 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001594:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_RCC_GetSysClockFreq+0x70>)
 8001596:	688b      	ldr	r3, [r1, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b04      	cmp	r3, #4
 800159e:	d02c      	beq.n	80015fa <HAL_RCC_GetSysClockFreq+0x66>
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d12c      	bne.n	80015fe <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a4:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015b0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80015b4:	684b      	ldr	r3, [r1, #4]
 80015b6:	fa92 f2a2 	rbit	r2, r2
 80015ba:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80015be:	fab2 f282 	clz	r2, r2
 80015c2:	ea01 0103 	and.w	r1, r1, r3
 80015c6:	fa21 f102 	lsr.w	r1, r1, r2
 80015ca:	bf14      	ite	ne
 80015cc:	4a0e      	ldrne	r2, [pc, #56]	; (8001608 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015ce:	4a0f      	ldreq	r2, [pc, #60]	; (800160c <HAL_RCC_GetSysClockFreq+0x78>)
 80015d0:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80015d6:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80015da:	6852      	ldr	r2, [r2, #4]
 80015dc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80015e0:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015e4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80015e8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80015ec:	fa22 f000 	lsr.w	r0, r2, r0
 80015f0:	3001      	adds	r0, #1
 80015f2:	0040      	lsls	r0, r0, #1
 80015f4:	fbb3 f0f0 	udiv	r0, r3, r0
 80015f8:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <HAL_RCC_GetSysClockFreq+0x74>)
 80015fc:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	007a1200 	.word	0x007a1200
 800160c:	00f42400 	.word	0x00f42400

08001610 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001610:	4b55      	ldr	r3, [pc, #340]	; (8001768 <HAL_RCC_ClockConfig+0x158>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	f002 020f 	and.w	r2, r2, #15
 8001618:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800161e:	4605      	mov	r5, r0
 8001620:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001622:	d30a      	bcc.n	800163a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	6829      	ldr	r1, [r5, #0]
 8001626:	0788      	lsls	r0, r1, #30
 8001628:	d511      	bpl.n	800164e <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162a:	4850      	ldr	r0, [pc, #320]	; (800176c <HAL_RCC_ClockConfig+0x15c>)
 800162c:	6883      	ldr	r3, [r0, #8]
 800162e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001632:	68ab      	ldr	r3, [r5, #8]
 8001634:	4313      	orrs	r3, r2
 8001636:	6083      	str	r3, [r0, #8]
 8001638:	e009      	b.n	800164e <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	b2ca      	uxtb	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	4299      	cmp	r1, r3
 8001646:	d0ed      	beq.n	8001624 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
 800164a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164e:	07c9      	lsls	r1, r1, #31
 8001650:	d406      	bmi.n	8001660 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001652:	4b45      	ldr	r3, [pc, #276]	; (8001768 <HAL_RCC_ClockConfig+0x158>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	f002 020f 	and.w	r2, r2, #15
 800165a:	4296      	cmp	r6, r2
 800165c:	d351      	bcc.n	8001702 <HAL_RCC_ClockConfig+0xf2>
 800165e:	e057      	b.n	8001710 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001660:	686b      	ldr	r3, [r5, #4]
 8001662:	4a42      	ldr	r2, [pc, #264]	; (800176c <HAL_RCC_ClockConfig+0x15c>)
 8001664:	2b01      	cmp	r3, #1
 8001666:	d103      	bne.n	8001670 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800166e:	e008      	b.n	8001682 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001670:	1e99      	subs	r1, r3, #2
 8001672:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001676:	d802      	bhi.n	800167e <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001678:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800167c:	e001      	b.n	8001682 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	f012 0f02 	tst.w	r2, #2
 8001682:	d0e1      	beq.n	8001648 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001684:	4c39      	ldr	r4, [pc, #228]	; (800176c <HAL_RCC_ClockConfig+0x15c>)
 8001686:	68a2      	ldr	r2, [r4, #8]
 8001688:	f022 0203 	bic.w	r2, r2, #3
 800168c:	4313      	orrs	r3, r2
 800168e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001690:	f7ff faa0 	bl	8000bd4 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001694:	686b      	ldr	r3, [r5, #4]
 8001696:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001698:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a0:	68a3      	ldr	r3, [r4, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d0d3      	beq.n	8001652 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016aa:	f7ff fa93 	bl	8000bd4 <HAL_GetTick>
 80016ae:	1bc0      	subs	r0, r0, r7
 80016b0:	4540      	cmp	r0, r8
 80016b2:	d9f5      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 80016b4:	2003      	movs	r0, #3
 80016b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d10a      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016be:	68a3      	ldr	r3, [r4, #8]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d0c4      	beq.n	8001652 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c8:	f7ff fa84 	bl	8000bd4 <HAL_GetTick>
 80016cc:	1bc0      	subs	r0, r0, r7
 80016ce:	4540      	cmp	r0, r8
 80016d0:	d9f5      	bls.n	80016be <HAL_RCC_ClockConfig+0xae>
 80016d2:	e7ef      	b.n	80016b4 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d10f      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80016d8:	68a3      	ldr	r3, [r4, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d0b7      	beq.n	8001652 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e2:	f7ff fa77 	bl	8000bd4 <HAL_GetTick>
 80016e6:	1bc0      	subs	r0, r0, r7
 80016e8:	4540      	cmp	r0, r8
 80016ea:	d9f5      	bls.n	80016d8 <HAL_RCC_ClockConfig+0xc8>
 80016ec:	e7e2      	b.n	80016b4 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ee:	f7ff fa71 	bl	8000bd4 <HAL_GetTick>
 80016f2:	1bc0      	subs	r0, r0, r7
 80016f4:	4540      	cmp	r0, r8
 80016f6:	d8dd      	bhi.n	80016b4 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f8:	68a3      	ldr	r3, [r4, #8]
 80016fa:	f013 0f0c 	tst.w	r3, #12
 80016fe:	d1f6      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
 8001700:	e7a7      	b.n	8001652 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	b2f2      	uxtb	r2, r6
 8001704:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	429e      	cmp	r6, r3
 800170e:	d19b      	bne.n	8001648 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	6829      	ldr	r1, [r5, #0]
 8001712:	074a      	lsls	r2, r1, #29
 8001714:	d506      	bpl.n	8001724 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001716:	4815      	ldr	r0, [pc, #84]	; (800176c <HAL_RCC_ClockConfig+0x15c>)
 8001718:	6883      	ldr	r3, [r0, #8]
 800171a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800171e:	68eb      	ldr	r3, [r5, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	070b      	lsls	r3, r1, #28
 8001726:	d507      	bpl.n	8001738 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001728:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_RCC_ClockConfig+0x15c>)
 800172a:	6929      	ldr	r1, [r5, #16]
 800172c:	6893      	ldr	r3, [r2, #8]
 800172e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001732:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001736:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001738:	f7ff ff2c 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x15c>)
 800173e:	22f0      	movs	r2, #240	; 0xf0
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	fa92 f2a2 	rbit	r2, r2
 8001746:	fab2 f282 	clz	r2, r2
 800174a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800174e:	40d3      	lsrs	r3, r2
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_RCC_ClockConfig+0x160>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
 8001754:	40d8      	lsrs	r0, r3
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <HAL_RCC_ClockConfig+0x164>)
 8001758:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800175a:	2000      	movs	r0, #0
 800175c:	f004 f9fe 	bl	8005b5c <HAL_InitTick>
  
  return HAL_OK;
 8001760:	2000      	movs	r0, #0
}
 8001762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08006ba6 	.word	0x08006ba6
 8001774:	20007d28 	.word	0x20007d28

08001778 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001778:	4b01      	ldr	r3, [pc, #4]	; (8001780 <HAL_RCC_GetHCLKFreq+0x8>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20007d28 	.word	0x20007d28

08001784 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001786:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	fa92 f2a2 	rbit	r2, r2
 8001790:	fab2 f282 	clz	r2, r2
 8001794:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001798:	40d3      	lsrs	r3, r2
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80017a0:	6810      	ldr	r0, [r2, #0]
}
 80017a2:	40d8      	lsrs	r0, r3
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08006ba6 	.word	0x08006ba6
 80017b0:	20007d28 	.word	0x20007d28

080017b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	fa92 f2a2 	rbit	r2, r2
 80017c0:	fab2 f282 	clz	r2, r2
 80017c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017c8:	40d3      	lsrs	r3, r2
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80017d0:	6810      	ldr	r0, [r2, #0]
} 
 80017d2:	40d8      	lsrs	r0, r3
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	08006ba6 	.word	0x08006ba6
 80017e0:	20007d28 	.word	0x20007d28

080017e4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017e4:	230f      	movs	r3, #15
 80017e6:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_GetClockConfig+0x34>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	f002 0203 	and.w	r2, r2, #3
 80017f0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80017f8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001800:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800180a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_RCC_GetClockConfig+0x38>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	600b      	str	r3, [r1, #0]
 8001816:	4770      	bx	lr
 8001818:	40023800 	.word	0x40023800
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_TIM_Base_MspInit>:
 8001820:	4770      	bx	lr

08001822 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001822:	6803      	ldr	r3, [r0, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001834:	2000      	movs	r0, #0
 8001836:	4770      	bx	lr

08001838 <HAL_TIM_OC_DelayElapsedCallback>:
 8001838:	4770      	bx	lr

0800183a <HAL_TIM_IC_CaptureCallback>:
 800183a:	4770      	bx	lr

0800183c <HAL_TIM_PWM_PulseFinishedCallback>:
 800183c:	4770      	bx	lr

0800183e <HAL_TIM_TriggerCallback>:
 800183e:	4770      	bx	lr

08001840 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001840:	6803      	ldr	r3, [r0, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001846:	b510      	push	{r4, lr}
 8001848:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800184a:	d514      	bpl.n	8001876 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	0792      	lsls	r2, r2, #30
 8001850:	d511      	bpl.n	8001876 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001852:	f06f 0202 	mvn.w	r2, #2
 8001856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001858:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185a:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800185c:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185e:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001860:	d002      	beq.n	8001868 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001862:	f7ff ffea 	bl	800183a <HAL_TIM_IC_CaptureCallback>
 8001866:	e004      	b.n	8001872 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001868:	f7ff ffe6 	bl	8001838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff ffe5 	bl	800183c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001872:	2300      	movs	r3, #0
 8001874:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	0750      	lsls	r0, r2, #29
 800187c:	d516      	bpl.n	80018ac <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	0751      	lsls	r1, r2, #29
 8001882:	d513      	bpl.n	80018ac <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001884:	f06f 0204 	mvn.w	r2, #4
 8001888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800188a:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800188c:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800188e:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001892:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001894:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001896:	d002      	beq.n	800189e <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001898:	f7ff ffcf 	bl	800183a <HAL_TIM_IC_CaptureCallback>
 800189c:	e004      	b.n	80018a8 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189e:	f7ff ffcb 	bl	8001838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff ffca 	bl	800183c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a8:	2300      	movs	r3, #0
 80018aa:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	0712      	lsls	r2, r2, #28
 80018b2:	d515      	bpl.n	80018e0 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	0710      	lsls	r0, r2, #28
 80018b8:	d512      	bpl.n	80018e0 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018ba:	f06f 0208 	mvn.w	r2, #8
 80018be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018c0:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018c2:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018c4:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018c6:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80018c8:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ca:	d002      	beq.n	80018d2 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80018cc:	f7ff ffb5 	bl	800183a <HAL_TIM_IC_CaptureCallback>
 80018d0:	e004      	b.n	80018dc <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d2:	f7ff ffb1 	bl	8001838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff ffb0 	bl	800183c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018dc:	2300      	movs	r3, #0
 80018de:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	06d2      	lsls	r2, r2, #27
 80018e6:	d516      	bpl.n	8001916 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	06d0      	lsls	r0, r2, #27
 80018ec:	d513      	bpl.n	8001916 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018ee:	f06f 0210 	mvn.w	r2, #16
 80018f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f4:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018f6:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f8:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018fc:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80018fe:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001900:	d002      	beq.n	8001908 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001902:	f7ff ff9a 	bl	800183a <HAL_TIM_IC_CaptureCallback>
 8001906:	e004      	b.n	8001912 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001908:	f7ff ff96 	bl	8001838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800190c:	4620      	mov	r0, r4
 800190e:	f7ff ff95 	bl	800183c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001912:	2300      	movs	r3, #0
 8001914:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	07d1      	lsls	r1, r2, #31
 800191c:	d508      	bpl.n	8001930 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	07d2      	lsls	r2, r2, #31
 8001922:	d505      	bpl.n	8001930 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001924:	f06f 0201 	mvn.w	r2, #1
 8001928:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800192a:	4620      	mov	r0, r4
 800192c:	f003 ff36 	bl	800579c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	0610      	lsls	r0, r2, #24
 8001936:	d508      	bpl.n	800194a <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	0611      	lsls	r1, r2, #24
 800193c:	d505      	bpl.n	800194a <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800193e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001942:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001944:	4620      	mov	r0, r4
 8001946:	f000 f89c 	bl	8001a82 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	0652      	lsls	r2, r2, #25
 8001950:	d508      	bpl.n	8001964 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	0650      	lsls	r0, r2, #25
 8001956:	d505      	bpl.n	8001964 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800195c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff ff6d 	bl	800183e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	0691      	lsls	r1, r2, #26
 800196a:	d50a      	bpl.n	8001982 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	0692      	lsls	r2, r2, #26
 8001970:	d507      	bpl.n	8001982 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001972:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001976:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001978:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 800197a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 800197e:	f000 b87f 	b.w	8001a80 <HAL_TIMEx_CommutationCallback>
 8001982:	bd10      	pop	{r4, pc}

08001984 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001984:	4a2e      	ldr	r2, [pc, #184]	; (8001a40 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001986:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001988:	4290      	cmp	r0, r2
 800198a:	d012      	beq.n	80019b2 <TIM_Base_SetConfig+0x2e>
 800198c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001990:	d00f      	beq.n	80019b2 <TIM_Base_SetConfig+0x2e>
 8001992:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001996:	4290      	cmp	r0, r2
 8001998:	d00b      	beq.n	80019b2 <TIM_Base_SetConfig+0x2e>
 800199a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800199e:	4290      	cmp	r0, r2
 80019a0:	d007      	beq.n	80019b2 <TIM_Base_SetConfig+0x2e>
 80019a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a6:	4290      	cmp	r0, r2
 80019a8:	d003      	beq.n	80019b2 <TIM_Base_SetConfig+0x2e>
 80019aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80019ae:	4290      	cmp	r0, r2
 80019b0:	d118      	bne.n	80019e4 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80019b2:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019b8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <TIM_Base_SetConfig+0xbc>)
 80019bc:	4290      	cmp	r0, r2
 80019be:	d037      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019c4:	d034      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <TIM_Base_SetConfig+0xc0>)
 80019c8:	4290      	cmp	r0, r2
 80019ca:	d031      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d0:	4290      	cmp	r0, r2
 80019d2:	d02d      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d8:	4290      	cmp	r0, r2
 80019da:	d029      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019dc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80019e0:	4290      	cmp	r0, r2
 80019e2:	d025      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <TIM_Base_SetConfig+0xc4>)
 80019e6:	4290      	cmp	r0, r2
 80019e8:	d022      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ee:	4290      	cmp	r0, r2
 80019f0:	d01e      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f6:	4290      	cmp	r0, r2
 80019f8:	d01a      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 80019fa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80019fe:	4290      	cmp	r0, r2
 8001a00:	d016      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 8001a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a06:	4290      	cmp	r0, r2
 8001a08:	d012      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
 8001a0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a0e:	4290      	cmp	r0, r2
 8001a10:	d00e      	beq.n	8001a30 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001a12:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a14:	688b      	ldr	r3, [r1, #8]
 8001a16:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a18:	680b      	ldr	r3, [r1, #0]
 8001a1a:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <TIM_Base_SetConfig+0xbc>)
 8001a1e:	4298      	cmp	r0, r3
 8001a20:	d00b      	beq.n	8001a3a <TIM_Base_SetConfig+0xb6>
 8001a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a26:	4298      	cmp	r0, r3
 8001a28:	d007      	beq.n	8001a3a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	6143      	str	r3, [r0, #20]
}
 8001a2e:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a30:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a36:	4313      	orrs	r3, r2
 8001a38:	e7eb      	b.n	8001a12 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a3a:	690b      	ldr	r3, [r1, #16]
 8001a3c:	6303      	str	r3, [r0, #48]	; 0x30
 8001a3e:	e7f4      	b.n	8001a2a <TIM_Base_SetConfig+0xa6>
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40014000 	.word	0x40014000

08001a4c <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001a4c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a4e:	4604      	mov	r4, r0
 8001a50:	b1a0      	cbz	r0, 8001a7c <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a5a:	b91b      	cbnz	r3, 8001a64 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a5c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a60:	f7ff fede 	bl	8001820 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a64:	2302      	movs	r3, #2
 8001a66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a6a:	6820      	ldr	r0, [r4, #0]
 8001a6c:	1d21      	adds	r1, r4, #4
 8001a6e:	f7ff ff89 	bl	8001984 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001a78:	2000      	movs	r0, #0
 8001a7a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001a7c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001a7e:	bd10      	pop	{r4, pc}

08001a80 <HAL_TIMEx_CommutationCallback>:
 8001a80:	4770      	bx	lr

08001a82 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a82:	4770      	bx	lr

08001a84 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a84:	6803      	ldr	r3, [r0, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a8c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	f022 0201 	bic.w	r2, r2, #1
 8001a94:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a96:	2320      	movs	r3, #32
 8001a98:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001a9c:	4770      	bx	lr
	...

08001aa0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001aa4:	6807      	ldr	r7, [r0, #0]
 8001aa6:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aa8:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001aaa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001aae:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ab0:	68a1      	ldr	r1, [r4, #8]
 8001ab2:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001ab4:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ab6:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001ab8:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001aba:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001abc:	4311      	orrs	r1, r2
 8001abe:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ac0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ac8:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001acc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001ad0:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001ad6:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ad8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001adc:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae4:	d17c      	bne.n	8001be0 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ae6:	429f      	cmp	r7, r3
 8001ae8:	d003      	beq.n	8001af2 <UART_SetConfig+0x52>
 8001aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aee:	429f      	cmp	r7, r3
 8001af0:	d131      	bne.n	8001b56 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001af2:	f7ff fe5f 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001af6:	6863      	ldr	r3, [r4, #4]
 8001af8:	2519      	movs	r5, #25
 8001afa:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001afe:	4368      	muls	r0, r5
 8001b00:	fbb0 f8f8 	udiv	r8, r0, r8
 8001b04:	f7ff fe56 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001b08:	6866      	ldr	r6, [r4, #4]
 8001b0a:	4368      	muls	r0, r5
 8001b0c:	0076      	lsls	r6, r6, #1
 8001b0e:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b12:	f7ff fe4f 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001b16:	6863      	ldr	r3, [r4, #4]
 8001b18:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4368      	muls	r0, r5
 8001b20:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b24:	fbb0 f0f9 	udiv	r0, r0, r9
 8001b28:	fb09 6610 	mls	r6, r9, r0, r6
 8001b2c:	f7ff fe42 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001b30:	fbb8 f8f9 	udiv	r8, r8, r9
 8001b34:	6861      	ldr	r1, [r4, #4]
 8001b36:	00f6      	lsls	r6, r6, #3
 8001b38:	3632      	adds	r6, #50	; 0x32
 8001b3a:	fbb6 f6f9 	udiv	r6, r6, r9
 8001b3e:	0076      	lsls	r6, r6, #1
 8001b40:	4368      	muls	r0, r5
 8001b42:	0049      	lsls	r1, r1, #1
 8001b44:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001b48:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001b4c:	fbb0 faf1 	udiv	sl, r0, r1
 8001b50:	f7ff fe30 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001b54:	e030      	b.n	8001bb8 <UART_SetConfig+0x118>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b56:	f7ff fe15 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001b5a:	6863      	ldr	r3, [r4, #4]
 8001b5c:	2519      	movs	r5, #25
 8001b5e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001b62:	4368      	muls	r0, r5
 8001b64:	fbb0 f8f8 	udiv	r8, r0, r8
 8001b68:	f7ff fe0c 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001b6c:	6866      	ldr	r6, [r4, #4]
 8001b6e:	4368      	muls	r0, r5
 8001b70:	0076      	lsls	r6, r6, #1
 8001b72:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b76:	f7ff fe05 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001b7a:	6863      	ldr	r3, [r4, #4]
 8001b7c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4368      	muls	r0, r5
 8001b84:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b88:	fbb0 f0f9 	udiv	r0, r0, r9
 8001b8c:	fb09 6610 	mls	r6, r9, r0, r6
 8001b90:	f7ff fdf8 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001b94:	fbb8 f8f9 	udiv	r8, r8, r9
 8001b98:	00f6      	lsls	r6, r6, #3
 8001b9a:	6861      	ldr	r1, [r4, #4]
 8001b9c:	3632      	adds	r6, #50	; 0x32
 8001b9e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001ba2:	0076      	lsls	r6, r6, #1
 8001ba4:	4368      	muls	r0, r5
 8001ba6:	0049      	lsls	r1, r1, #1
 8001ba8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001bac:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001bb0:	fbb0 faf1 	udiv	sl, r0, r1
 8001bb4:	f7ff fde6 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001bb8:	4345      	muls	r5, r0
 8001bba:	6860      	ldr	r0, [r4, #4]
 8001bbc:	0040      	lsls	r0, r0, #1
 8001bbe:	fbb5 f0f0 	udiv	r0, r5, r0
 8001bc2:	fbb0 f0f9 	udiv	r0, r0, r9
 8001bc6:	fb09 a210 	mls	r2, r9, r0, sl
 8001bca:	00d2      	lsls	r2, r2, #3
 8001bcc:	3232      	adds	r2, #50	; 0x32
 8001bce:	fbb2 f3f9 	udiv	r3, r2, r9
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	4443      	add	r3, r8
 8001bd8:	441e      	add	r6, r3
 8001bda:	60be      	str	r6, [r7, #8]
 8001bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001be0:	429f      	cmp	r7, r3
 8001be2:	d002      	beq.n	8001bea <UART_SetConfig+0x14a>
 8001be4:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <UART_SetConfig+0x238>)
 8001be6:	429f      	cmp	r7, r3
 8001be8:	d130      	bne.n	8001c4c <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bea:	f7ff fde3 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	2519      	movs	r5, #25
 8001bf2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001bf6:	4368      	muls	r0, r5
 8001bf8:	fbb0 f8f8 	udiv	r8, r0, r8
 8001bfc:	f7ff fdda 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001c00:	6866      	ldr	r6, [r4, #4]
 8001c02:	4368      	muls	r0, r5
 8001c04:	00b6      	lsls	r6, r6, #2
 8001c06:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c0a:	f7ff fdd3 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4368      	muls	r0, r5
 8001c18:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c1c:	fbb0 f0f9 	udiv	r0, r0, r9
 8001c20:	fb09 6610 	mls	r6, r9, r0, r6
 8001c24:	f7ff fdc6 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001c28:	fbb8 f8f9 	udiv	r8, r8, r9
 8001c2c:	6861      	ldr	r1, [r4, #4]
 8001c2e:	0136      	lsls	r6, r6, #4
 8001c30:	4368      	muls	r0, r5
 8001c32:	0089      	lsls	r1, r1, #2
 8001c34:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001c38:	3632      	adds	r6, #50	; 0x32
 8001c3a:	fbb0 faf1 	udiv	sl, r0, r1
 8001c3e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001c42:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001c46:	f7ff fdb5 	bl	80017b4 <HAL_RCC_GetPCLK2Freq>
 8001c4a:	e02f      	b.n	8001cac <UART_SetConfig+0x20c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c4c:	f7ff fd9a 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001c50:	6863      	ldr	r3, [r4, #4]
 8001c52:	2519      	movs	r5, #25
 8001c54:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001c58:	4368      	muls	r0, r5
 8001c5a:	fbb0 f8f8 	udiv	r8, r0, r8
 8001c5e:	f7ff fd91 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001c62:	6866      	ldr	r6, [r4, #4]
 8001c64:	4368      	muls	r0, r5
 8001c66:	00b6      	lsls	r6, r6, #2
 8001c68:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c6c:	f7ff fd8a 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001c70:	6863      	ldr	r3, [r4, #4]
 8001c72:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4368      	muls	r0, r5
 8001c7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c7e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001c82:	fb09 6610 	mls	r6, r9, r0, r6
 8001c86:	f7ff fd7d 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001c8a:	fbb8 f8f9 	udiv	r8, r8, r9
 8001c8e:	6861      	ldr	r1, [r4, #4]
 8001c90:	0136      	lsls	r6, r6, #4
 8001c92:	3632      	adds	r6, #50	; 0x32
 8001c94:	4368      	muls	r0, r5
 8001c96:	fbb6 f6f9 	udiv	r6, r6, r9
 8001c9a:	0089      	lsls	r1, r1, #2
 8001c9c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001ca0:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001ca4:	fbb0 faf1 	udiv	sl, r0, r1
 8001ca8:	f7ff fd6c 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8001cac:	4345      	muls	r5, r0
 8001cae:	6860      	ldr	r0, [r4, #4]
 8001cb0:	0080      	lsls	r0, r0, #2
 8001cb2:	fbb5 f0f0 	udiv	r0, r5, r0
 8001cb6:	fbb0 f0f9 	udiv	r0, r0, r9
 8001cba:	fb09 a210 	mls	r2, r9, r0, sl
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	3232      	adds	r2, #50	; 0x32
 8001cc2:	fbb2 f3f9 	udiv	r3, r2, r9
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4433      	add	r3, r6
 8001ccc:	4443      	add	r3, r8
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cd4:	40011000 	.word	0x40011000
 8001cd8:	40011400 	.word	0x40011400

08001cdc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cdc:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001cde:	4604      	mov	r4, r0
 8001ce0:	b340      	cbz	r0, 8001d34 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001ce2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ce6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cea:	b91b      	cbnz	r3, 8001cf4 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001cf0:	f003 fd8c 	bl	800580c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cf4:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf6:	2324      	movs	r3, #36	; 0x24
 8001cf8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cfc:	68d3      	ldr	r3, [r2, #12]
 8001cfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d02:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7ff fecb 	bl	8001aa0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d1a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d22:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d24:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001d26:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d28:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001d32:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001d34:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001d36:	bd10      	pop	{r4, pc}

08001d38 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d38:	b538      	push	{r3, r4, r5, lr}
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	4613      	mov	r3, r2
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001d3e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001d42:	2a20      	cmp	r2, #32
 8001d44:	d12a      	bne.n	8001d9c <HAL_UART_Transmit_DMA+0x64>
  {
    if((pData == NULL ) || (Size == 0))
 8001d46:	b339      	cbz	r1, 8001d98 <HAL_UART_Transmit_DMA+0x60>
 8001d48:	b333      	cbz	r3, 8001d98 <HAL_UART_Transmit_DMA+0x60>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d4a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001d4e:	2a01      	cmp	r2, #1
 8001d50:	d024      	beq.n	8001d9c <HAL_UART_Transmit_DMA+0x64>
 8001d52:	2201      	movs	r2, #1
 8001d54:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001d58:	6b20      	ldr	r0, [r4, #48]	; 0x30
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8001d5a:	84e3      	strh	r3, [r4, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d5e:	2221      	movs	r2, #33	; 0x21

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d60:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d62:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001d66:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <HAL_UART_Transmit_DMA+0x68>)

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8001d68:	84a3      	strh	r3, [r4, #36]	; 0x24
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
 8001d6a:	6221      	str	r1, [r4, #32]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001d6c:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <HAL_UART_Transmit_DMA+0x6c>)
 8001d70:	6402      	str	r2, [r0, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001d72:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_UART_Transmit_DMA+0x70>)
 8001d74:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001d76:	6822      	ldr	r2, [r4, #0]

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001d78:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001d7a:	3204      	adds	r2, #4
 8001d7c:	f7ff f840 	bl	8000e00 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d86:	601a      	str	r2, [r3, #0]
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d88:	695a      	ldr	r2, [r3, #20]
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d8a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d92:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8001d94:	4628      	mov	r0, r5
 8001d96:	bd38      	pop	{r3, r4, r5, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
 8001d9a:	bd38      	pop	{r3, r4, r5, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001d9c:	2002      	movs	r0, #2
  }
}
 8001d9e:	bd38      	pop	{r3, r4, r5, pc}
 8001da0:	08001e3d 	.word	0x08001e3d
 8001da4:	08001e6b 	.word	0x08001e6b
 8001da8:	08001f33 	.word	0x08001f33

08001dac <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8001dac:	4613      	mov	r3, r2
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001dae:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001db2:	2a20      	cmp	r2, #32
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8001db4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001db6:	4605      	mov	r5, r0
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001db8:	d137      	bne.n	8001e2a <HAL_UART_Receive_DMA+0x7e>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001dba:	2900      	cmp	r1, #0
 8001dbc:	d033      	beq.n	8001e26 <HAL_UART_Receive_DMA+0x7a>
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d031      	beq.n	8001e26 <HAL_UART_Receive_DMA+0x7a>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001dc2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001dc6:	2a01      	cmp	r2, #1
 8001dc8:	d02f      	beq.n	8001e2a <HAL_UART_Receive_DMA+0x7e>
 8001dca:	2201      	movs	r2, #1
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dcc:	2400      	movs	r4, #0
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001dce:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dd2:	2222      	movs	r2, #34	; 0x22
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd4:	63c4      	str	r4, [r0, #60]	; 0x3c
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8001dd6:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001dd8:	8583      	strh	r3, [r0, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dda:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001dde:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_UART_Receive_DMA+0x84>)
 8001de2:	63c2      	str	r2, [r0, #60]	; 0x3c
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001de4:	682e      	ldr	r6, [r5, #0]
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_UART_Receive_DMA+0x88>)
 8001de8:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_UART_Receive_DMA+0x8c>)
 8001dec:	64c2      	str	r2, [r0, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001dee:	6504      	str	r4, [r0, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001df0:	460a      	mov	r2, r1
 8001df2:	1d31      	adds	r1, r6, #4
 8001df4:	f7ff f804 	bl	8000e00 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	9401      	str	r4, [sp, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	9201      	str	r2, [sp, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	9201      	str	r2, [sp, #4]
 8001e04:	9a01      	ldr	r2, [sp, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e06:	68da      	ldr	r2, [r3, #12]

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e08:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e10:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e20:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001e22:	4620      	mov	r0, r4
 8001e24:	e002      	b.n	8001e2c <HAL_UART_Receive_DMA+0x80>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	e000      	b.n	8001e2c <HAL_UART_Receive_DMA+0x80>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8001e2a:	2002      	movs	r0, #2
  }
}
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	08001e75 	.word	0x08001e75
 8001e34:	08001f27 	.word	0x08001f27
 8001e38:	08001f33 	.word	0x08001f33

08001e3c <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001e3e:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e40:	6b82      	ldr	r2, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001e48:	d10a      	bne.n	8001e60 <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 8001e4a:	84d3      	strh	r3, [r2, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e4c:	6813      	ldr	r3, [r2, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e54:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	bd08      	pop	{r3, pc}

  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8001e60:	4610      	mov	r0, r2
 8001e62:	f002 fd6f 	bl	8004944 <HAL_UART_TxCpltCallback>
 8001e66:	bd08      	pop	{r3, pc}

08001e68 <HAL_UART_TxHalfCpltCallback>:
 8001e68:	4770      	bx	lr

08001e6a <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8001e6c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001e6e:	f7ff fffb 	bl	8001e68 <HAL_UART_TxHalfCpltCallback>
 8001e72:	bd08      	pop	{r3, pc}

08001e74 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001e74:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001e76:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e78:	6b82      	ldr	r2, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001e80:	d110      	bne.n	8001ea4 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 8001e82:	85d3      	strh	r3, [r2, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	68d9      	ldr	r1, [r3, #12]
 8001e88:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e8c:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8e:	6959      	ldr	r1, [r3, #20]
 8001e90:	f021 0101 	bic.w	r1, r1, #1
 8001e94:	6159      	str	r1, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e96:	6959      	ldr	r1, [r3, #20]
 8001e98:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001e9c:	6159      	str	r1, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f002 fd4f 	bl	8004948 <HAL_UART_RxCpltCallback>
 8001eaa:	bd08      	pop	{r3, pc}

08001eac <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001eac:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001eb0:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001eb2:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001eb4:	d132      	bne.n	8001f1c <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eb6:	6883      	ldr	r3, [r0, #8]
 8001eb8:	6901      	ldr	r1, [r0, #16]
 8001eba:	6802      	ldr	r2, [r0, #0]
 8001ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ec2:	d10b      	bne.n	8001edc <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ec4:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001ec6:	b921      	cbnz	r1, 8001ed2 <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ecc:	f823 2b02 	strh.w	r2, [r3], #2
 8001ed0:	e002      	b.n	8001ed8 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001ed8:	6283      	str	r3, [r0, #40]	; 0x28
 8001eda:	e00a      	b.n	8001ef2 <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001edc:	b919      	cbnz	r1, 8001ee6 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ede:	1c59      	adds	r1, r3, #1
 8001ee0:	6281      	str	r1, [r0, #40]	; 0x28
 8001ee2:	6852      	ldr	r2, [r2, #4]
 8001ee4:	e004      	b.n	8001ef0 <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ee6:	6852      	ldr	r2, [r2, #4]
 8001ee8:	1c59      	adds	r1, r3, #1
 8001eea:	6281      	str	r1, [r0, #40]	; 0x28
 8001eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ef0:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001ef2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001ef4:	3c01      	subs	r4, #1
 8001ef6:	b2a4      	uxth	r4, r4
 8001ef8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001efa:	b98c      	cbnz	r4, 8001f20 <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001efc:	6803      	ldr	r3, [r0, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8001f14:	f002 fd18 	bl	8004948 <HAL_UART_RxCpltCallback>
 8001f18:	4620      	mov	r0, r4
 8001f1a:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
    }

    if(--huart->RxXferCount == 0U)
 8001f20:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001f22:	bd10      	pop	{r4, pc}

08001f24 <HAL_UART_RxHalfCpltCallback>:
 8001f24:	4770      	bx	lr

08001f26 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f26:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart); 
 8001f28:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f2a:	f7ff fffb 	bl	8001f24 <HAL_UART_RxHalfCpltCallback>
 8001f2e:	bd08      	pop	{r3, pc}

08001f30 <HAL_UART_ErrorCallback>:
 8001f30:	4770      	bx	lr

08001f32 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f32:	6b81      	ldr	r1, [r0, #56]	; 0x38
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f34:	b508      	push	{r3, lr}
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001f36:	680b      	ldr	r3, [r1, #0]
 8001f38:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001f3a:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001f3e:	2821      	cmp	r0, #33	; 0x21
 8001f40:	d10a      	bne.n	8001f58 <UART_DMAError+0x26>
 8001f42:	0612      	lsls	r2, r2, #24
 8001f44:	d508      	bpl.n	8001f58 <UART_DMAError+0x26>
  {
    huart->TxXferCount = 0U;
 8001f46:	2200      	movs	r2, #0
 8001f48:	84ca      	strh	r2, [r1, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f50:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f52:	2220      	movs	r2, #32
 8001f54:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001f58:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001f5a:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8001f5e:	2a22      	cmp	r2, #34	; 0x22
 8001f60:	d106      	bne.n	8001f70 <UART_DMAError+0x3e>
 8001f62:	065b      	lsls	r3, r3, #25
 8001f64:	d504      	bpl.n	8001f70 <UART_DMAError+0x3e>
  {
    huart->RxXferCount = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001f6a:	4608      	mov	r0, r1
 8001f6c:	f7ff fd8a 	bl	8001a84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f70:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001f78:	4608      	mov	r0, r1
 8001f7a:	f7ff ffd9 	bl	8001f30 <HAL_UART_ErrorCallback>
 8001f7e:	bd08      	pop	{r3, pc}

08001f80 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f80:	6803      	ldr	r3, [r0, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f84:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f86:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001f88:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f8a:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f8c:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001f8e:	d107      	bne.n	8001fa0 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f90:	0696      	lsls	r6, r2, #26
 8001f92:	d55a      	bpl.n	800204a <HAL_UART_IRQHandler+0xca>
 8001f94:	068d      	lsls	r5, r1, #26
 8001f96:	d558      	bpl.n	800204a <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 8001f9c:	f7ff bf86 	b.w	8001eac <UART_Receive_IT>
      return;
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fa0:	f015 0001 	ands.w	r0, r5, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_UART_IRQHandler+0x2c>
 8001fa6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001faa:	d04e      	beq.n	800204a <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fac:	07d3      	lsls	r3, r2, #31
 8001fae:	d505      	bpl.n	8001fbc <HAL_UART_IRQHandler+0x3c>
 8001fb0:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fb2:	bf42      	ittt	mi
 8001fb4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001fb6:	f043 0301 	orrmi.w	r3, r3, #1
 8001fba:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fbc:	0755      	lsls	r5, r2, #29
 8001fbe:	d504      	bpl.n	8001fca <HAL_UART_IRQHandler+0x4a>
 8001fc0:	b118      	cbz	r0, 8001fca <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fca:	0793      	lsls	r3, r2, #30
 8001fcc:	d504      	bpl.n	8001fd8 <HAL_UART_IRQHandler+0x58>
 8001fce:	b118      	cbz	r0, 8001fd8 <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fd8:	0716      	lsls	r6, r2, #28
 8001fda:	d504      	bpl.n	8001fe6 <HAL_UART_IRQHandler+0x66>
 8001fdc:	b118      	cbz	r0, 8001fe6 <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fe0:	f043 0308 	orr.w	r3, r3, #8
 8001fe4:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d066      	beq.n	80020ba <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fec:	0695      	lsls	r5, r2, #26
 8001fee:	d504      	bpl.n	8001ffa <HAL_UART_IRQHandler+0x7a>
 8001ff0:	0688      	lsls	r0, r1, #26
 8001ff2:	d502      	bpl.n	8001ffa <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff ff59 	bl	8001eac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ffe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002000:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002002:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002004:	d402      	bmi.n	800200c <HAL_UART_IRQHandler+0x8c>
 8002006:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 800200a:	d01a      	beq.n	8002042 <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800200c:	f7ff fd3a 	bl	8001a84 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	0652      	lsls	r2, r2, #25
 8002016:	d510      	bpl.n	800203a <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002018:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800201a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800201c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002020:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002022:	b150      	cbz	r0, 800203a <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_UART_IRQHandler+0x13c>)
 8002026:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002028:	f7fe ff6d 	bl	8000f06 <HAL_DMA_Abort_IT>
 800202c:	2800      	cmp	r0, #0
 800202e:	d044      	beq.n	80020ba <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002030:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8002032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002036:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002038:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff ff78 	bl	8001f30 <HAL_UART_ErrorCallback>
 8002040:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002042:	f7ff ff75 	bl	8001f30 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002046:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002048:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800204a:	0616      	lsls	r6, r2, #24
 800204c:	d527      	bpl.n	800209e <HAL_UART_IRQHandler+0x11e>
 800204e:	060d      	lsls	r5, r1, #24
 8002050:	d525      	bpl.n	800209e <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002052:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002056:	2a21      	cmp	r2, #33	; 0x21
 8002058:	d12f      	bne.n	80020ba <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800205a:	68a2      	ldr	r2, [r4, #8]
 800205c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002060:	6a22      	ldr	r2, [r4, #32]
 8002062:	d10a      	bne.n	800207a <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002064:	8811      	ldrh	r1, [r2, #0]
 8002066:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800206a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800206c:	6921      	ldr	r1, [r4, #16]
 800206e:	b909      	cbnz	r1, 8002074 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8002070:	3202      	adds	r2, #2
 8002072:	e000      	b.n	8002076 <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002074:	3201      	adds	r2, #1
 8002076:	6222      	str	r2, [r4, #32]
 8002078:	e003      	b.n	8002082 <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800207a:	1c51      	adds	r1, r2, #1
 800207c:	6221      	str	r1, [r4, #32]
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002082:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002084:	3a01      	subs	r2, #1
 8002086:	b292      	uxth	r2, r2
 8002088:	84e2      	strh	r2, [r4, #38]	; 0x26
 800208a:	b9b2      	cbnz	r2, 80020ba <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002092:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800209e:	0650      	lsls	r0, r2, #25
 80020a0:	d50b      	bpl.n	80020ba <HAL_UART_IRQHandler+0x13a>
 80020a2:	064a      	lsls	r2, r1, #25
 80020a4:	d509      	bpl.n	80020ba <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ac:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020ae:	2320      	movs	r3, #32
 80020b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80020b4:	4620      	mov	r0, r4
 80020b6:	f002 fc45 	bl	8004944 <HAL_UART_TxCpltCallback>
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	080020c1 	.word	0x080020c1

080020c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80020c8:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80020ca:	f7ff ff31 	bl	8001f30 <HAL_UART_ErrorCallback>
 80020ce:	bd08      	pop	{r3, pc}

080020d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020d0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80020d2:	f000 fd63 	bl	8002b9c <vTaskStartScheduler>
  
  return osOK;
}
 80020d6:	2000      	movs	r0, #0
 80020d8:	bd08      	pop	{r3, pc}

080020da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020da:	b530      	push	{r4, r5, lr}
  TaskHandle_t handle;
  

  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020dc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80020e0:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020e2:	460b      	mov	r3, r1
  TaskHandle_t handle;
  

  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020e4:	e890 0022 	ldmia.w	r0, {r1, r5}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020e8:	b085      	sub	sp, #20
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80020ea:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80020ec:	bf14      	ite	ne
 80020ee:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020f0:	2400      	moveq	r4, #0
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  

  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020f2:	a803      	add	r0, sp, #12
 80020f4:	9001      	str	r0, [sp, #4]
 80020f6:	9400      	str	r4, [sp, #0]
 80020f8:	4628      	mov	r0, r5
 80020fa:	f000 fc79 	bl	80029f0 <xTaskCreate>
 80020fe:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
  }     
  
  return handle;
 8002100:	bf0c      	ite	eq
 8002102:	9803      	ldreq	r0, [sp, #12]
  

  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8002104:	2000      	movne	r0, #0
  }     
  
  return handle;
}
 8002106:	b005      	add	sp, #20
 8002108:	bd30      	pop	{r4, r5, pc}

0800210a <osSemaphoreCreate>:
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
  (void) semaphore_def;
  osSemaphoreId sema;
 
  if (count == 1) {
 800210a:	2901      	cmp	r1, #1
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800210c:	b510      	push	{r4, lr}
 800210e:	4608      	mov	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
 
  if (count == 1) {
 8002110:	d10b      	bne.n	800212a <osSemaphoreCreate+0x20>
    vSemaphoreCreateBinary(sema);
 8002112:	2203      	movs	r2, #3
 8002114:	2100      	movs	r1, #0
 8002116:	f000 fa0f 	bl	8002538 <xQueueGenericCreate>
 800211a:	4604      	mov	r4, r0
 800211c:	b138      	cbz	r0, 800212e <osSemaphoreCreate+0x24>
 800211e:	2300      	movs	r3, #0
 8002120:	461a      	mov	r2, r3
 8002122:	4619      	mov	r1, r3
 8002124:	f000 fa2c 	bl	8002580 <xQueueGenericSend>
 8002128:	e001      	b.n	800212e <osSemaphoreCreate+0x24>
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
#else
  return NULL;
 800212a:	2000      	movs	r0, #0
 800212c:	bd10      	pop	{r4, pc}
 800212e:	4620      	mov	r0, r4
#endif
}
 8002130:	bd10      	pop	{r4, pc}

08002132 <osMessageCreate>:
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;

  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002132:	2200      	movs	r2, #0
 8002134:	c803      	ldmia	r0, {r0, r1}
 8002136:	f000 b9ff 	b.w	8002538 <xQueueGenericCreate>

0800213a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800213a:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800213c:	f001 f848 	bl	80031d0 <xTaskGetSchedulerState>
 8002140:	2801      	cmp	r0, #1
 8002142:	d003      	beq.n	800214c <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002148:	f001 b9bc 	b.w	80034c4 <xPortSysTickHandler>
 800214c:	bd08      	pop	{r3, pc}

0800214e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214e:	f100 0308 	add.w	r3, r0, #8
 8002152:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002154:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002158:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800215c:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800215e:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002160:	6003      	str	r3, [r0, #0]
 8002162:	4770      	bx	lr

08002164 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002164:	2300      	movs	r3, #0
 8002166:	6103      	str	r3, [r0, #16]
 8002168:	4770      	bx	lr

0800216a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800216a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800216c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002176:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002178:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800217a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800217c:	3301      	adds	r3, #1
 800217e:	6003      	str	r3, [r0, #0]
 8002180:	4770      	bx	lr

08002182 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002182:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002184:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002186:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002188:	d101      	bne.n	800218e <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800218a:	6903      	ldr	r3, [r0, #16]
 800218c:	e007      	b.n	800219e <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800218e:	f100 0308 	add.w	r3, r0, #8
 8002192:	685c      	ldr	r4, [r3, #4]
 8002194:	6825      	ldr	r5, [r4, #0]
 8002196:	42aa      	cmp	r2, r5
 8002198:	d301      	bcc.n	800219e <vListInsert+0x1c>
 800219a:	4623      	mov	r3, r4
 800219c:	e7f9      	b.n	8002192 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021a2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021a4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80021a6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80021a8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021aa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80021ac:	3301      	adds	r3, #1
 80021ae:	6003      	str	r3, [r0, #0]
 80021b0:	bd30      	pop	{r4, r5, pc}

080021b2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021b2:	6841      	ldr	r1, [r0, #4]
 80021b4:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021b6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021b8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ba:	6882      	ldr	r2, [r0, #8]
 80021bc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c2:	bf08      	it	eq
 80021c4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80021c6:	2200      	movs	r2, #0
 80021c8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	3801      	subs	r0, #1
 80021ce:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80021d0:	4770      	bx	lr
	...

080021d4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80021d4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <prvInsertBlockIntoFreeList+0x40>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4282      	cmp	r2, r0
 80021dc:	d201      	bcs.n	80021e2 <prvInsertBlockIntoFreeList+0xe>
 80021de:	4613      	mov	r3, r2
 80021e0:	e7fa      	b.n	80021d8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	185c      	adds	r4, r3, r1
 80021e6:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021e8:	bf01      	itttt	eq
 80021ea:	6840      	ldreq	r0, [r0, #4]
 80021ec:	1809      	addeq	r1, r1, r0
 80021ee:	4618      	moveq	r0, r3
 80021f0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80021f2:	6841      	ldr	r1, [r0, #4]
 80021f4:	1844      	adds	r4, r0, r1
 80021f6:	42a2      	cmp	r2, r4
 80021f8:	d107      	bne.n	800220a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80021fa:	4c07      	ldr	r4, [pc, #28]	; (8002218 <prvInsertBlockIntoFreeList+0x44>)
 80021fc:	6824      	ldr	r4, [r4, #0]
 80021fe:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002200:	bf1f      	itttt	ne
 8002202:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002204:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002206:	1909      	addne	r1, r1, r4
 8002208:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800220a:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800220c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800220e:	bf18      	it	ne
 8002210:	6018      	strne	r0, [r3, #0]
 8002212:	bd10      	pop	{r4, pc}
 8002214:	20007db8 	.word	0x20007db8
 8002218:	20007db4 	.word	0x20007db4

0800221c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002220:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8002222:	f000 fcf7 	bl	8002c14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002226:	4940      	ldr	r1, [pc, #256]	; (8002328 <pvPortMalloc+0x10c>)
 8002228:	4d40      	ldr	r5, [pc, #256]	; (800232c <pvPortMalloc+0x110>)
 800222a:	680b      	ldr	r3, [r1, #0]
 800222c:	bb0b      	cbnz	r3, 8002272 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800222e:	4a40      	ldr	r2, [pc, #256]	; (8002330 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002230:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002232:	bf1f      	itttt	ne
 8002234:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002236:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800223a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800223e:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002240:	bf14      	ite	ne
 8002242:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002244:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002248:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800224a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800224c:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002250:	4e38      	ldr	r6, [pc, #224]	; (8002334 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8002252:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8002254:	2000      	movs	r0, #0
 8002256:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002258:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 800225a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800225c:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800225e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002260:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002262:	4b35      	ldr	r3, [pc, #212]	; (8002338 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002264:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002266:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002268:	4b34      	ldr	r3, [pc, #208]	; (800233c <pvPortMalloc+0x120>)
 800226a:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800226c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002270:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002272:	682f      	ldr	r7, [r5, #0]
 8002274:	4227      	tst	r7, r4
 8002276:	d146      	bne.n	8002306 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002278:	2c00      	cmp	r4, #0
 800227a:	d045      	beq.n	8002308 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 800227c:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002280:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002282:	bf1c      	itt	ne
 8002284:	f023 0307 	bicne.w	r3, r3, #7
 8002288:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800228a:	2b00      	cmp	r3, #0
 800228c:	d039      	beq.n	8002302 <pvPortMalloc+0xe6>
 800228e:	4a2b      	ldr	r2, [pc, #172]	; (800233c <pvPortMalloc+0x120>)
 8002290:	6816      	ldr	r6, [r2, #0]
 8002292:	42b3      	cmp	r3, r6
 8002294:	4690      	mov	r8, r2
 8002296:	d836      	bhi.n	8002306 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <pvPortMalloc+0x118>)
 800229a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800229c:	6868      	ldr	r0, [r5, #4]
 800229e:	4283      	cmp	r3, r0
 80022a0:	d803      	bhi.n	80022aa <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80022a2:	6809      	ldr	r1, [r1, #0]
 80022a4:	428d      	cmp	r5, r1
 80022a6:	d106      	bne.n	80022b6 <pvPortMalloc+0x9a>
 80022a8:	e02d      	b.n	8002306 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022aa:	682c      	ldr	r4, [r5, #0]
 80022ac:	2c00      	cmp	r4, #0
 80022ae:	d0f8      	beq.n	80022a2 <pvPortMalloc+0x86>
 80022b0:	462a      	mov	r2, r5
 80022b2:	4625      	mov	r5, r4
 80022b4:	e7f2      	b.n	800229c <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022b6:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022b8:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022ba:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80022bc:	1ac2      	subs	r2, r0, r3
 80022be:	2a10      	cmp	r2, #16
 80022c0:	d90f      	bls.n	80022e2 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022c2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022c4:	0741      	lsls	r1, r0, #29
 80022c6:	d008      	beq.n	80022da <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	e7fe      	b.n	80022d8 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022da:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022dc:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022de:	f7ff ff79 	bl	80021d4 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022e2:	4915      	ldr	r1, [pc, #84]	; (8002338 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022e4:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022e6:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022e8:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022ea:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022ec:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 80022ee:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022f2:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80022f6:	bf38      	it	cc
 80022f8:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022fa:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022fc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80022fe:	602b      	str	r3, [r5, #0]
 8002300:	e002      	b.n	8002308 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002302:	461c      	mov	r4, r3
 8002304:	e000      	b.n	8002308 <pvPortMalloc+0xec>
 8002306:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002308:	f000 fd24 	bl	8002d54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800230c:	0763      	lsls	r3, r4, #29
 800230e:	d008      	beq.n	8002322 <pvPortMalloc+0x106>
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	e7fe      	b.n	8002320 <pvPortMalloc+0x104>
	return pvReturn;
}
 8002322:	4620      	mov	r0, r4
 8002324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002328:	20007db4 	.word	0x20007db4
 800232c:	2000b9c0 	.word	0x2000b9c0
 8002330:	20007dc0 	.word	0x20007dc0
 8002334:	20007db8 	.word	0x20007db8
 8002338:	2000b9c4 	.word	0x2000b9c4
 800233c:	20007db0 	.word	0x20007db0

08002340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002340:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8002342:	4604      	mov	r4, r0
 8002344:	b370      	cbz	r0, 80023a4 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <vPortFree+0x68>)
 8002348:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4213      	tst	r3, r2
 8002350:	d108      	bne.n	8002364 <vPortFree+0x24>
 8002352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	e7fe      	b.n	8002362 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002364:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002368:	b141      	cbz	r1, 800237c <vPortFree+0x3c>
 800236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	e7fe      	b.n	800237a <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800237c:	ea23 0302 	bic.w	r3, r3, r2
 8002380:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8002384:	f000 fc46 	bl	8002c14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <vPortFree+0x6c>)
 800238a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800238e:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002390:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002394:	440b      	add	r3, r1
 8002396:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002398:	f7ff ff1c 	bl	80021d4 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80023a0:	f000 bcd8 	b.w	8002d54 <xTaskResumeAll>
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	bf00      	nop
 80023a8:	2000b9c0 	.word	0x2000b9c0
 80023ac:	20007db0 	.word	0x20007db0

080023b0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b6:	6b86      	ldr	r6, [r0, #56]	; 0x38

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023b8:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023ba:	b932      	cbnz	r2, 80023ca <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023bc:	6805      	ldr	r5, [r0, #0]
 80023be:	bb2d      	cbnz	r5, 800240c <prvCopyDataToQueue+0x5c>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023c0:	6840      	ldr	r0, [r0, #4]
 80023c2:	f000 ff5b 	bl	800327c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80023c6:	6065      	str	r5, [r4, #4]
 80023c8:	e027      	b.n	800241a <prvCopyDataToQueue+0x6a>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80023ca:	b965      	cbnz	r5, 80023e6 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80023cc:	6880      	ldr	r0, [r0, #8]
 80023ce:	f003 fcd6 	bl	8005d7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80023d2:	68a2      	ldr	r2, [r4, #8]
 80023d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023d8:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80023da:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023dc:	4293      	cmp	r3, r2
 80023de:	d317      	bcc.n	8002410 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	60a3      	str	r3, [r4, #8]
 80023e4:	e014      	b.n	8002410 <prvCopyDataToQueue+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e6:	68c0      	ldr	r0, [r0, #12]
 80023e8:	f003 fcc9 	bl	8005d7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023ee:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023f0:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023f2:	425b      	negs	r3, r3
 80023f4:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023f6:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023f8:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80023fa:	bf3e      	ittt	cc
 80023fc:	6862      	ldrcc	r2, [r4, #4]
 80023fe:	189b      	addcc	r3, r3, r2
 8002400:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002402:	2d02      	cmp	r5, #2
 8002404:	d106      	bne.n	8002414 <prvCopyDataToQueue+0x64>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002406:	b13e      	cbz	r6, 8002418 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002408:	3e01      	subs	r6, #1
 800240a:	e003      	b.n	8002414 <prvCopyDataToQueue+0x64>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800240c:	4610      	mov	r0, r2
 800240e:	e004      	b.n	800241a <prvCopyDataToQueue+0x6a>
 8002410:	4628      	mov	r0, r5
 8002412:	e002      	b.n	800241a <prvCopyDataToQueue+0x6a>
 8002414:	2000      	movs	r0, #0
 8002416:	e000      	b.n	800241a <prvCopyDataToQueue+0x6a>
 8002418:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800241a:	3601      	adds	r6, #1
 800241c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800241e:	bd70      	pop	{r4, r5, r6, pc}

08002420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002420:	4603      	mov	r3, r0
 8002422:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002426:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002428:	b162      	cbz	r2, 8002444 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800242a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800242c:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800242e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002430:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002432:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002434:	bf24      	itt	cs
 8002436:	6819      	ldrcs	r1, [r3, #0]
 8002438:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800243a:	68d9      	ldr	r1, [r3, #12]
	}
}
 800243c:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002440:	f003 bc9d 	b.w	8005d7e <memcpy>
	}
}
 8002444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002448:	4770      	bx	lr

0800244a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800244a:	b570      	push	{r4, r5, r6, lr}
 800244c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800244e:	f000 ffd1 	bl	80033f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002452:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002456:	f104 0624 	add.w	r6, r4, #36	; 0x24
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800245a:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800245c:	2d00      	cmp	r5, #0
 800245e:	dd0a      	ble.n	8002476 <prvUnlockQueue+0x2c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002462:	b143      	cbz	r3, 8002476 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002464:	4630      	mov	r0, r6
 8002466:	f000 fe21 	bl	80030ac <xTaskRemoveFromEventList>
 800246a:	b108      	cbz	r0, 8002470 <prvUnlockQueue+0x26>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800246c:	f000 feaa 	bl	80031c4 <vTaskMissedYield>
 8002470:	3d01      	subs	r5, #1
 8002472:	b26d      	sxtb	r5, r5
 8002474:	e7f2      	b.n	800245c <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002476:	23ff      	movs	r3, #255	; 0xff
 8002478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800247c:	f000 ffdc 	bl	8003438 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002480:	f000 ffb8 	bl	80033f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002484:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002488:	f104 0610 	add.w	r6, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800248c:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800248e:	2d00      	cmp	r5, #0
 8002490:	dd0a      	ble.n	80024a8 <prvUnlockQueue+0x5e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	b143      	cbz	r3, 80024a8 <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002496:	4630      	mov	r0, r6
 8002498:	f000 fe08 	bl	80030ac <xTaskRemoveFromEventList>
 800249c:	b108      	cbz	r0, 80024a2 <prvUnlockQueue+0x58>
				{
					vTaskMissedYield();
 800249e:	f000 fe91 	bl	80031c4 <vTaskMissedYield>
 80024a2:	3d01      	subs	r5, #1
 80024a4:	b26d      	sxtb	r5, r5
 80024a6:	e7f2      	b.n	800248e <prvUnlockQueue+0x44>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80024a8:	23ff      	movs	r3, #255	; 0xff
 80024aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80024ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80024b2:	f000 bfc1 	b.w	8003438 <vPortExitCritical>
	...

080024b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024b8:	b538      	push	{r3, r4, r5, lr}
 80024ba:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80024bc:	4604      	mov	r4, r0
 80024be:	b940      	cbnz	r0, 80024d2 <xQueueGenericReset+0x1a>
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	e7fe      	b.n	80024d0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80024d2:	f000 ff8f 	bl	80033f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80024d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024da:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024dc:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024de:	4343      	muls	r3, r0
 80024e0:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024e2:	1a1b      	subs	r3, r3, r0
 80024e4:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024e6:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024e8:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024ea:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80024ec:	23ff      	movs	r3, #255	; 0xff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024ee:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80024f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80024f8:	b97d      	cbnz	r5, 800251a <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024fa:	6923      	ldr	r3, [r4, #16]
 80024fc:	b1ab      	cbz	r3, 800252a <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fe:	f104 0010 	add.w	r0, r4, #16
 8002502:	f000 fdd3 	bl	80030ac <xTaskRemoveFromEventList>
 8002506:	b180      	cbz	r0, 800252a <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <xQueueGenericReset+0x7c>)
 800250a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	e007      	b.n	800252a <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800251a:	f104 0010 	add.w	r0, r4, #16
 800251e:	f7ff fe16 	bl	800214e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002522:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002526:	f7ff fe12 	bl	800214e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800252a:	f000 ff85 	bl	8003438 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800252e:	2001      	movs	r0, #1
 8002530:	bd38      	pop	{r3, r4, r5, pc}
 8002532:	bf00      	nop
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	460d      	mov	r5, r1
 800253c:	4617      	mov	r7, r2
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800253e:	4606      	mov	r6, r0
 8002540:	b940      	cbnz	r0, 8002554 <xQueueGenericCreate+0x1c>
 8002542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	e7fe      	b.n	8002552 <xQueueGenericCreate+0x1a>
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002554:	4348      	muls	r0, r1
 8002556:	3050      	adds	r0, #80	; 0x50
 8002558:	f7ff fe60 	bl	800221c <pvPortMalloc>

		if( pxNewQueue != NULL )
 800255c:	4604      	mov	r4, r0
 800255e:	b168      	cbz	r0, 800257c <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002560:	b90d      	cbnz	r5, 8002566 <xQueueGenericCreate+0x2e>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002562:	6020      	str	r0, [r4, #0]
 8002564:	e002      	b.n	800256c <xQueueGenericCreate+0x34>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002566:	f100 0350 	add.w	r3, r0, #80	; 0x50
 800256a:	6003      	str	r3, [r0, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800256c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800256e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002570:	2101      	movs	r1, #1
 8002572:	4620      	mov	r0, r4
 8002574:	f7ff ffa0 	bl	80024b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002578:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
 800257c:	4620      	mov	r0, r4
 800257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002580 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002584:	4689      	mov	r9, r1
 8002586:	9201      	str	r2, [sp, #4]
 8002588:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800258a:	4604      	mov	r4, r0
 800258c:	b940      	cbnz	r0, 80025a0 <xQueueGenericSend+0x20>
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	e7fe      	b.n	800259e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025a0:	b951      	cbnz	r1, 80025b8 <xQueueGenericSend+0x38>
 80025a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025a4:	b143      	cbz	r3, 80025b8 <xQueueGenericSend+0x38>
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	e7fe      	b.n	80025b6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025b8:	2f02      	cmp	r7, #2
 80025ba:	d10b      	bne.n	80025d4 <xQueueGenericSend+0x54>
 80025bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d008      	beq.n	80025d4 <xQueueGenericSend+0x54>
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	e7fe      	b.n	80025d2 <xQueueGenericSend+0x52>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025d4:	f000 fdfc 	bl	80031d0 <xTaskGetSchedulerState>
 80025d8:	b910      	cbnz	r0, 80025e0 <xQueueGenericSend+0x60>
 80025da:	9e01      	ldr	r6, [sp, #4]
 80025dc:	b10e      	cbz	r6, 80025e2 <xQueueGenericSend+0x62>
 80025de:	e072      	b.n	80026c6 <xQueueGenericSend+0x146>
 80025e0:	2600      	movs	r6, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 80025e2:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 80026e0 <xQueueGenericSend+0x160>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80025e6:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025ea:	f000 ff03 	bl	80033f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d301      	bcc.n	80025fa <xQueueGenericSend+0x7a>
 80025f6:	2f02      	cmp	r7, #2
 80025f8:	d117      	bne.n	800262a <xQueueGenericSend+0xaa>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025fa:	463a      	mov	r2, r7
 80025fc:	4649      	mov	r1, r9
 80025fe:	4620      	mov	r0, r4
 8002600:	f7ff fed6 	bl	80023b0 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002606:	b11b      	cbz	r3, 8002610 <xQueueGenericSend+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002608:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800260c:	f000 fd4e 	bl	80030ac <xTaskRemoveFromEventList>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002610:	b138      	cbz	r0, 8002622 <xQueueGenericSend+0xa2>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002612:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <xQueueGenericSend+0x160>)
 8002614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002622:	f000 ff09 	bl	8003438 <vPortExitCritical>
				return pdPASS;
 8002626:	2001      	movs	r0, #1
 8002628:	e056      	b.n	80026d8 <xQueueGenericSend+0x158>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800262a:	9d01      	ldr	r5, [sp, #4]
 800262c:	b91d      	cbnz	r5, 8002636 <xQueueGenericSend+0xb6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800262e:	f000 ff03 	bl	8003438 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002632:	4628      	mov	r0, r5
 8002634:	e050      	b.n	80026d8 <xQueueGenericSend+0x158>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002636:	b916      	cbnz	r6, 800263e <xQueueGenericSend+0xbe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002638:	a802      	add	r0, sp, #8
 800263a:	f000 fd79 	bl	8003130 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800263e:	f000 fefb 	bl	8003438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002642:	f000 fae7 	bl	8002c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002646:	f000 fed5 	bl	80033f4 <vPortEnterCritical>
 800264a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	bf08      	it	eq
 8002652:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002656:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800265a:	2bff      	cmp	r3, #255	; 0xff
 800265c:	bf08      	it	eq
 800265e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002662:	f000 fee9 	bl	8003438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002666:	a901      	add	r1, sp, #4
 8002668:	a802      	add	r0, sp, #8
 800266a:	f000 fd71 	bl	8003150 <xTaskCheckForTimeOut>
 800266e:	bb18      	cbnz	r0, 80026b8 <xQueueGenericSend+0x138>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002670:	f000 fec0 	bl	80033f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002674:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002676:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002678:	f000 fede 	bl	8003438 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800267c:	42ae      	cmp	r6, r5
 800267e:	d115      	bne.n	80026ac <xQueueGenericSend+0x12c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002680:	9901      	ldr	r1, [sp, #4]
 8002682:	f104 0010 	add.w	r0, r4, #16
 8002686:	f000 fcf7 	bl	8003078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800268a:	4620      	mov	r0, r4
 800268c:	f7ff fedd 	bl	800244a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002690:	f000 fb60 	bl	8002d54 <xTaskResumeAll>
 8002694:	b108      	cbz	r0, 800269a <xQueueGenericSend+0x11a>
 8002696:	2601      	movs	r6, #1
 8002698:	e7a7      	b.n	80025ea <xQueueGenericSend+0x6a>
				{
					portYIELD_WITHIN_API();
 800269a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800269e:	f8ca 3000 	str.w	r3, [sl]
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	e7f4      	b.n	8002696 <xQueueGenericSend+0x116>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff fecc 	bl	800244a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026b2:	f000 fb4f 	bl	8002d54 <xTaskResumeAll>
 80026b6:	e7ee      	b.n	8002696 <xQueueGenericSend+0x116>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff fec6 	bl	800244a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026be:	f000 fb49 	bl	8002d54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026c2:	2000      	movs	r0, #0
 80026c4:	e008      	b.n	80026d8 <xQueueGenericSend+0x158>
 80026c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	e7fe      	b.n	80026d6 <xQueueGenericSend+0x156>
		}
	}
}
 80026d8:	b004      	add	sp, #16
 80026da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026de:	bf00      	nop
 80026e0:	e000ed04 	.word	0xe000ed04

080026e4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80026e8:	4604      	mov	r4, r0
 80026ea:	b940      	cbnz	r0, 80026fe <xQueueGiveFromISR+0x1a>
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	e7fe      	b.n	80026fc <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80026fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002700:	b143      	cbz	r3, 8002714 <xQueueGiveFromISR+0x30>
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	e7fe      	b.n	8002712 <xQueueGiveFromISR+0x2e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002714:	6803      	ldr	r3, [r0, #0]
 8002716:	b90b      	cbnz	r3, 800271c <xQueueGiveFromISR+0x38>
 8002718:	6843      	ldr	r3, [r0, #4]
 800271a:	bb4b      	cbnz	r3, 8002770 <xQueueGiveFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800271c:	f000 ff72 	bl	8003604 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002720:	f3ef 8611 	mrs	r6, BASEPRI
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002734:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002736:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002738:	429a      	cmp	r2, r3
 800273a:	d217      	bcs.n	800276c <xQueueGiveFromISR+0x88>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800273c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002740:	3201      	adds	r2, #1
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002742:	b25b      	sxtb	r3, r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002744:	63a2      	str	r2, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	d10a      	bne.n	8002760 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800274a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800274c:	b163      	cbz	r3, 8002768 <xQueueGiveFromISR+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800274e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002752:	f000 fcab 	bl	80030ac <xTaskRemoveFromEventList>
 8002756:	b138      	cbz	r0, 8002768 <xQueueGiveFromISR+0x84>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002758:	b135      	cbz	r5, 8002768 <xQueueGiveFromISR+0x84>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800275a:	2001      	movs	r0, #1
 800275c:	6028      	str	r0, [r5, #0]
 800275e:	e010      	b.n	8002782 <xQueueGiveFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002760:	3301      	adds	r3, #1
 8002762:	b25b      	sxtb	r3, r3
 8002764:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002768:	2001      	movs	r0, #1
 800276a:	e00a      	b.n	8002782 <xQueueGiveFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800276c:	2000      	movs	r0, #0
 800276e:	e008      	b.n	8002782 <xQueueGiveFromISR+0x9e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	e7fe      	b.n	8002780 <xQueueGiveFromISR+0x9c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002782:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8002786:	bd70      	pop	{r4, r5, r6, pc}

08002788 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800278c:	4688      	mov	r8, r1
 800278e:	9201      	str	r2, [sp, #4]
 8002790:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002792:	4604      	mov	r4, r0
 8002794:	b940      	cbnz	r0, 80027a8 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	e7fe      	b.n	80027a6 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a8:	b951      	cbnz	r1, 80027c0 <xQueueGenericReceive+0x38>
 80027aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027ac:	b143      	cbz	r3, 80027c0 <xQueueGenericReceive+0x38>
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	e7fe      	b.n	80027be <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027c0:	f000 fd06 	bl	80031d0 <xTaskGetSchedulerState>
 80027c4:	b910      	cbnz	r0, 80027cc <xQueueGenericReceive+0x44>
 80027c6:	9e01      	ldr	r6, [sp, #4]
 80027c8:	b10e      	cbz	r6, 80027ce <xQueueGenericReceive+0x46>
 80027ca:	e08a      	b.n	80028e2 <xQueueGenericReceive+0x15a>
 80027cc:	2600      	movs	r6, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 80027ce:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80028fc <xQueueGenericReceive+0x174>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80027d2:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80027d4:	f000 fe0e 	bl	80033f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d8:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027da:	b33d      	cbz	r5, 800282c <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027dc:	4641      	mov	r1, r8
 80027de:	4620      	mov	r0, r4
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80027e0:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027e2:	f7ff fe1d 	bl	8002420 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80027e6:	f1b9 0f00 	cmp.w	r9, #0
 80027ea:	d10b      	bne.n	8002804 <xQueueGenericReceive+0x7c>
					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027ec:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80027ee:	3d01      	subs	r5, #1
 80027f0:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027f2:	b913      	cbnz	r3, 80027fa <xQueueGenericReceive+0x72>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80027f4:	f000 fd92 	bl	800331c <pvTaskIncrementMutexHeldCount>
 80027f8:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027fa:	6923      	ldr	r3, [r4, #16]
 80027fc:	b193      	cbz	r3, 8002824 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027fe:	f104 0010 	add.w	r0, r4, #16
 8002802:	e004      	b.n	800280e <xQueueGenericReceive+0x86>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002804:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002806:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002808:	b163      	cbz	r3, 8002824 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800280a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800280e:	f000 fc4d 	bl	80030ac <xTaskRemoveFromEventList>
 8002812:	b138      	cbz	r0, 8002824 <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8002814:	4b39      	ldr	r3, [pc, #228]	; (80028fc <xQueueGenericReceive+0x174>)
 8002816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002824:	f000 fe08 	bl	8003438 <vPortExitCritical>
				return pdPASS;
 8002828:	2001      	movs	r0, #1
 800282a:	e063      	b.n	80028f4 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800282c:	9d01      	ldr	r5, [sp, #4]
 800282e:	b915      	cbnz	r5, 8002836 <xQueueGenericReceive+0xae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002830:	f000 fe02 	bl	8003438 <vPortExitCritical>
 8002834:	e053      	b.n	80028de <xQueueGenericReceive+0x156>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 8002836:	b916      	cbnz	r6, 800283e <xQueueGenericReceive+0xb6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002838:	a802      	add	r0, sp, #8
 800283a:	f000 fc79 	bl	8003130 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800283e:	f000 fdfb 	bl	8003438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002842:	f000 f9e7 	bl	8002c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002846:	f000 fdd5 	bl	80033f4 <vPortEnterCritical>
 800284a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800284e:	2bff      	cmp	r3, #255	; 0xff
 8002850:	bf08      	it	eq
 8002852:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002856:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	bf08      	it	eq
 800285e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002862:	f000 fde9 	bl	8003438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002866:	a901      	add	r1, sp, #4
 8002868:	a802      	add	r0, sp, #8
 800286a:	f000 fc71 	bl	8003150 <xTaskCheckForTimeOut>
 800286e:	bb50      	cbnz	r0, 80028c6 <xQueueGenericReceive+0x13e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002870:	f000 fdc0 	bl	80033f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002874:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002876:	f000 fddf 	bl	8003438 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800287a:	b9f5      	cbnz	r5, 80028ba <xQueueGenericReceive+0x132>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	b933      	cbnz	r3, 800288e <xQueueGenericReceive+0x106>
					{
						taskENTER_CRITICAL();
 8002880:	f000 fdb8 	bl	80033f4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002884:	6860      	ldr	r0, [r4, #4]
 8002886:	f000 fcb3 	bl	80031f0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800288a:	f000 fdd5 	bl	8003438 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800288e:	9901      	ldr	r1, [sp, #4]
 8002890:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002894:	f000 fbf0 	bl	8003078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff fdd6 	bl	800244a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800289e:	f000 fa59 	bl	8002d54 <xTaskResumeAll>
 80028a2:	b108      	cbz	r0, 80028a8 <xQueueGenericReceive+0x120>
 80028a4:	2601      	movs	r6, #1
 80028a6:	e795      	b.n	80027d4 <xQueueGenericReceive+0x4c>
				{
					portYIELD_WITHIN_API();
 80028a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028ac:	f8ca 3000 	str.w	r3, [sl]
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	e7f4      	b.n	80028a4 <xQueueGenericReceive+0x11c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fdc5 	bl	800244a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028c0:	f000 fa48 	bl	8002d54 <xTaskResumeAll>
 80028c4:	e7ee      	b.n	80028a4 <xQueueGenericReceive+0x11c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff fdbf 	bl	800244a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028cc:	f000 fa42 	bl	8002d54 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028d0:	f000 fd90 	bl	80033f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028d4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80028d6:	f000 fdaf 	bl	8003438 <vPortExitCritical>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028da:	2d00      	cmp	r5, #0
 80028dc:	d1e2      	bne.n	80028a4 <xQueueGenericReceive+0x11c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028de:	4628      	mov	r0, r5
 80028e0:	e008      	b.n	80028f4 <xQueueGenericReceive+0x16c>
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	e7fe      	b.n	80028f2 <xQueueGenericReceive+0x16a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80028f4:	b004      	add	sp, #16
 80028f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028fa:	bf00      	nop
 80028fc:	e000ed04 	.word	0xe000ed04

08002900 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002900:	b510      	push	{r4, lr}
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8002902:	4604      	mov	r4, r0
 8002904:	b940      	cbnz	r0, 8002918 <uxQueueMessagesWaiting+0x18>
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	e7fe      	b.n	8002916 <uxQueueMessagesWaiting+0x16>

	taskENTER_CRITICAL();
 8002918:	f000 fd6c 	bl	80033f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800291c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	}
	taskEXIT_CRITICAL();
 800291e:	f000 fd8b 	bl	8003438 <vPortExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002922:	4620      	mov	r0, r4
 8002924:	bd10      	pop	{r4, pc}
	...

08002928 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002928:	4a06      	ldr	r2, [pc, #24]	; (8002944 <prvResetNextTaskUnblockTime+0x1c>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <prvResetNextTaskUnblockTime+0x20>)
 8002930:	b911      	cbnz	r1, 8002938 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002932:	f04f 32ff 	mov.w	r2, #4294967295
 8002936:	e003      	b.n	8002940 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800293c:	68d2      	ldr	r2, [r2, #12]
 800293e:	6852      	ldr	r2, [r2, #4]
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4770      	bx	lr
 8002944:	2000b9cc 	.word	0x2000b9cc
 8002948:	2000ba98 	.word	0x2000ba98

0800294c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <prvAddCurrentTaskToDelayedList+0x74>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002950:	4d1c      	ldr	r5, [pc, #112]	; (80029c4 <prvAddCurrentTaskToDelayedList+0x78>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002952:	681e      	ldr	r6, [r3, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002954:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002956:	6828      	ldr	r0, [r5, #0]
 8002958:	3004      	adds	r0, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800295a:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800295c:	f7ff fc29 	bl	80021b2 <uxListRemove>
 8002960:	462b      	mov	r3, r5
 8002962:	b940      	cbnz	r0, 8002976 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002964:	682a      	ldr	r2, [r5, #0]
 8002966:	4d18      	ldr	r5, [pc, #96]	; (80029c8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002968:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800296a:	6828      	ldr	r0, [r5, #0]
 800296c:	2201      	movs	r2, #1
 800296e:	408a      	lsls	r2, r1
 8002970:	ea20 0202 	bic.w	r2, r0, r2
 8002974:	602a      	str	r2, [r5, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002976:	1c62      	adds	r2, r4, #1
 8002978:	d107      	bne.n	800298a <prvAddCurrentTaskToDelayedList+0x3e>
 800297a:	b137      	cbz	r7, 800298a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	4813      	ldr	r0, [pc, #76]	; (80029cc <prvAddCurrentTaskToDelayedList+0x80>)
 8002980:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002986:	f7ff bbf0 	b.w	800216a <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800298a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002990:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002992:	42a6      	cmp	r6, r4
 8002994:	d907      	bls.n	80029a6 <prvAddCurrentTaskToDelayedList+0x5a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <prvAddCurrentTaskToDelayedList+0x84>)
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800299c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029a0:	3104      	adds	r1, #4
 80029a2:	f7ff bbee 	b.w	8002182 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <prvAddCurrentTaskToDelayedList+0x88>)
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	6811      	ldr	r1, [r2, #0]
 80029ac:	3104      	adds	r1, #4
 80029ae:	f7ff fbe8 	bl	8002182 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <prvAddCurrentTaskToDelayedList+0x8c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80029b8:	bf38      	it	cc
 80029ba:	601c      	strcc	r4, [r3, #0]
 80029bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000ba9c 	.word	0x2000ba9c
 80029c4:	2000ba94 	.word	0x2000ba94
 80029c8:	2000baec 	.word	0x2000baec
 80029cc:	2000bad8 	.word	0x2000bad8
 80029d0:	2000baa0 	.word	0x2000baa0
 80029d4:	2000b9cc 	.word	0x2000b9cc
 80029d8:	2000ba98 	.word	0x2000ba98

080029dc <eTaskGetState.part.4>:
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	e7fe      	b.n	80029ec <eTaskGetState.part.4+0x10>
	...

080029f0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80029f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f4:	0095      	lsls	r5, r2, #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80029f6:	4680      	mov	r8, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f8:	4628      	mov	r0, r5
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80029fa:	460f      	mov	r7, r1
 80029fc:	4699      	mov	r9, r3
 80029fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a00:	f7ff fc0c 	bl	800221c <pvPortMalloc>

			if( pxStack != NULL )
 8002a04:	4682      	mov	sl, r0
 8002a06:	2800      	cmp	r0, #0
 8002a08:	f000 80a8 	beq.w	8002b5c <xTaskCreate+0x16c>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a0c:	205c      	movs	r0, #92	; 0x5c
 8002a0e:	f7ff fc05 	bl	800221c <pvPortMalloc>

				if( pxNewTCB != NULL )
 8002a12:	4604      	mov	r4, r0
 8002a14:	b188      	cbz	r0, 8002a3a <xTaskCreate+0x4a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a16:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a1a:	462a      	mov	r2, r5
 8002a1c:	4650      	mov	r0, sl
 8002a1e:	21a5      	movs	r1, #165	; 0xa5
 8002a20:	f003 f9b8 	bl	8005d94 <memset>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a24:	f1a5 0a04 	sub.w	sl, r5, #4
 8002a28:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002a2a:	44aa      	add	sl, r5
 8002a2c:	1e7b      	subs	r3, r7, #1
 8002a2e:	f02a 0a07 	bic.w	sl, sl, #7
 8002a32:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8002a36:	370f      	adds	r7, #15
 8002a38:	e005      	b.n	8002a46 <xTaskCreate+0x56>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a3a:	4650      	mov	r0, sl
 8002a3c:	f7ff fc80 	bl	8002340 <vPortFree>
 8002a40:	e08c      	b.n	8002b5c <xTaskCreate+0x16c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a42:	429f      	cmp	r7, r3
 8002a44:	d006      	beq.n	8002a54 <xTaskCreate+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a46:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002a4a:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002a4e:	7819      	ldrb	r1, [r3, #0]
 8002a50:	2900      	cmp	r1, #0
 8002a52:	d1f6      	bne.n	8002a42 <xTaskCreate+0x52>
 8002a54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002a56:	2d06      	cmp	r5, #6
 8002a58:	bf28      	it	cs
 8002a5a:	2506      	movcs	r5, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a5c:	f04f 0b00 	mov.w	fp, #0
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a60:	1d27      	adds	r7, r4, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a62:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a64:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a66:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a68:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8002a6c:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a70:	f7ff fb78 	bl	8002164 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a74:	f1c5 0507 	rsb	r5, r5, #7
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a78:	f104 0018 	add.w	r0, r4, #24
 8002a7c:	f7ff fb72 	bl	8002164 <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a80:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a84:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a86:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a88:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a8a:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a8e:	464a      	mov	r2, r9
 8002a90:	4641      	mov	r1, r8
 8002a92:	4650      	mov	r0, sl
 8002a94:	f000 fc80 	bl	8003398 <pxPortInitialiseStack>
 8002a98:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002a9a:	b106      	cbz	r6, 8002a9e <xTaskCreate+0xae>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a9c:	6034      	str	r4, [r6, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a9e:	f000 fca9 	bl	80033f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 8002aa4:	4e30      	ldr	r6, [pc, #192]	; (8002b68 <xTaskCreate+0x178>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8002b94 <xTaskCreate+0x1a4>
 8002aac:	3201      	adds	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002ab0:	6835      	ldr	r5, [r6, #0]
 8002ab2:	bb15      	cbnz	r5, 8002afa <xTaskCreate+0x10a>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ab4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d127      	bne.n	8002b0c <xTaskCreate+0x11c>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002abc:	eb08 0005 	add.w	r0, r8, r5
 8002ac0:	3514      	adds	r5, #20
 8002ac2:	f7ff fb44 	bl	800214e <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ac6:	2d8c      	cmp	r5, #140	; 0x8c
 8002ac8:	d1f8      	bne.n	8002abc <xTaskCreate+0xcc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002aca:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8002b98 <xTaskCreate+0x1a8>
	vListInitialise( &xDelayedTaskList2 );
 8002ace:	4d27      	ldr	r5, [pc, #156]	; (8002b6c <xTaskCreate+0x17c>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ad0:	4648      	mov	r0, r9
 8002ad2:	f7ff fb3c 	bl	800214e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f7ff fb39 	bl	800214e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002adc:	4824      	ldr	r0, [pc, #144]	; (8002b70 <xTaskCreate+0x180>)
 8002ade:	f7ff fb36 	bl	800214e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ae2:	4824      	ldr	r0, [pc, #144]	; (8002b74 <xTaskCreate+0x184>)
 8002ae4:	f7ff fb33 	bl	800214e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ae8:	4823      	ldr	r0, [pc, #140]	; (8002b78 <xTaskCreate+0x188>)
 8002aea:	f7ff fb30 	bl	800214e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <xTaskCreate+0x18c>)
 8002af0:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002af4:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <xTaskCreate+0x190>)
 8002af6:	601d      	str	r5, [r3, #0]
 8002af8:	e008      	b.n	8002b0c <xTaskCreate+0x11c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <xTaskCreate+0x194>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b92b      	cbnz	r3, 8002b0c <xTaskCreate+0x11c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b00:	6833      	ldr	r3, [r6, #0]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b06:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 8002b08:	bf98      	it	ls
 8002b0a:	6034      	strls	r4, [r6, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <xTaskCreate+0x198>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b0e:	491f      	ldr	r1, [pc, #124]	; (8002b8c <xTaskCreate+0x19c>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		uxTaskNumber++;

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b18:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b1a:	2501      	movs	r5, #1
 8002b1c:	680b      	ldr	r3, [r1, #0]
 8002b1e:	fa05 f002 	lsl.w	r0, r5, r2
 8002b22:	4303      	orrs	r3, r0
 8002b24:	2014      	movs	r0, #20
 8002b26:	600b      	str	r3, [r1, #0]
 8002b28:	fb00 8002 	mla	r0, r0, r2, r8
 8002b2c:	4639      	mov	r1, r7
 8002b2e:	f7ff fb1c 	bl	800216a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b32:	f000 fc81 	bl	8003438 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <xTaskCreate+0x194>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	b163      	cbz	r3, 8002b56 <xTaskCreate+0x166>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b3c:	6833      	ldr	r3, [r6, #0]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d207      	bcs.n	8002b56 <xTaskCreate+0x166>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <xTaskCreate+0x1a0>)
 8002b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8002b56:	4628      	mov	r0, r5
 8002b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8002b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b64:	2000babc 	.word	0x2000babc
 8002b68:	2000ba94 	.word	0x2000ba94
 8002b6c:	2000bac0 	.word	0x2000bac0
 8002b70:	2000baa4 	.word	0x2000baa4
 8002b74:	2000ba7c 	.word	0x2000ba7c
 8002b78:	2000bad8 	.word	0x2000bad8
 8002b7c:	2000b9cc 	.word	0x2000b9cc
 8002b80:	2000baa0 	.word	0x2000baa0
 8002b84:	2000b9d0 	.word	0x2000b9d0
 8002b88:	2000bab8 	.word	0x2000bab8
 8002b8c:	2000baec 	.word	0x2000baec
 8002b90:	e000ed04 	.word	0xe000ed04
 8002b94:	2000b9f0 	.word	0x2000b9f0
 8002b98:	2000b9d8 	.word	0x2000b9d8

08002b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b9c:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <vTaskStartScheduler+0x60>)
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2400      	movs	r4, #0
 8002ba4:	9400      	str	r4, [sp, #0]
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	4915      	ldr	r1, [pc, #84]	; (8002c00 <vTaskStartScheduler+0x64>)
 8002bac:	4815      	ldr	r0, [pc, #84]	; (8002c04 <vTaskStartScheduler+0x68>)
 8002bae:	f7ff ff1f 	bl	80029f0 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002bb2:	2801      	cmp	r0, #1
 8002bb4:	d114      	bne.n	8002be0 <vTaskStartScheduler+0x44>
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <vTaskStartScheduler+0x6c>)
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <vTaskStartScheduler+0x70>)
 8002bd0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <vTaskStartScheduler+0x74>)
 8002bd4:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bd6:	b002      	add	sp, #8
 8002bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bdc:	f000 bc9c 	b.w	8003518 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002be0:	3001      	adds	r0, #1
 8002be2:	d108      	bne.n	8002bf6 <vTaskStartScheduler+0x5a>
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	e7fe      	b.n	8002bf4 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bf6:	b002      	add	sp, #8
 8002bf8:	bd10      	pop	{r4, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2000bad4 	.word	0x2000bad4
 8002c00:	08006bb6 	.word	0x08006bb6
 8002c04:	08002e8d 	.word	0x08002e8d
 8002c08:	2000ba98 	.word	0x2000ba98
 8002c0c:	2000b9d0 	.word	0x2000b9d0
 8002c10:	2000ba9c 	.word	0x2000ba9c

08002c14 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c14:	4a02      	ldr	r2, [pc, #8]	; (8002c20 <vTaskSuspendAll+0xc>)
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	2000b9d4 	.word	0x2000b9d4

08002c24 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <xTaskIncrementTick+0x104>)
 8002c26:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d13b      	bne.n	8002ca8 <xTaskIncrementTick+0x84>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002c30:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <xTaskIncrementTick+0x108>)
 8002c32:	681c      	ldr	r4, [r3, #0]
 8002c34:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c36:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002c38:	b9bc      	cbnz	r4, 8002c6a <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <xTaskIncrementTick+0x10c>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	b142      	cbz	r2, 8002c54 <xTaskIncrementTick+0x30>
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	e7fe      	b.n	8002c52 <xTaskIncrementTick+0x2e>
 8002c54:	4a37      	ldr	r2, [pc, #220]	; (8002d34 <xTaskIncrementTick+0x110>)
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	6810      	ldr	r0, [r2, #0]
 8002c5a:	6018      	str	r0, [r3, #0]
 8002c5c:	6011      	str	r1, [r2, #0]
 8002c5e:	4a36      	ldr	r2, [pc, #216]	; (8002d38 <xTaskIncrementTick+0x114>)
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	f7ff fe5f 	bl	8002928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c6a:	4d34      	ldr	r5, [pc, #208]	; (8002d3c <xTaskIncrementTick+0x118>)
 8002c6c:	9501      	str	r5, [sp, #4]
 8002c6e:	682b      	ldr	r3, [r5, #0]
 8002c70:	4e33      	ldr	r6, [pc, #204]	; (8002d40 <xTaskIncrementTick+0x11c>)
 8002c72:	4f34      	ldr	r7, [pc, #208]	; (8002d44 <xTaskIncrementTick+0x120>)
 8002c74:	429c      	cmp	r4, r3
 8002c76:	f04f 0b00 	mov.w	fp, #0
 8002c7a:	d30b      	bcc.n	8002c94 <xTaskIncrementTick+0x70>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c7c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002d30 <xTaskIncrementTick+0x10c>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c80:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8002d50 <xTaskIncrementTick+0x12c>
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c84:	f8d8 2000 	ldr.w	r2, [r8]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	b9a2      	cbnz	r2, 8002cb6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8c:	9b01      	ldr	r3, [sp, #4]
 8002c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c92:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c98:	2214      	movs	r2, #20
 8002c9a:	434a      	muls	r2, r1
 8002c9c:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8002c9e:	2a02      	cmp	r2, #2
 8002ca0:	bf28      	it	cs
 8002ca2:	f04f 0b01 	movcs.w	fp, #1
 8002ca6:	e034      	b.n	8002d12 <xTaskIncrementTick+0xee>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002ca8:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <xTaskIncrementTick+0x124>)
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cb0:	f04f 0b00 	mov.w	fp, #0
 8002cb4:	e02d      	b.n	8002d12 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cb6:	f8d8 2000 	ldr.w	r2, [r8]
 8002cba:	68d2      	ldr	r2, [r2, #12]
 8002cbc:	68d5      	ldr	r5, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cbe:	6869      	ldr	r1, [r5, #4]

					if( xConstTickCount < xItemValue )
 8002cc0:	428c      	cmp	r4, r1
 8002cc2:	d202      	bcs.n	8002cca <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cc4:	9b01      	ldr	r3, [sp, #4]
 8002cc6:	6019      	str	r1, [r3, #0]
						break;
 8002cc8:	e7e4      	b.n	8002c94 <xTaskIncrementTick+0x70>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cca:	f105 0a04 	add.w	sl, r5, #4
 8002cce:	4650      	mov	r0, sl
 8002cd0:	f7ff fa6f 	bl	80021b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cd4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002cd6:	b119      	cbz	r1, 8002ce0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cd8:	f105 0018 	add.w	r0, r5, #24
 8002cdc:	f7ff fa69 	bl	80021b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ce0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002ce2:	f8d9 1000 	ldr.w	r1, [r9]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	fa03 fe00 	lsl.w	lr, r3, r0
 8002cec:	ea4e 0101 	orr.w	r1, lr, r1
 8002cf0:	f04f 0e14 	mov.w	lr, #20
 8002cf4:	f8c9 1000 	str.w	r1, [r9]
 8002cf8:	fb0e 6000 	mla	r0, lr, r0, r6
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	f7ff fa34 	bl	800216a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d02:	6838      	ldr	r0, [r7, #0]
 8002d04:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002d06:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8002d08:	4291      	cmp	r1, r2
 8002d0a:	bf28      	it	cs
 8002d0c:	f04f 0b01 	movcs.w	fp, #1
 8002d10:	e7b8      	b.n	8002c84 <xTaskIncrementTick+0x60>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d12:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <xTaskIncrementTick+0x128>)
 8002d14:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	bf18      	it	ne
 8002d1a:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8002d1e:	4658      	mov	r0, fp
 8002d20:	b003      	add	sp, #12
 8002d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d26:	bf00      	nop
 8002d28:	2000b9d4 	.word	0x2000b9d4
 8002d2c:	2000ba9c 	.word	0x2000ba9c
 8002d30:	2000b9cc 	.word	0x2000b9cc
 8002d34:	2000baa0 	.word	0x2000baa0
 8002d38:	2000b9c8 	.word	0x2000b9c8
 8002d3c:	2000ba98 	.word	0x2000ba98
 8002d40:	2000b9f0 	.word	0x2000b9f0
 8002d44:	2000ba94 	.word	0x2000ba94
 8002d48:	2000b9ec 	.word	0x2000b9ec
 8002d4c:	2000baf0 	.word	0x2000baf0
 8002d50:	2000baec 	.word	0x2000baec

08002d54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d58:	4c31      	ldr	r4, [pc, #196]	; (8002e20 <xTaskResumeAll+0xcc>)
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	b943      	cbnz	r3, 8002d70 <xTaskResumeAll+0x1c>
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	e7fe      	b.n	8002d6e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d70:	f000 fb40 	bl	80033f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7a:	6824      	ldr	r4, [r4, #0]
 8002d7c:	b10c      	cbz	r4, 8002d82 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8002d7e:	2400      	movs	r4, #0
 8002d80:	e049      	b.n	8002e16 <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <xTaskResumeAll+0xd0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f9      	beq.n	8002d7e <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d8a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002e3c <xTaskResumeAll+0xe8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002d8e:	4f26      	ldr	r7, [pc, #152]	; (8002e28 <xTaskResumeAll+0xd4>)
 8002d90:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002e40 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d94:	f8d9 3000 	ldr.w	r3, [r9]
 8002d98:	b303      	cbz	r3, 8002ddc <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002d9a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002d9e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002da0:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002da2:	f104 0018 	add.w	r0, r4, #24
 8002da6:	f7ff fa04 	bl	80021b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002daa:	4630      	mov	r0, r6
 8002dac:	f7ff fa01 	bl	80021b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002db0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2501      	movs	r5, #1
 8002db6:	fa05 f102 	lsl.w	r1, r5, r2
 8002dba:	2014      	movs	r0, #20
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	fb00 8002 	mla	r0, r0, r2, r8
 8002dc2:	4631      	mov	r1, r6
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	f7ff f9d0 	bl	800216a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <xTaskResumeAll+0xd8>)
 8002dcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8002dd4:	bf24      	itt	cs
 8002dd6:	4b16      	ldrcs	r3, [pc, #88]	; (8002e30 <xTaskResumeAll+0xdc>)
 8002dd8:	601d      	strcs	r5, [r3, #0]
 8002dda:	e7db      	b.n	8002d94 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ddc:	b10c      	cbz	r4, 8002de2 <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dde:	f7ff fda3 	bl	8002928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <xTaskResumeAll+0xe0>)
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002de8:	b144      	cbz	r4, 8002dfc <xTaskResumeAll+0xa8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 8002dea:	4e11      	ldr	r6, [pc, #68]	; (8002e30 <xTaskResumeAll+0xdc>)
 8002dec:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dee:	f7ff ff19 	bl	8002c24 <xTaskIncrementTick>
 8002df2:	b100      	cbz	r0, 8002df6 <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
 8002df4:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002df6:	3c01      	subs	r4, #1
 8002df8:	d1f9      	bne.n	8002dee <xTaskResumeAll+0x9a>

						uxPendedTicks = 0;
 8002dfa:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <xTaskResumeAll+0xdc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0bc      	beq.n	8002d7e <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <xTaskResumeAll+0xe4>)
 8002e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e14:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e16:	f000 fb0f 	bl	8003438 <vPortExitCritical>

	return xAlreadyYielded;
}
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e20:	2000b9d4 	.word	0x2000b9d4
 8002e24:	2000babc 	.word	0x2000babc
 8002e28:	2000baec 	.word	0x2000baec
 8002e2c:	2000ba94 	.word	0x2000ba94
 8002e30:	2000baf0 	.word	0x2000baf0
 8002e34:	2000b9ec 	.word	0x2000b9ec
 8002e38:	e000ed04 	.word	0xe000ed04
 8002e3c:	2000baa4 	.word	0x2000baa4
 8002e40:	2000b9f0 	.word	0x2000b9f0

08002e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e44:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e46:	b940      	cbnz	r0, 8002e5a <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8002e48:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <vTaskDelay+0x40>)
 8002e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	bd08      	pop	{r3, pc}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <vTaskDelay+0x44>)
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	b141      	cbz	r1, 8002e72 <vTaskDelay+0x2e>
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	e7fe      	b.n	8002e70 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002e72:	f7ff fecf 	bl	8002c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e76:	f7ff fd69 	bl	800294c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e7a:	f7ff ff6b 	bl	8002d54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d0e2      	beq.n	8002e48 <vTaskDelay+0x4>
 8002e82:	bd08      	pop	{r3, pc}
 8002e84:	e000ed04 	.word	0xe000ed04
 8002e88:	2000b9d4 	.word	0x2000b9d4

08002e8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e8c:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e8e:	4d18      	ldr	r5, [pc, #96]	; (8002ef0 <prvIdleTask+0x64>)
 8002e90:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002e92:	4f18      	ldr	r7, [pc, #96]	; (8002ef4 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	b1f3      	cbz	r3, 8002ed6 <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8002e98:	f7ff febc 	bl	8002c14 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002e9c:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8002e9e:	f7ff ff59 	bl	8002d54 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002ea2:	2c00      	cmp	r4, #0
 8002ea4:	d0f6      	beq.n	8002e94 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002ea6:	f000 faa5 	bl	80033f4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <prvIdleTask+0x68>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eb0:	1d20      	adds	r0, r4, #4
 8002eb2:	f7ff f97e 	bl	80021b2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <prvIdleTask+0x6c>)
 8002eb8:	6813      	ldr	r3, [r2, #0]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002ebe:	6833      	ldr	r3, [r6, #0]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8002ec4:	f000 fab8 	bl	8003438 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002ec8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002eca:	f7ff fa39 	bl	8002340 <vPortFree>
			vPortFree( pxTCB );
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f7ff fa36 	bl	8002340 <vPortFree>
 8002ed4:	e7de      	b.n	8002e94 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <prvIdleTask+0x70>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d9d9      	bls.n	8002e92 <prvIdleTask+0x6>
			{
				taskYIELD();
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <prvIdleTask+0x74>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	e7d0      	b.n	8002e92 <prvIdleTask+0x6>
 8002ef0:	2000ba90 	.word	0x2000ba90
 8002ef4:	2000ba7c 	.word	0x2000ba7c
 8002ef8:	2000babc 	.word	0x2000babc
 8002efc:	2000b9f0 	.word	0x2000b9f0
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f04:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <vTaskSwitchContext+0x90>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <vTaskSwitchContext+0x94>)
 8002f0c:	b112      	cbz	r2, 8002f14 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	bd38      	pop	{r3, r4, r5, pc}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8002f14:	4c21      	ldr	r4, [pc, #132]	; (8002f9c <vTaskSwitchContext+0x98>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8002f16:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002f22:	d10b      	bne.n	8002f3c <vTaskSwitchContext+0x38>
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002f2a:	d107      	bne.n	8002f3c <vTaskSwitchContext+0x38>
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002f32:	d103      	bne.n	8002f3c <vTaskSwitchContext+0x38>
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8002f3a:	d004      	beq.n	8002f46 <vTaskSwitchContext+0x42>
 8002f3c:	6820      	ldr	r0, [r4, #0]
 8002f3e:	6821      	ldr	r1, [r4, #0]
 8002f40:	3134      	adds	r1, #52	; 0x34
 8002f42:	f000 fc34 	bl	80037ae <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <vTaskSwitchContext+0x9c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f1c3 031f 	rsb	r3, r3, #31
 8002f54:	2214      	movs	r2, #20
 8002f56:	4913      	ldr	r1, [pc, #76]	; (8002fa4 <vTaskSwitchContext+0xa0>)
 8002f58:	435a      	muls	r2, r3
 8002f5a:	1888      	adds	r0, r1, r2
 8002f5c:	588d      	ldr	r5, [r1, r2]
 8002f5e:	b945      	cbnz	r5, 8002f72 <vTaskSwitchContext+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	e7fe      	b.n	8002f70 <vTaskSwitchContext+0x6c>
 8002f72:	6845      	ldr	r5, [r0, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	686d      	ldr	r5, [r5, #4]
 8002f78:	6045      	str	r5, [r0, #4]
 8002f7a:	440a      	add	r2, r1
 8002f7c:	4295      	cmp	r5, r2
 8002f7e:	bf04      	itt	eq
 8002f80:	686a      	ldreq	r2, [r5, #4]
 8002f82:	6042      	streq	r2, [r0, #4]
 8002f84:	2214      	movs	r2, #20
 8002f86:	fb02 1303 	mla	r3, r2, r3, r1
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	6023      	str	r3, [r4, #0]
 8002f90:	bd38      	pop	{r3, r4, r5, pc}
 8002f92:	bf00      	nop
 8002f94:	2000b9d4 	.word	0x2000b9d4
 8002f98:	2000baf0 	.word	0x2000baf0
 8002f9c:	2000ba94 	.word	0x2000ba94
 8002fa0:	2000baec 	.word	0x2000baec
 8002fa4:	2000b9f0 	.word	0x2000b9f0

08002fa8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4604      	mov	r4, r0
 8002fac:	4e2a      	ldr	r6, [pc, #168]	; (8003058 <vTaskSuspend+0xb0>)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002fae:	f000 fa21 	bl	80033f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002fb2:	b904      	cbnz	r4, 8002fb6 <vTaskSuspend+0xe>
 8002fb4:	6834      	ldr	r4, [r6, #0]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fb6:	1d25      	adds	r5, r4, #4
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f7ff f8fa 	bl	80021b2 <uxListRemove>
 8002fbe:	b960      	cbnz	r0, 8002fda <vTaskSuspend+0x32>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002fc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <vTaskSuspend+0xb4>)
 8002fc4:	2214      	movs	r2, #20
 8002fc6:	4342      	muls	r2, r0
 8002fc8:	589b      	ldr	r3, [r3, r2]
 8002fca:	b933      	cbnz	r3, 8002fda <vTaskSuspend+0x32>
 8002fcc:	4924      	ldr	r1, [pc, #144]	; (8003060 <vTaskSuspend+0xb8>)
 8002fce:	2301      	movs	r3, #1
 8002fd0:	680a      	ldr	r2, [r1, #0]
 8002fd2:	4083      	lsls	r3, r0
 8002fd4:	ea22 0303 	bic.w	r3, r2, r3
 8002fd8:	600b      	str	r3, [r1, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fdc:	b11b      	cbz	r3, 8002fe6 <vTaskSuspend+0x3e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fde:	f104 0018 	add.w	r0, r4, #24
 8002fe2:	f7ff f8e6 	bl	80021b2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	481e      	ldr	r0, [pc, #120]	; (8003064 <vTaskSuspend+0xbc>)
 8002fea:	f7ff f8be 	bl	800216a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8002fee:	f000 fa23 	bl	8003438 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <vTaskSuspend+0xc0>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	b12a      	cbz	r2, 8003006 <vTaskSuspend+0x5e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002ffa:	f000 f9fb 	bl	80033f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002ffe:	f7ff fc93 	bl	8002928 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003002:	f000 fa19 	bl	8003438 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003006:	6833      	ldr	r3, [r6, #0]
 8003008:	429c      	cmp	r4, r3
 800300a:	d123      	bne.n	8003054 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	b1a3      	cbz	r3, 800303a <vTaskSuspend+0x92>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <vTaskSuspend+0xc4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b143      	cbz	r3, 8003028 <vTaskSuspend+0x80>
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	e7fe      	b.n	8003026 <vTaskSuspend+0x7e>
				portYIELD_WITHIN_API();
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <vTaskSuspend+0xc8>)
 800302a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800303a:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <vTaskSuspend+0xcc>)
 800303c:	4909      	ldr	r1, [pc, #36]	; (8003064 <vTaskSuspend+0xbc>)
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	6809      	ldr	r1, [r1, #0]
 8003042:	4291      	cmp	r1, r2
 8003044:	d102      	bne.n	800304c <vTaskSuspend+0xa4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8003046:	4a04      	ldr	r2, [pc, #16]	; (8003058 <vTaskSuspend+0xb0>)
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	bd70      	pop	{r4, r5, r6, pc}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800304c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 8003050:	f7ff bf58 	b.w	8002f04 <vTaskSwitchContext>
 8003054:	bd70      	pop	{r4, r5, r6, pc}
 8003056:	bf00      	nop
 8003058:	2000ba94 	.word	0x2000ba94
 800305c:	2000b9f0 	.word	0x2000b9f0
 8003060:	2000baec 	.word	0x2000baec
 8003064:	2000bad8 	.word	0x2000bad8
 8003068:	2000b9d0 	.word	0x2000b9d0
 800306c:	2000b9d4 	.word	0x2000b9d4
 8003070:	e000ed04 	.word	0xe000ed04
 8003074:	2000babc 	.word	0x2000babc

08003078 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003078:	b510      	push	{r4, lr}
 800307a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800307c:	b940      	cbnz	r0, 8003090 <vTaskPlaceOnEventList+0x18>
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	e7fe      	b.n	800308e <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <vTaskPlaceOnEventList+0x30>)
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	3118      	adds	r1, #24
 8003096:	f7ff f874 	bl	8002182 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800309a:	4620      	mov	r0, r4
 800309c:	2101      	movs	r1, #1
}
 800309e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030a2:	f7ff bc53 	b.w	800294c <prvAddCurrentTaskToDelayedList>
 80030a6:	bf00      	nop
 80030a8:	2000ba94 	.word	0x2000ba94

080030ac <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80030ac:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030ae:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80030b0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80030b2:	b944      	cbnz	r4, 80030c6 <xTaskRemoveFromEventList+0x1a>
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	e7fe      	b.n	80030c4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030c6:	f104 0518 	add.w	r5, r4, #24
 80030ca:	4628      	mov	r0, r5
 80030cc:	f7ff f871 	bl	80021b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <xTaskRemoveFromEventList+0x6c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	b983      	cbnz	r3, 80030f8 <xTaskRemoveFromEventList+0x4c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030d6:	1d26      	adds	r6, r4, #4
 80030d8:	4630      	mov	r0, r6
 80030da:	f7ff f86a 	bl	80021b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030de:	490f      	ldr	r1, [pc, #60]	; (800311c <xTaskRemoveFromEventList+0x70>)
 80030e0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80030e2:	680a      	ldr	r2, [r1, #0]
 80030e4:	2301      	movs	r3, #1
 80030e6:	40ab      	lsls	r3, r5
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <xTaskRemoveFromEventList+0x74>)
 80030ee:	2014      	movs	r0, #20
 80030f0:	4631      	mov	r1, r6
 80030f2:	fb00 3005 	mla	r0, r0, r5, r3
 80030f6:	e001      	b.n	80030fc <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030f8:	480a      	ldr	r0, [pc, #40]	; (8003124 <xTaskRemoveFromEventList+0x78>)
 80030fa:	4629      	mov	r1, r5
 80030fc:	f7ff f835 	bl	800216a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <xTaskRemoveFromEventList+0x7c>)
 8003102:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800310a:	bf83      	ittte	hi
 800310c:	4b07      	ldrhi	r3, [pc, #28]	; (800312c <xTaskRemoveFromEventList+0x80>)
 800310e:	2001      	movhi	r0, #1
 8003110:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8003112:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	bf00      	nop
 8003118:	2000b9d4 	.word	0x2000b9d4
 800311c:	2000baec 	.word	0x2000baec
 8003120:	2000b9f0 	.word	0x2000b9f0
 8003124:	2000baa4 	.word	0x2000baa4
 8003128:	2000ba94 	.word	0x2000ba94
 800312c:	2000baf0 	.word	0x2000baf0

08003130 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003130:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8003132:	b908      	cbnz	r0, 8003138 <vTaskSetTimeOutState+0x8>
 8003134:	f7ff fc52 	bl	80029dc <eTaskGetState.part.4>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <vTaskSetTimeOutState+0x18>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800313e:	4b03      	ldr	r3, [pc, #12]	; (800314c <vTaskSetTimeOutState+0x1c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6043      	str	r3, [r0, #4]
 8003144:	bd08      	pop	{r3, pc}
 8003146:	bf00      	nop
 8003148:	2000b9c8 	.word	0x2000b9c8
 800314c:	2000ba9c 	.word	0x2000ba9c

08003150 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003154:	4604      	mov	r4, r0
 8003156:	b940      	cbnz	r0, 800316a <xTaskCheckForTimeOut+0x1a>
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	e7fe      	b.n	8003168 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800316a:	b941      	cbnz	r1, 800317e <xTaskCheckForTimeOut+0x2e>
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	e7fe      	b.n	800317c <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 800317e:	f000 f939 	bl	80033f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <xTaskCheckForTimeOut+0x6c>)
 8003184:	6819      	ldr	r1, [r3, #0]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003186:	682b      	ldr	r3, [r5, #0]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	d010      	beq.n	80031ae <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800318c:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <xTaskCheckForTimeOut+0x70>)
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4290      	cmp	r0, r2
 8003194:	6862      	ldr	r2, [r4, #4]
 8003196:	d001      	beq.n	800319c <xTaskCheckForTimeOut+0x4c>
 8003198:	4291      	cmp	r1, r2
 800319a:	d20a      	bcs.n	80031b2 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800319c:	1a88      	subs	r0, r1, r2
 800319e:	4283      	cmp	r3, r0
 80031a0:	d907      	bls.n	80031b2 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80031a2:	1a52      	subs	r2, r2, r1
 80031a4:	4413      	add	r3, r2
 80031a6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff ffc1 	bl	8003130 <vTaskSetTimeOutState>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80031ae:	2400      	movs	r4, #0
 80031b0:	e000      	b.n	80031b4 <xTaskCheckForTimeOut+0x64>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80031b2:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80031b4:	f000 f940 	bl	8003438 <vPortExitCritical>

	return xReturn;
}
 80031b8:	4620      	mov	r0, r4
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
 80031bc:	2000ba9c 	.word	0x2000ba9c
 80031c0:	2000b9c8 	.word	0x2000b9c8

080031c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 80031c4:	4b01      	ldr	r3, [pc, #4]	; (80031cc <vTaskMissedYield+0x8>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	4770      	bx	lr
 80031cc:	2000baf0 	.word	0x2000baf0

080031d0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <xTaskGetSchedulerState+0x18>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	b133      	cbz	r3, 80031e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <xTaskGetSchedulerState+0x1c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80031dc:	bf0c      	ite	eq
 80031de:	2002      	moveq	r0, #2
 80031e0:	2000      	movne	r0, #0
 80031e2:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031e4:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 80031e6:	4770      	bx	lr
 80031e8:	2000b9d0 	.word	0x2000b9d0
 80031ec:	2000b9d4 	.word	0x2000b9d4

080031f0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80031f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80031f4:	4604      	mov	r4, r0
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d038      	beq.n	800326c <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80031fa:	4d1d      	ldr	r5, [pc, #116]	; (8003270 <vTaskPriorityInherit+0x80>)
 80031fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031fe:	682a      	ldr	r2, [r5, #0]
 8003200:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003202:	4293      	cmp	r3, r2
 8003204:	d232      	bcs.n	800326c <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003206:	6982      	ldr	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003208:	4e1a      	ldr	r6, [pc, #104]	; (8003274 <vTaskPriorityInherit+0x84>)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800320a:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320c:	bfa1      	itttt	ge
 800320e:	682a      	ldrge	r2, [r5, #0]
 8003210:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003212:	f1c2 0207 	rsbge	r2, r2, #7
 8003216:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003218:	2714      	movs	r7, #20
 800321a:	6942      	ldr	r2, [r0, #20]
 800321c:	fb07 6303 	mla	r3, r7, r3, r6
 8003220:	429a      	cmp	r2, r3
 8003222:	d120      	bne.n	8003266 <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003224:	f100 0804 	add.w	r8, r0, #4
 8003228:	4640      	mov	r0, r8
 800322a:	f7fe ffc2 	bl	80021b2 <uxListRemove>
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <vTaskPriorityInherit+0x88>)
 8003230:	b948      	cbnz	r0, 8003246 <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003232:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003234:	4347      	muls	r7, r0
 8003236:	59f2      	ldr	r2, [r6, r7]
 8003238:	b92a      	cbnz	r2, 8003246 <vTaskPriorityInherit+0x56>
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	4082      	lsls	r2, r0
 8003240:	ea21 0202 	bic.w	r2, r1, r2
 8003244:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003246:	682a      	ldr	r2, [r5, #0]
 8003248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800324a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800324c:	2001      	movs	r0, #1
 800324e:	681c      	ldr	r4, [r3, #0]
 8003250:	4090      	lsls	r0, r2
 8003252:	4320      	orrs	r0, r4
 8003254:	6018      	str	r0, [r3, #0]
 8003256:	2014      	movs	r0, #20
 8003258:	4641      	mov	r1, r8
 800325a:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800325e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8003262:	f7fe bf82 	b.w	800216a <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003270:	2000ba94 	.word	0x2000ba94
 8003274:	2000b9f0 	.word	0x2000b9f0
 8003278:	2000baec 	.word	0x2000baec

0800327c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 800327e:	4604      	mov	r4, r0
 8003280:	b908      	cbnz	r0, 8003286 <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8003282:	2000      	movs	r0, #0
 8003284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <xTaskPriorityDisinherit+0x94>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4298      	cmp	r0, r3
 800328c:	d008      	beq.n	80032a0 <xTaskPriorityDisinherit+0x24>
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	e7fe      	b.n	800329e <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 80032a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80032a2:	b943      	cbnz	r3, 80032b6 <xTaskPriorityDisinherit+0x3a>
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	e7fe      	b.n	80032b4 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80032b8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80032ba:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032bc:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80032be:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032c0:	d0df      	beq.n	8003282 <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1dd      	bne.n	8003282 <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c6:	1d05      	adds	r5, r0, #4
 80032c8:	4628      	mov	r0, r5
 80032ca:	f7fe ff72 	bl	80021b2 <uxListRemove>
 80032ce:	4e11      	ldr	r6, [pc, #68]	; (8003314 <xTaskPriorityDisinherit+0x98>)
 80032d0:	4a11      	ldr	r2, [pc, #68]	; (8003318 <xTaskPriorityDisinherit+0x9c>)
 80032d2:	b950      	cbnz	r0, 80032ea <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80032d6:	2114      	movs	r1, #20
 80032d8:	4379      	muls	r1, r7
 80032da:	5873      	ldr	r3, [r6, r1]
 80032dc:	b92b      	cbnz	r3, 80032ea <xTaskPriorityDisinherit+0x6e>
 80032de:	6810      	ldr	r0, [r2, #0]
 80032e0:	2301      	movs	r3, #1
 80032e2:	40bb      	lsls	r3, r7
 80032e4:	ea20 0303 	bic.w	r3, r0, r3
 80032e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 80032ec:	6810      	ldr	r0, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032ee:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f0:	f1c3 0107 	rsb	r1, r3, #7
 80032f4:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80032f6:	2401      	movs	r4, #1
 80032f8:	fa04 f103 	lsl.w	r1, r4, r3
 80032fc:	4308      	orrs	r0, r1
 80032fe:	6010      	str	r0, [r2, #0]
 8003300:	2014      	movs	r0, #20
 8003302:	fb00 6003 	mla	r0, r0, r3, r6
 8003306:	4629      	mov	r1, r5
 8003308:	f7fe ff2f 	bl	800216a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800330c:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800330e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003310:	2000ba94 	.word	0x2000ba94
 8003314:	2000b9f0 	.word	0x2000b9f0
 8003318:	2000baec 	.word	0x2000baec

0800331c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <pvTaskIncrementMutexHeldCount+0x14>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	b11a      	cbz	r2, 800332a <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003326:	3201      	adds	r2, #1
 8003328:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800332a:	6818      	ldr	r0, [r3, #0]
	}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	2000ba94 	.word	0x2000ba94

08003334 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <prvTaskExitError+0x2c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	d008      	beq.n	800334e <prvTaskExitError+0x1a>
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	e7fe      	b.n	800334c <prvTaskExitError+0x18>
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	e7fe      	b.n	800335e <prvTaskExitError+0x2a>
 8003360:	20000000 	.word	0x20000000

08003364 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003364:	4806      	ldr	r0, [pc, #24]	; (8003380 <prvPortStartFirstTask+0x1c>)
 8003366:	6800      	ldr	r0, [r0, #0]
 8003368:	6800      	ldr	r0, [r0, #0]
 800336a:	f380 8808 	msr	MSP, r0
 800336e:	b662      	cpsie	i
 8003370:	b661      	cpsie	f
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	df00      	svc	0
 800337c:	bf00      	nop
 800337e:	0000      	.short	0x0000
 8003380:	e000ed08 	.word	0xe000ed08

08003384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003394 <vPortEnableVFP+0x10>
 8003388:	6801      	ldr	r1, [r0, #0]
 800338a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800338e:	6001      	str	r1, [r0, #0]
 8003390:	4770      	bx	lr
 8003392:	0000      	.short	0x0000
 8003394:	e000ed88 	.word	0xe000ed88

08003398 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800339c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <pxPortInitialiseStack+0x28>)
 80033a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033a6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80033aa:	f06f 0302 	mvn.w	r3, #2
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033ae:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033b2:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80033b6:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80033ba:	3844      	subs	r0, #68	; 0x44
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	08003335 	.word	0x08003335
	...

080033d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <pxCurrentTCBConst2>)
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	6808      	ldr	r0, [r1, #0]
 80033d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033da:	f380 8809 	msr	PSP, r0
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f380 8811 	msr	BASEPRI, r0
 80033ea:	4770      	bx	lr
 80033ec:	f3af 8000 	nop.w

080033f0 <pxCurrentTCBConst2>:
 80033f0:	2000ba94 	.word	0x2000ba94

080033f4 <vPortEnterCritical>:
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003404:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <vPortEnterCritical+0x3c>)
 8003406:	6813      	ldr	r3, [r2, #0]
 8003408:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800340a:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800340c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800340e:	d10d      	bne.n	800342c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <vPortEnterCritical+0x40>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003418:	d008      	beq.n	800342c <vPortEnterCritical+0x38>
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	e7fe      	b.n	800342a <vPortEnterCritical+0x36>
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003438:	4a08      	ldr	r2, [pc, #32]	; (800345c <vPortExitCritical+0x24>)
 800343a:	6813      	ldr	r3, [r2, #0]
 800343c:	b943      	cbnz	r3, 8003450 <vPortExitCritical+0x18>
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	e7fe      	b.n	800344e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003450:	3b01      	subs	r3, #1
 8003452:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003454:	b90b      	cbnz	r3, 800345a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	4770      	bx	lr
 800345c:	20000000 	.word	0x20000000

08003460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003460:	f3ef 8009 	mrs	r0, PSP
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <pxCurrentTCBConst>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	f01e 0f10 	tst.w	lr, #16
 8003470:	bf08      	it	eq
 8003472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347a:	6010      	str	r0, [r2, #0]
 800347c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003484:	f380 8811 	msr	BASEPRI, r0
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f7ff fd38 	bl	8002f04 <vTaskSwitchContext>
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f380 8811 	msr	BASEPRI, r0
 800349c:	bc08      	pop	{r3}
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	6808      	ldr	r0, [r1, #0]
 80034a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a6:	f01e 0f10 	tst.w	lr, #16
 80034aa:	bf08      	it	eq
 80034ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034b0:	f380 8809 	msr	PSP, r0
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	f3af 8000 	nop.w

080034c0 <pxCurrentTCBConst>:
 80034c0:	2000ba94 	.word	0x2000ba94

080034c4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034c4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80034d6:	f7ff fba5 	bl	8002c24 <xTaskIncrementTick>
 80034da:	b118      	cbz	r0, 80034e4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <xPortSysTickHandler+0x28>)
 80034de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034e4:	2300      	movs	r3, #0
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	bd08      	pop	{r3, pc}
 80034ec:	e000ed04 	.word	0xe000ed04

080034f0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <vPortSetupTimerInterrupt+0x1c>)
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <vPortSetupTimerInterrupt+0x20>)
 80034fe:	3b01      	subs	r3, #1
 8003500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <vPortSetupTimerInterrupt+0x24>)
 8003504:	2207      	movs	r2, #7
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20007d28 	.word	0x20007d28
 8003510:	e000e014 	.word	0xe000e014
 8003514:	e000e010 	.word	0xe000e010

08003518 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003518:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <xPortStartScheduler+0xc8>)
 800351a:	4a32      	ldr	r2, [pc, #200]	; (80035e4 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800351c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	4291      	cmp	r1, r2
 8003522:	d108      	bne.n	8003536 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	e7fe      	b.n	8003534 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <xPortStartScheduler+0xd0>)
 800353a:	429a      	cmp	r2, r3
 800353c:	d108      	bne.n	8003550 <xPortStartScheduler+0x38>
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	e7fe      	b.n	800354e <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003550:	4b26      	ldr	r3, [pc, #152]	; (80035ec <xPortStartScheduler+0xd4>)
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800355c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800355e:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003566:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800356a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800356e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <xPortStartScheduler+0xdc>)
 8003572:	2207      	movs	r2, #7
 8003574:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003576:	2100      	movs	r1, #0
 8003578:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800357c:	0600      	lsls	r0, r0, #24
 800357e:	f102 34ff 	add.w	r4, r2, #4294967295
 8003582:	d508      	bpl.n	8003596 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003584:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003588:	0052      	lsls	r2, r2, #1
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	f88d 2003 	strb.w	r2, [sp, #3]
 8003590:	2101      	movs	r1, #1
 8003592:	4622      	mov	r2, r4
 8003594:	e7f0      	b.n	8003578 <xPortStartScheduler+0x60>
 8003596:	b101      	cbz	r1, 800359a <xPortStartScheduler+0x82>
 8003598:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	0212      	lsls	r2, r2, #8
 800359e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80035a2:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	4a11      	ldr	r2, [pc, #68]	; (80035ec <xPortStartScheduler+0xd4>)
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <xPortStartScheduler+0xe0>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80035b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80035bc:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035be:	f7ff ff97 	bl	80034f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <xPortStartScheduler+0xe4>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035c8:	f7ff fedc 	bl	8003384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035cc:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <xPortStartScheduler+0xe8>)
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035d4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035d6:	f7ff fec5 	bl	8003364 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80035da:	f7ff feab 	bl	8003334 <prvTaskExitError>
 80035de:	bf00      	nop
 80035e0:	e000ed00 	.word	0xe000ed00
 80035e4:	410fc271 	.word	0x410fc271
 80035e8:	410fc270 	.word	0x410fc270
 80035ec:	e000e400 	.word	0xe000e400
 80035f0:	2000baf4 	.word	0x2000baf4
 80035f4:	2000baf8 	.word	0x2000baf8
 80035f8:	e000ed20 	.word	0xe000ed20
 80035fc:	20000000 	.word	0x20000000
 8003600:	e000ef34 	.word	0xe000ef34

08003604 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003604:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d90e      	bls.n	800362a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800360c:	4a10      	ldr	r2, [pc, #64]	; (8003650 <vPortValidateInterruptPriority+0x4c>)
 800360e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003610:	4a10      	ldr	r2, [pc, #64]	; (8003654 <vPortValidateInterruptPriority+0x50>)
 8003612:	7812      	ldrb	r2, [r2, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d908      	bls.n	800362a <vPortValidateInterruptPriority+0x26>
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	e7fe      	b.n	8003628 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <vPortValidateInterruptPriority+0x54>)
 800362c:	4a0b      	ldr	r2, [pc, #44]	; (800365c <vPortValidateInterruptPriority+0x58>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003636:	4293      	cmp	r3, r2
 8003638:	d908      	bls.n	800364c <vPortValidateInterruptPriority+0x48>
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	e7fe      	b.n	800364a <vPortValidateInterruptPriority+0x46>
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000e3f0 	.word	0xe000e3f0
 8003654:	2000baf4 	.word	0x2000baf4
 8003658:	e000ed0c 	.word	0xe000ed0c
 800365c:	2000baf8 	.word	0x2000baf8

08003660 <initCRC>:
void initCRC(uint8_t type) {
  switch(type){
  case 0:
      CRCDATA_INITIALVAL = 0xFFFF;
  default:
      CRCDATA_INITIALVAL = 0x0000;
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <initCRC+0x40>)
static uint32_t crcTableXMODEM[256];
static uint32_t currentCRC;

static void buildTable(uint8_t type);

void initCRC(uint8_t type) {
 8003662:	b530      	push	{r4, r5, lr}
  switch(type){
  case 0:
      CRCDATA_INITIALVAL = 0xFFFF;
  default:
      CRCDATA_INITIALVAL = 0x0000;
 8003664:	2200      	movs	r2, #0
    switch(type){
    case 0:
        crcTableFALSE[dividend] = remainder;
        break;
    default:
        crcTableXMODEM[dividend] = remainder;
 8003666:	4c0f      	ldr	r4, [pc, #60]	; (80036a4 <initCRC+0x44>)
    }

    //Store the result into table.
    switch(type){
    case 0:
        crcTableFALSE[dividend] = remainder;
 8003668:	4d0f      	ldr	r5, [pc, #60]	; (80036a8 <initCRC+0x48>)
void initCRC(uint8_t type) {
  switch(type){
  case 0:
      CRCDATA_INITIALVAL = 0xFFFF;
  default:
      CRCDATA_INITIALVAL = 0x0000;
 800366a:	601a      	str	r2, [r3, #0]
  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;
 800366c:	0213      	lsls	r3, r2, #8
 800366e:	2108      	movs	r1, #8

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
      //Try to divide the current data bit.
      if ((remainder & topbit) > 0U) {
 8003670:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003674:	ea4f 0343 	mov.w	r3, r3, lsl #1
        remainder = ((remainder << 1U) ^ CRCDATA_POLYNOMIAL) & CRCDATA_MASK;
 8003678:	bf1c      	itt	ne
 800367a:	f483 5381 	eorne.w	r3, r3, #4128	; 0x1020
 800367e:	f083 0301 	eorne.w	r3, r3, #1
  for (dividend = 0U; dividend < 256U; dividend++) {
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 8003682:	3901      	subs	r1, #1
      //Try to divide the current data bit.
      if ((remainder & topbit) > 0U) {
        remainder = ((remainder << 1U) ^ CRCDATA_POLYNOMIAL) & CRCDATA_MASK;
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
 8003684:	b29b      	uxth	r3, r3
  for (dividend = 0U; dividend < 256U; dividend++) {
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 8003686:	d1f3      	bne.n	8003670 <initCRC+0x10>
        remainder = (remainder << 1U) & CRCDATA_MASK;
      }
    }

    //Store the result into table.
    switch(type){
 8003688:	b910      	cbnz	r0, 8003690 <initCRC+0x30>
    case 0:
        crcTableFALSE[dividend] = remainder;
 800368a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800368e:	e001      	b.n	8003694 <initCRC+0x34>
        break;
    default:
        crcTableXMODEM[dividend] = remainder;
 8003690:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 8003694:	3201      	adds	r2, #1
 8003696:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800369a:	d1e7      	bne.n	800366c <initCRC+0xc>
      CRCDATA_INITIALVAL = 0x0000;
  }

  buildTable(type);
  currentCRC = CRCDATA_INITIALVAL;
}
 800369c:	bd30      	pop	{r4, r5, pc}
 800369e:	bf00      	nop
 80036a0:	2000c318 	.word	0x2000c318
 80036a4:	2000befc 	.word	0x2000befc
 80036a8:	2000bafc 	.word	0x2000bafc

080036ac <crcCalc>:

uint32_t crcCalc(const uint8_t* data, uint16_t startIndex, uint16_t length, uint8_t type) {
 80036ac:	b530      	push	{r4, r5, lr}
 80036ae:	4c0f      	ldr	r4, [pc, #60]	; (80036ec <crcCalc+0x40>)
 80036b0:	4d0f      	ldr	r5, [pc, #60]	; (80036f0 <crcCalc+0x44>)
    switch(type){
 80036b2:	b923      	cbnz	r3, 80036be <crcCalc+0x12>
    case 0:
        CRCDATA_INITIALVAL = 0xFFFF;
 80036b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b8:	6023      	str	r3, [r4, #0]
        crcTable = crcTableFALSE;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <crcCalc+0x48>)
 80036bc:	e002      	b.n	80036c4 <crcCalc+0x18>
        break;
    default:
        CRCDATA_INITIALVAL = 0x0000;
 80036be:	2300      	movs	r3, #0
 80036c0:	6023      	str	r3, [r4, #0]
        crcTable = crcTableXMODEM;
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <crcCalc+0x4c>)
 80036c4:	602b      	str	r3, [r5, #0]
    }

  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;
 80036c6:	6824      	ldr	r4, [r4, #0]

  for (index = startIndex; index < length + startIndex; index++) {
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
 80036c8:	682d      	ldr	r5, [r5, #0]

  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;

  for (index = startIndex; index < length + startIndex; index++) {
 80036ca:	440a      	add	r2, r1
 80036cc:	4291      	cmp	r1, r2
 80036ce:	da0a      	bge.n	80036e6 <crcCalc+0x3a>
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
 80036d0:	5c43      	ldrb	r3, [r0, r1]
 80036d2:	ea83 2314 	eor.w	r3, r3, r4, lsr #8
 80036d6:	b2db      	uxtb	r3, r3

  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;

  for (index = startIndex; index < length + startIndex; index++) {
 80036d8:	3101      	adds	r1, #1
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
 80036da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]

  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;

  for (index = startIndex; index < length + startIndex; index++) {
 80036de:	b289      	uxth	r1, r1
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
 80036e0:	ea83 2404 	eor.w	r4, r3, r4, lsl #8
 80036e4:	e7f2      	b.n	80036cc <crcCalc+0x20>
  }
  /* CRC result */
  return (uint32_t) (remainder ^ CRCDATA_FINAL_VAL) & CRCDATA_MASK;
}
 80036e6:	b2a0      	uxth	r0, r4
 80036e8:	bd30      	pop	{r4, r5, pc}
 80036ea:	bf00      	nop
 80036ec:	2000c318 	.word	0x2000c318
 80036f0:	2000c2fc 	.word	0x2000c2fc
 80036f4:	2000bafc 	.word	0x2000bafc
 80036f8:	2000befc 	.word	0x2000befc

080036fc <findBytes>:
#include <stdarg.h>

#include <arrayFunctions.h>

int8_t findBytes(uint8_t *array, uint8_t asize, uint8_t *bytes, uint8_t bsize, uint8_t returnindex)
{
 80036fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003700:	4607      	mov	r7, r0
 8003702:	4690      	mov	r8, r2
 8003704:	461d      	mov	r5, r3
    int8_t index = -1;
    int8_t result = -1;
    uint8_t *extract;

    uint8_t i;
    for(i=0;i<=(asize-bsize);i++)
 8003706:	2400      	movs	r4, #0
 8003708:	1ace      	subs	r6, r1, r3
 800370a:	b2e0      	uxtb	r0, r4
 800370c:	42b0      	cmp	r0, r6
 800370e:	dc0b      	bgt.n	8003728 <findBytes+0x2c>
    {
        extract = &array[i];
        if(memcmp(extract,bytes,bsize)==0)
 8003710:	462a      	mov	r2, r5
 8003712:	4641      	mov	r1, r8
 8003714:	4438      	add	r0, r7
 8003716:	f002 fb23 	bl	8005d60 <memcmp>
 800371a:	1c63      	adds	r3, r4, #1
 800371c:	b910      	cbnz	r0, 8003724 <findBytes+0x28>
        {
            index = i;
 800371e:	b264      	sxtb	r4, r4
            result = 1;
 8003720:	2301      	movs	r3, #1
            break;
 8003722:	e004      	b.n	800372e <findBytes+0x32>
 8003724:	461c      	mov	r4, r3
 8003726:	e7f0      	b.n	800370a <findBytes+0xe>
#include <arrayFunctions.h>

int8_t findBytes(uint8_t *array, uint8_t asize, uint8_t *bytes, uint8_t bsize, uint8_t returnindex)
{
    int8_t index = -1;
    int8_t result = -1;
 8003728:	f04f 33ff 	mov.w	r3, #4294967295

#include <arrayFunctions.h>

int8_t findBytes(uint8_t *array, uint8_t asize, uint8_t *bytes, uint8_t bsize, uint8_t returnindex)
{
    int8_t index = -1;
 800372c:	461c      	mov	r4, r3
    }
    else
    {
        return result;
    }
}
 800372e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8003732:	2800      	cmp	r0, #0
 8003734:	bf14      	ite	ne
 8003736:	4620      	movne	r0, r4
 8003738:	4618      	moveq	r0, r3
 800373a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800373e <findMultipleBytes>:

uint8_t findMultipleBytes(uint8_t *array, uint8_t asize, uint8_t *bytes, uint8_t bsize, uint8_t *returnindex, uint8_t indexsize)
{
 800373e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003742:	461f      	mov	r7, r3
    uint8_t result = 0;
    uint8_t *extract;

    uint8_t i;
    uint8_t z = 0;
 8003744:	2400      	movs	r4, #0
        return result;
    }
}

uint8_t findMultipleBytes(uint8_t *array, uint8_t asize, uint8_t *bytes, uint8_t bsize, uint8_t *returnindex, uint8_t indexsize)
{
 8003746:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800374a:	4680      	mov	r8, r0
 800374c:	4693      	mov	fp, r2
 800374e:	eb00 0a01 	add.w	sl, r0, r1
    uint8_t result = 0;
    uint8_t *extract;

    uint8_t i;
    uint8_t z = 0;
    for(i=0;i<asize;i++)
 8003752:	4605      	mov	r5, r0
    }
}

uint8_t findMultipleBytes(uint8_t *array, uint8_t asize, uint8_t *bytes, uint8_t bsize, uint8_t *returnindex, uint8_t indexsize)
{
    uint8_t result = 0;
 8003754:	46a1      	mov	r9, r4
 8003756:	ebc8 0605 	rsb	r6, r8, r5
    uint8_t *extract;

    uint8_t i;
    uint8_t z = 0;
    for(i=0;i<asize;i++)
 800375a:	4555      	cmp	r5, sl
 800375c:	b2f6      	uxtb	r6, r6
 800375e:	d010      	beq.n	8003782 <findMultipleBytes+0x44>
    {
    	extract = &array[i];
        //extractBytes(extract,array, i, bsize);
        if((memcmp(extract,bytes,bsize)==0) && (z<indexsize))
 8003760:	463a      	mov	r2, r7
 8003762:	4659      	mov	r1, fp
 8003764:	4628      	mov	r0, r5
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	f002 fafa 	bl	8005d60 <memcmp>
 800376c:	9b01      	ldr	r3, [sp, #4]
 800376e:	b930      	cbnz	r0, 800377e <findMultipleBytes+0x40>
 8003770:	429c      	cmp	r4, r3
 8003772:	d204      	bcs.n	800377e <findMultipleBytes+0x40>
        {
            returnindex[z] = i;
 8003774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003776:	5516      	strb	r6, [r2, r4]
            result = z + 1;
 8003778:	3401      	adds	r4, #1
 800377a:	b2e4      	uxtb	r4, r4
            z++;
 800377c:	46a1      	mov	r9, r4
 800377e:	3501      	adds	r5, #1
 8003780:	e7e9      	b.n	8003756 <findMultipleBytes+0x18>
        }
    }
    return result;
}
 8003782:	4648      	mov	r0, r9
 8003784:	b003      	add	sp, #12
 8003786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800378a <appendBytes>:
//{
//    memcpy(output, array[start], noBytes);
//}

uint8_t *appendBytes(uint8_t *array, uint8_t asize, uint8_t index, uint8_t *bytes, uint8_t start, uint8_t noBytes)
{
 800378a:	b538      	push	{r3, r4, r5, lr}
 800378c:	4604      	mov	r4, r0
 800378e:	4610      	mov	r0, r2
 8003790:	f89d 2014 	ldrb.w	r2, [sp, #20]
    if(asize>=index+noBytes)
 8003794:	1885      	adds	r5, r0, r2
 8003796:	42a9      	cmp	r1, r5
 8003798:	db07      	blt.n	80037aa <appendBytes+0x20>
    {
    	memcpy(&array[index], &bytes[start], noBytes);
 800379a:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800379e:	4420      	add	r0, r4
 80037a0:	4419      	add	r1, r3
 80037a2:	f002 faec 	bl	8005d7e <memcpy>
        return array;
 80037a6:	4620      	mov	r0, r4
 80037a8:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
        return 0;
 80037aa:	2000      	movs	r0, #0
    }
}
 80037ac:	bd38      	pop	{r3, r4, r5, pc}

080037ae <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80037ae:	4770      	bx	lr

080037b0 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80037b0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
    vTaskSuspend( NULL );
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7ff fbf8 	bl	8002fa8 <vTaskSuspend>
    /* Infinite loop */
    for(;; )
    {
            vTaskDelay(500);
 80037b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037bc:	f7ff fb42 	bl	8002e44 <vTaskDelay>
 80037c0:	e7fa      	b.n	80037b8 <StartDefaultTask+0x8>
	...

080037c4 <StartTXPC>:
  /* USER CODE END 5 */ 
}

/* StartTXPC function */
void StartTXPC(void const * argument)
{
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN StartTXPC */

    memset(PCPacketPTR, 0, sizeof(PCPacket));
 80037c6:	4d45      	ldr	r5, [pc, #276]	; (80038dc <StartTXPC+0x118>)

    PCPacket.START[0] = 0x7E;
 80037c8:	4c45      	ldr	r4, [pc, #276]	; (80038e0 <StartTXPC+0x11c>)
/* StartTXPC function */
void StartTXPC(void const * argument)
{
  /* USER CODE BEGIN StartTXPC */

    memset(PCPacketPTR, 0, sizeof(PCPacket));
 80037ca:	6828      	ldr	r0, [r5, #0]
 80037cc:	2260      	movs	r2, #96	; 0x60
  /* USER CODE END 5 */ 
}

/* StartTXPC function */
void StartTXPC(void const * argument)
{
 80037ce:	b09b      	sub	sp, #108	; 0x6c
  /* USER CODE BEGIN StartTXPC */

    memset(PCPacketPTR, 0, sizeof(PCPacket));
 80037d0:	2100      	movs	r1, #0
 80037d2:	f002 fadf 	bl	8005d94 <memset>

    PCPacket.START[0] = 0x7E;
    PCPacket.START[1] = 0x5B;
 80037d6:	225b      	movs	r2, #91	; 0x5b
{
  /* USER CODE BEGIN StartTXPC */

    memset(PCPacketPTR, 0, sizeof(PCPacket));

    PCPacket.START[0] = 0x7E;
 80037d8:	237e      	movs	r3, #126	; 0x7e
    PCPacket.START[1] = 0x5B;
 80037da:	7062      	strb	r2, [r4, #1]

    PCPacket.STOP[0] = 0x5D;
 80037dc:	225d      	movs	r2, #93	; 0x5d
{
  /* USER CODE BEGIN StartTXPC */

    memset(PCPacketPTR, 0, sizeof(PCPacket));

    PCPacket.START[0] = 0x7E;
 80037de:	7023      	strb	r3, [r4, #0]
    PCPacket.START[1] = 0x5B;

    PCPacket.STOP[0] = 0x5D;
 80037e0:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    PCPacket.STOP[1] = 0x7E;
 80037e4:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            xSemaphoreTake( PCTXHandle,  portMAX_DELAY );

            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);

            if(xQueueReceive( ProcessQM1Handle, &pxRxedMessage, 0 )) {
                    memcpy(PCPacket.M1C, pxRxedMessage, 10);
 80037e8:	1ca7      	adds	r7, r4, #2
    uint8_t CurrentPCPacket[sizeof(PCPacket)];

    /* Infinite loop */
    for(;; )
    {
            xSemaphoreTake( PCTXHandle,  portMAX_DELAY );
 80037ea:	483e      	ldr	r0, [pc, #248]	; (80038e4 <StartTXPC+0x120>)
 80037ec:	2300      	movs	r3, #0
 80037ee:	4619      	mov	r1, r3
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	6800      	ldr	r0, [r0, #0]
 80037f6:	f7fe ffc7 	bl	8002788 <xQueueGenericReceive>

            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80037fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037fe:	483a      	ldr	r0, [pc, #232]	; (80038e8 <StartTXPC+0x124>)
 8003800:	f7fd fd36 	bl	8001270 <HAL_GPIO_TogglePin>

            if(xQueueReceive( ProcessQM1Handle, &pxRxedMessage, 0 )) {
 8003804:	4839      	ldr	r0, [pc, #228]	; (80038ec <StartTXPC+0x128>)
 8003806:	2300      	movs	r3, #0
 8003808:	461a      	mov	r2, r3
 800380a:	a901      	add	r1, sp, #4
 800380c:	6800      	ldr	r0, [r0, #0]
 800380e:	f7fe ffbb 	bl	8002788 <xQueueGenericReceive>
 8003812:	b130      	cbz	r0, 8003822 <StartTXPC+0x5e>
                    memcpy(PCPacket.M1C, pxRxedMessage, 10);
 8003814:	9b01      	ldr	r3, [sp, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	603a      	str	r2, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	891b      	ldrh	r3, [r3, #8]
 8003820:	813b      	strh	r3, [r7, #8]
            }

            if(xQueueReceive( ProcessQM2Handle, &pxRxedMessage, 0 )) {
 8003822:	4833      	ldr	r0, [pc, #204]	; (80038f0 <StartTXPC+0x12c>)
 8003824:	2300      	movs	r3, #0
 8003826:	461a      	mov	r2, r3
 8003828:	a901      	add	r1, sp, #4
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	f7fe ffac 	bl	8002788 <xQueueGenericReceive>
 8003830:	b138      	cbz	r0, 8003842 <StartTXPC+0x7e>
                    memcpy(PCPacket.M2C, pxRxedMessage, 10);
 8003832:	9a01      	ldr	r2, [sp, #4]
 8003834:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <StartTXPC+0x130>)
 8003836:	6811      	ldr	r1, [r2, #0]
 8003838:	6019      	str	r1, [r3, #0]
 800383a:	6851      	ldr	r1, [r2, #4]
 800383c:	6059      	str	r1, [r3, #4]
 800383e:	8912      	ldrh	r2, [r2, #8]
 8003840:	811a      	strh	r2, [r3, #8]
            }
            if(xQueueReceive( ProcessQiNHandle, &pxRxedMessage, 0 )) {
 8003842:	482d      	ldr	r0, [pc, #180]	; (80038f8 <StartTXPC+0x134>)
 8003844:	2300      	movs	r3, #0
 8003846:	461a      	mov	r2, r3
 8003848:	a901      	add	r1, sp, #4
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	f7fe ff9c 	bl	8002788 <xQueueGenericReceive>
 8003850:	b158      	cbz	r0, 800386a <StartTXPC+0xa6>
                    memcpy(PCPacket.ACCX, pxRxedMessage, PAYLOAD_iN);
 8003852:	9b01      	ldr	r3, [sp, #4]
 8003854:	4a29      	ldr	r2, [pc, #164]	; (80038fc <StartTXPC+0x138>)
 8003856:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800385a:	f853 0b04 	ldr.w	r0, [r3], #4
 800385e:	f842 0b04 	str.w	r0, [r2], #4
 8003862:	428b      	cmp	r3, r1
 8003864:	d1f9      	bne.n	800385a <StartTXPC+0x96>
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	7013      	strb	r3, [r2, #0]
            }

            if(xQueueReceive( ProcessQControlHandle, &pxRxedMessage, 0 )) {
 800386a:	4825      	ldr	r0, [pc, #148]	; (8003900 <StartTXPC+0x13c>)
 800386c:	2300      	movs	r3, #0
 800386e:	461a      	mov	r2, r3
 8003870:	a901      	add	r1, sp, #4
 8003872:	6800      	ldr	r0, [r0, #0]
 8003874:	f7fe ff88 	bl	8002788 <xQueueGenericReceive>
 8003878:	b148      	cbz	r0, 800388e <StartTXPC+0xca>
                    memcpy(PCPacket.MISC, pxRxedMessage, sizeof(ControlLogPacket));
 800387a:	9b01      	ldr	r3, [sp, #4]
 800387c:	4a21      	ldr	r2, [pc, #132]	; (8003904 <StartTXPC+0x140>)
 800387e:	f103 0120 	add.w	r1, r3, #32
 8003882:	f853 0b04 	ldr.w	r0, [r3], #4
 8003886:	f842 0b04 	str.w	r0, [r2], #4
 800388a:	428b      	cmp	r3, r1
 800388c:	d1f9      	bne.n	8003882 <StartTXPC+0xbe>
            }

            CALC_CRC = crcCalc(&PCPacket.M1C, 0, PAYLOAD_TX + PAYLOAD_iN + PAYLOAD_MISC, 0);
 800388e:	2300      	movs	r3, #0
 8003890:	4619      	mov	r1, r3
 8003892:	225a      	movs	r2, #90	; 0x5a
 8003894:	481c      	ldr	r0, [pc, #112]	; (8003908 <StartTXPC+0x144>)
 8003896:	f7ff ff09 	bl	80036ac <crcCalc>
            WORDtoBYTE.HALFWORD = CALC_CRC;
 800389a:	f360 060f 	bfi	r6, r0, #0, #16
            PCPacket.CRCCheck[0] = WORDtoBYTE.BYTE[1];
 800389e:	f3c6 2307 	ubfx	r3, r6, #8, #8
            PCPacket.CRCCheck[1] = WORDtoBYTE.BYTE[0];

            memcpy(CurrentPCPacket, PCPacketPTR, sizeof(PCPacket));
 80038a2:	6829      	ldr	r1, [r5, #0]
                    memcpy(PCPacket.MISC, pxRxedMessage, sizeof(ControlLogPacket));
            }

            CALC_CRC = crcCalc(&PCPacket.M1C, 0, PAYLOAD_TX + PAYLOAD_iN + PAYLOAD_MISC, 0);
            WORDtoBYTE.HALFWORD = CALC_CRC;
            PCPacket.CRCCheck[0] = WORDtoBYTE.BYTE[1];
 80038a4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            PCPacket.CRCCheck[1] = WORDtoBYTE.BYTE[0];

            memcpy(CurrentPCPacket, PCPacketPTR, sizeof(PCPacket));
 80038a8:	2260      	movs	r2, #96	; 0x60
 80038aa:	a802      	add	r0, sp, #8
            }

            CALC_CRC = crcCalc(&PCPacket.M1C, 0, PAYLOAD_TX + PAYLOAD_iN + PAYLOAD_MISC, 0);
            WORDtoBYTE.HALFWORD = CALC_CRC;
            PCPacket.CRCCheck[0] = WORDtoBYTE.BYTE[1];
            PCPacket.CRCCheck[1] = WORDtoBYTE.BYTE[0];
 80038ac:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d

            memcpy(CurrentPCPacket, PCPacketPTR, sizeof(PCPacket));
 80038b0:	f002 fa65 	bl	8005d7e <memcpy>

            HAL_UART_Transmit_DMA(&PC_UART, CurrentPCPacket, sizeof(PCPacket));
 80038b4:	a902      	add	r1, sp, #8
 80038b6:	2260      	movs	r2, #96	; 0x60
 80038b8:	4814      	ldr	r0, [pc, #80]	; (800390c <StartTXPC+0x148>)
 80038ba:	f7fe fa3d 	bl	8001d38 <HAL_UART_Transmit_DMA>

            PCPacket.StatBIT_1 = 0;
 80038be:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
            PCPacket.StatBIT_5 = 0;
            PCPacket.StatBIT_6 = 0;
            PCPacket.StatBIT_7 = 0;
            PCPacket.StatBIT_8 = 0;

            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80038c2:	4809      	ldr	r0, [pc, #36]	; (80038e8 <StartTXPC+0x124>)
            PCPacket.StatBIT_3 = 0;
            PCPacket.StatBIT_4 = 0;
            PCPacket.StatBIT_5 = 0;
            PCPacket.StatBIT_6 = 0;
            PCPacket.StatBIT_7 = 0;
            PCPacket.StatBIT_8 = 0;
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	f36f 13c7 	bfc	r3, #7, #1

            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80038cc:	f44f 7180 	mov.w	r1, #256	; 0x100
            PCPacket.StatBIT_3 = 0;
            PCPacket.StatBIT_4 = 0;
            PCPacket.StatBIT_5 = 0;
            PCPacket.StatBIT_6 = 0;
            PCPacket.StatBIT_7 = 0;
            PCPacket.StatBIT_8 = 0;
 80038d0:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80038d4:	f7fd fccc 	bl	8001270 <HAL_GPIO_TogglePin>
    }
 80038d8:	e787      	b.n	80037ea <StartTXPC+0x26>
 80038da:	bf00      	nop
 80038dc:	20007d20 	.word	0x20007d20
 80038e0:	2000cb94 	.word	0x2000cb94
 80038e4:	2000c324 	.word	0x2000c324
 80038e8:	40020400 	.word	0x40020400
 80038ec:	2000ca00 	.word	0x2000ca00
 80038f0:	2000cb24 	.word	0x2000cb24
 80038f4:	2000cba0 	.word	0x2000cba0
 80038f8:	2000c5cc 	.word	0x2000c5cc
 80038fc:	2000cbaa 	.word	0x2000cbaa
 8003900:	2000c3ec 	.word	0x2000c3ec
 8003904:	2000cbcf 	.word	0x2000cbcf
 8003908:	2000cb96 	.word	0x2000cb96
 800390c:	2000ca64 	.word	0x2000ca64

08003910 <StartRXiN>:
  /* USER CODE END StartRXPC */
}

/* StartRXiN function */
void StartRXiN(void const * argument)
{
 8003910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003914:	b099      	sub	sp, #100	; 0x64

	struct RXiNemoStruct iNRXPacket;
	uint8_t *iNRXPacketPTR = (uint8_t*)&iNRXPacket;

			iNRXPacket.START[0] = 0x7E;
	        iNRXPacket.START[1] = 0x5B;
 8003916:	225b      	movs	r2, #91	; 0x5b
 8003918:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	                       uint16_t HALFWORD;
	                       uint8_t BYTE[4];
	               } WORDtoBYTE;

	               uint8_t rcvdCount;
	        uint8_t temp[PAYLOAD_iN+1]={0};
 800391c:	ad03      	add	r5, sp, #12
	uint8_t *iNRXPacketPTR = (uint8_t*)&iNRXPacket;

			iNRXPacket.START[0] = 0x7E;
	        iNRXPacket.START[1] = 0x5B;

	        iNRXPacket.STOP[0] = 0x5D;
 800391e:	225d      	movs	r2, #93	; 0x5d
	};

	struct RXiNemoStruct iNRXPacket;
	uint8_t *iNRXPacketPTR = (uint8_t*)&iNRXPacket;

			iNRXPacket.START[0] = 0x7E;
 8003920:	237e      	movs	r3, #126	; 0x7e
	        iNRXPacket.START[1] = 0x5B;

	        iNRXPacket.STOP[0] = 0x5D;
 8003922:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
	                       uint16_t HALFWORD;
	                       uint8_t BYTE[4];
	               } WORDtoBYTE;

	               uint8_t rcvdCount;
	        uint8_t temp[PAYLOAD_iN+1]={0};
 8003926:	2100      	movs	r1, #0
 8003928:	2226      	movs	r2, #38	; 0x26
 800392a:	4628      	mov	r0, r5
	        uint8_t *tempPTR = (uint8_t*)&temp;
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_DMA(&iNemo_UART, RXBufiN, sizeof(iNRXPacket));
 800392c:	4f34      	ldr	r7, [pc, #208]	; (8003a00 <StartRXiN+0xf0>)
	  	                //HAL_DMA_Start(&hdma_uart6_rx, (uint32_t)(&(UART6->DR)), (uint32_t)(&RXBufiN), sizeof(iNRXPacket));
	  if(xSemaphoreTake( iNRXHandle, portMAX_DELAY ) == pdTRUE){
 800392e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003a10 <StartRXiN+0x100>
	};

	struct RXiNemoStruct iNRXPacket;
	uint8_t *iNRXPacketPTR = (uint8_t*)&iNRXPacket;

			iNRXPacket.START[0] = 0x7E;
 8003932:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	        iNRXPacket.START[1] = 0x5B;

	        iNRXPacket.STOP[0] = 0x5D;
	        iNRXPacket.STOP[1] = 0x7E;
 8003936:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
	                       uint16_t HALFWORD;
	                       uint8_t BYTE[4];
	               } WORDtoBYTE;

	               uint8_t rcvdCount;
	        uint8_t temp[PAYLOAD_iN+1]={0};
 800393a:	f002 fa2b 	bl	8005d94 <memset>
	        uint8_t *tempPTR = (uint8_t*)&temp;
 800393e:	9502      	str	r5, [sp, #8]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_DMA(&iNemo_UART, RXBufiN, sizeof(iNRXPacket));
 8003940:	222b      	movs	r2, #43	; 0x2b
 8003942:	492f      	ldr	r1, [pc, #188]	; (8003a00 <StartRXiN+0xf0>)
 8003944:	482f      	ldr	r0, [pc, #188]	; (8003a04 <StartRXiN+0xf4>)
 8003946:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8003a00 <StartRXiN+0xf0>
 800394a:	f7fe fa2f 	bl	8001dac <HAL_UART_Receive_DMA>
	  	                //HAL_DMA_Start(&hdma_uart6_rx, (uint32_t)(&(UART6->DR)), (uint32_t)(&RXBufiN), sizeof(iNRXPacket));
	  if(xSemaphoreTake( iNRXHandle, portMAX_DELAY ) == pdTRUE){
 800394e:	2300      	movs	r3, #0
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	4619      	mov	r1, r3
 8003956:	f8d8 0000 	ldr.w	r0, [r8]
 800395a:	f7fe ff15 	bl	8002788 <xQueueGenericReceive>
 800395e:	2801      	cmp	r0, #1
 8003960:	d145      	bne.n	80039ee <StartRXiN+0xde>
		  rcvdCount = sizeof(iNRXPacket);
		  START_INDEX = findBytes(RXBufiN, rcvdCount, iNRXPacket.START, 2, 1);
 8003962:	9000      	str	r0, [sp, #0]
 8003964:	2302      	movs	r3, #2
 8003966:	aa0d      	add	r2, sp, #52	; 0x34
 8003968:	212b      	movs	r1, #43	; 0x2b
 800396a:	4648      	mov	r0, r9
 800396c:	f7ff fec6 	bl	80036fc <findBytes>
	  	  if(START_INDEX>=0) {
 8003970:	1e04      	subs	r4, r0, #0
 8003972:	db3c      	blt.n	80039ee <StartRXiN+0xde>
	  		  memcpy(iNRXPacketPTR, &RXBufiN[START_INDEX], sizeof(iNRXPacket));
 8003974:	193a      	adds	r2, r7, r4
 8003976:	ab0d      	add	r3, sp, #52	; 0x34
 8003978:	f102 0c28 	add.w	ip, r2, #40	; 0x28
 800397c:	6810      	ldr	r0, [r2, #0]
 800397e:	6851      	ldr	r1, [r2, #4]
 8003980:	469e      	mov	lr, r3
 8003982:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8003986:	3208      	adds	r2, #8
 8003988:	4562      	cmp	r2, ip
 800398a:	4673      	mov	r3, lr
 800398c:	d1f6      	bne.n	800397c <StartRXiN+0x6c>
 800398e:	8811      	ldrh	r1, [r2, #0]
 8003990:	7892      	ldrb	r2, [r2, #2]
 8003992:	f88e 2002 	strb.w	r2, [lr, #2]
 8003996:	f8ae 1000 	strh.w	r1, [lr]
	  		  WORDtoBYTE.BYTE[1] = iNRXPacket.CRCCheck[0];
 800399a:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800399e:	f363 260f 	bfi	r6, r3, #8, #8
	  	      WORDtoBYTE.BYTE[0] = iNRXPacket.CRCCheck[1];
 80039a2:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 80039a6:	f363 0607 	bfi	r6, r3, #0, #8
	  	      CALC_CRC = crcCalc(&iNRXPacket.ACCx, 0, PAYLOAD_iN, 0);
 80039aa:	2300      	movs	r3, #0
 80039ac:	4619      	mov	r1, r3
 80039ae:	2225      	movs	r2, #37	; 0x25
 80039b0:	f10d 0036 	add.w	r0, sp, #54	; 0x36
 80039b4:	f7ff fe7a 	bl	80036ac <crcCalc>
	  	      if(WORDtoBYTE.HALFWORD==CALC_CRC) {
 80039b8:	b2b3      	uxth	r3, r6
 80039ba:	4298      	cmp	r0, r3
 80039bc:	d117      	bne.n	80039ee <StartRXiN+0xde>
	  	    	  memcpy(&temp, &RXBufiN[START_INDEX+2], PAYLOAD_iN);
 80039be:	1ca3      	adds	r3, r4, #2
 80039c0:	444b      	add	r3, r9
 80039c2:	462a      	mov	r2, r5
 80039c4:	f103 0e20 	add.w	lr, r3, #32
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	4614      	mov	r4, r2
 80039ce:	c403      	stmia	r4!, {r0, r1}
 80039d0:	3308      	adds	r3, #8
 80039d2:	4573      	cmp	r3, lr
 80039d4:	4622      	mov	r2, r4
 80039d6:	d1f7      	bne.n	80039c8 <StartRXiN+0xb8>
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	6020      	str	r0, [r4, #0]
 80039dc:	791b      	ldrb	r3, [r3, #4]
	  	          xQueueOverwrite(ProcessQiNHandle, &tempPTR);
 80039de:	480a      	ldr	r0, [pc, #40]	; (8003a08 <StartRXiN+0xf8>)
	  		  memcpy(iNRXPacketPTR, &RXBufiN[START_INDEX], sizeof(iNRXPacket));
	  		  WORDtoBYTE.BYTE[1] = iNRXPacket.CRCCheck[0];
	  	      WORDtoBYTE.BYTE[0] = iNRXPacket.CRCCheck[1];
	  	      CALC_CRC = crcCalc(&iNRXPacket.ACCx, 0, PAYLOAD_iN, 0);
	  	      if(WORDtoBYTE.HALFWORD==CALC_CRC) {
	  	    	  memcpy(&temp, &RXBufiN[START_INDEX+2], PAYLOAD_iN);
 80039e0:	7123      	strb	r3, [r4, #4]
	  	          xQueueOverwrite(ProcessQiNHandle, &tempPTR);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2302      	movs	r3, #2
 80039e6:	a902      	add	r1, sp, #8
 80039e8:	6800      	ldr	r0, [r0, #0]
 80039ea:	f7fe fdc9 	bl	8002580 <xQueueGenericSend>
	  	      }

	  	  }
	  }
	  xSemaphoreGive(PCTXHandle);
 80039ee:	4807      	ldr	r0, [pc, #28]	; (8003a0c <StartRXiN+0xfc>)
 80039f0:	2300      	movs	r3, #0
 80039f2:	461a      	mov	r2, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6800      	ldr	r0, [r0, #0]
 80039f8:	f7fe fdc2 	bl	8002580 <xQueueGenericSend>
  }
 80039fc:	e7a0      	b.n	8003940 <StartRXiN+0x30>
 80039fe:	bf00      	nop
 8003a00:	2000c630 	.word	0x2000c630
 8003a04:	2000ca20 	.word	0x2000ca20
 8003a08:	2000c5cc 	.word	0x2000c5cc
 8003a0c:	2000c324 	.word	0x2000c324
 8003a10:	2000cc6c 	.word	0x2000cc6c

08003a14 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <SystemClock_Config+0xa4>)
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003a20:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003a24:	6411      	str	r1, [r2, #64]	; 0x40
 8003a26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a28:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003a2c:	9201      	str	r2, [sp, #4]
 8003a2e:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <SystemClock_Config+0xa8>)
 8003a32:	9302      	str	r3, [sp, #8]
 8003a34:	6811      	ldr	r1, [r2, #0]
 8003a36:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003a3a:	6011      	str	r1, [r2, #0]
 8003a3c:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a3e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a40:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003a44:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a46:	2308      	movs	r3, #8
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a48:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a4a:	9310      	str	r3, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a4c:	2201      	movs	r2, #1

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a4e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a50:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003a52:	23a8      	movs	r3, #168	; 0xa8

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003a54:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a56:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a58:	a808      	add	r0, sp, #32

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a5a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003a5c:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a5e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003a60:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a62:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a64:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a66:	f7fd fc07 	bl	8001278 <HAL_RCC_OscConfig>
 8003a6a:	b100      	cbz	r0, 8003a6e <SystemClock_Config+0x5a>
 8003a6c:	e7fe      	b.n	8003a6c <SystemClock_Config+0x58>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a72:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a74:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a76:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a7c:	2105      	movs	r1, #5
 8003a7e:	a803      	add	r0, sp, #12
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a80:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a82:	9503      	str	r5, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a84:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a86:	f7fd fdc3 	bl	8001610 <HAL_RCC_ClockConfig>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	b100      	cbz	r0, 8003a90 <SystemClock_Config+0x7c>
 8003a8e:	e7fe      	b.n	8003a8e <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003a90:	f7fd fe72 	bl	8001778 <HAL_RCC_GetHCLKFreq>
 8003a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a98:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a9c:	f7fd f902 	bl	8000ca4 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f7fd f915 	bl	8000cd0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8003aae:	f7fd f8b9 	bl	8000c24 <HAL_NVIC_SetPriority>
}
 8003ab2:	b014      	add	sp, #80	; 0x50
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40007000 	.word	0x40007000

08003ac0 <SetupBinarySemaphores>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void SetupBinarySemaphores(void){
 8003ac0:	b508      	push	{r3, lr}
        PCRXHandle = xSemaphoreCreateBinary();
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f7fe fd36 	bl	8002538 <xQueueGenericCreate>
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <SetupBinarySemaphores+0x84>)
        PCTXHandle = xSemaphoreCreateBinary();
 8003ace:	2203      	movs	r2, #3

}

/* USER CODE BEGIN 4 */
void SetupBinarySemaphores(void){
        PCRXHandle = xSemaphoreCreateBinary();
 8003ad0:	6018      	str	r0, [r3, #0]
        PCTXHandle = xSemaphoreCreateBinary();
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f7fe fd2f 	bl	8002538 <xQueueGenericCreate>
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <SetupBinarySemaphores+0x88>)
        iNRXHandle = xSemaphoreCreateBinary();
 8003adc:	2203      	movs	r2, #3
}

/* USER CODE BEGIN 4 */
void SetupBinarySemaphores(void){
        PCRXHandle = xSemaphoreCreateBinary();
        PCTXHandle = xSemaphoreCreateBinary();
 8003ade:	6018      	str	r0, [r3, #0]
        iNRXHandle = xSemaphoreCreateBinary();
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f7fe fd28 	bl	8002538 <xQueueGenericCreate>
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <SetupBinarySemaphores+0x8c>)

        TXMotorM1Handle = xSemaphoreCreateBinary();
 8003aea:	2203      	movs	r2, #3

/* USER CODE BEGIN 4 */
void SetupBinarySemaphores(void){
        PCRXHandle = xSemaphoreCreateBinary();
        PCTXHandle = xSemaphoreCreateBinary();
        iNRXHandle = xSemaphoreCreateBinary();
 8003aec:	6018      	str	r0, [r3, #0]

        TXMotorM1Handle = xSemaphoreCreateBinary();
 8003aee:	2100      	movs	r1, #0
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7fe fd21 	bl	8002538 <xQueueGenericCreate>
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <SetupBinarySemaphores+0x90>)
        TXMotorM2Handle = xSemaphoreCreateBinary();
 8003af8:	2203      	movs	r2, #3
void SetupBinarySemaphores(void){
        PCRXHandle = xSemaphoreCreateBinary();
        PCTXHandle = xSemaphoreCreateBinary();
        iNRXHandle = xSemaphoreCreateBinary();

        TXMotorM1Handle = xSemaphoreCreateBinary();
 8003afa:	6018      	str	r0, [r3, #0]
        TXMotorM2Handle = xSemaphoreCreateBinary();
 8003afc:	2100      	movs	r1, #0
 8003afe:	2001      	movs	r0, #1
 8003b00:	f7fe fd1a 	bl	8002538 <xQueueGenericCreate>
 8003b04:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <SetupBinarySemaphores+0x94>)
        RXMotorM1Handle = xSemaphoreCreateBinary();
 8003b06:	2203      	movs	r2, #3
        PCRXHandle = xSemaphoreCreateBinary();
        PCTXHandle = xSemaphoreCreateBinary();
        iNRXHandle = xSemaphoreCreateBinary();

        TXMotorM1Handle = xSemaphoreCreateBinary();
        TXMotorM2Handle = xSemaphoreCreateBinary();
 8003b08:	6018      	str	r0, [r3, #0]
        RXMotorM1Handle = xSemaphoreCreateBinary();
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f7fe fd13 	bl	8002538 <xQueueGenericCreate>
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <SetupBinarySemaphores+0x98>)
        RXMotorM2Handle = xSemaphoreCreateBinary();
 8003b14:	2203      	movs	r2, #3
        PCTXHandle = xSemaphoreCreateBinary();
        iNRXHandle = xSemaphoreCreateBinary();

        TXMotorM1Handle = xSemaphoreCreateBinary();
        TXMotorM2Handle = xSemaphoreCreateBinary();
        RXMotorM1Handle = xSemaphoreCreateBinary();
 8003b16:	6018      	str	r0, [r3, #0]
        RXMotorM2Handle = xSemaphoreCreateBinary();
 8003b18:	2100      	movs	r1, #0
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f7fe fd0c 	bl	8002538 <xQueueGenericCreate>
 8003b20:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <SetupBinarySemaphores+0x9c>)

        ControlM1Handle = xSemaphoreCreateBinary();
 8003b22:	2203      	movs	r2, #3
        iNRXHandle = xSemaphoreCreateBinary();

        TXMotorM1Handle = xSemaphoreCreateBinary();
        TXMotorM2Handle = xSemaphoreCreateBinary();
        RXMotorM1Handle = xSemaphoreCreateBinary();
        RXMotorM2Handle = xSemaphoreCreateBinary();
 8003b24:	6018      	str	r0, [r3, #0]

        ControlM1Handle = xSemaphoreCreateBinary();
 8003b26:	2100      	movs	r1, #0
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7fe fd05 	bl	8002538 <xQueueGenericCreate>
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <SetupBinarySemaphores+0xa0>)
        ControlM2Handle = xSemaphoreCreateBinary();
 8003b30:	2203      	movs	r2, #3
        TXMotorM1Handle = xSemaphoreCreateBinary();
        TXMotorM2Handle = xSemaphoreCreateBinary();
        RXMotorM1Handle = xSemaphoreCreateBinary();
        RXMotorM2Handle = xSemaphoreCreateBinary();

        ControlM1Handle = xSemaphoreCreateBinary();
 8003b32:	6018      	str	r0, [r3, #0]
        ControlM2Handle = xSemaphoreCreateBinary();
 8003b34:	2100      	movs	r1, #0
 8003b36:	2001      	movs	r0, #1
 8003b38:	f7fe fcfe 	bl	8002538 <xQueueGenericCreate>
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <SetupBinarySemaphores+0xa4>)
 8003b3e:	6018      	str	r0, [r3, #0]
 8003b40:	bd08      	pop	{r3, pc}
 8003b42:	bf00      	nop
 8003b44:	2000c9fc 	.word	0x2000c9fc
 8003b48:	2000c324 	.word	0x2000c324
 8003b4c:	2000cc6c 	.word	0x2000cc6c
 8003b50:	2000c500 	.word	0x2000c500
 8003b54:	2000c454 	.word	0x2000c454
 8003b58:	2000ca10 	.word	0x2000ca10
 8003b5c:	2000cbf8 	.word	0x2000cbf8
 8003b60:	2000cc00 	.word	0x2000cc00
 8003b64:	2000c450 	.word	0x2000c450

08003b68 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	b0db      	sub	sp, #364	; 0x16c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6c:	2400      	movs	r4, #0
 8003b6e:	4d6d      	ldr	r5, [pc, #436]	; (8003d24 <main+0x1bc>)
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b70:	f7fd f80e 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b74:	f7ff ff4e 	bl	8003a14 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b78:	9404      	str	r4, [sp, #16]
 8003b7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_MISC1_Pin|GPIO_MISC2_Pin, GPIO_PIN_RESET);
 8003b7c:	486a      	ldr	r0, [pc, #424]	; (8003d28 <main+0x1c0>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	632b      	str	r3, [r5, #48]	; 0x30
 8003b84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	9304      	str	r3, [sp, #16]
 8003b8c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b8e:	9405      	str	r4, [sp, #20]
 8003b90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b92:	f043 0310 	orr.w	r3, r3, #16
 8003b96:	632b      	str	r3, [r5, #48]	; 0x30
 8003b98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	9305      	str	r3, [sp, #20]
 8003ba0:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba2:	9406      	str	r4, [sp, #24]
 8003ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003ba6:	f043 0304 	orr.w	r3, r3, #4
 8003baa:	632b      	str	r3, [r5, #48]	; 0x30
 8003bac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	9306      	str	r3, [sp, #24]
 8003bb4:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb6:	9407      	str	r4, [sp, #28]
 8003bb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003bba:	f043 0302 	orr.w	r3, r3, #2
 8003bbe:	632b      	str	r3, [r5, #48]	; 0x30
 8003bc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003bc2:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_MISC1_Pin|GPIO_MISC2_Pin, GPIO_PIN_RESET);
 8003bc6:	4622      	mov	r2, r4

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc8:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_MISC1_Pin|GPIO_MISC2_Pin, GPIO_PIN_RESET);
 8003bca:	f44f 7140 	mov.w	r1, #768	; 0x300

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bce:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, GPIO_MISC1_Pin|GPIO_MISC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bd0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_MISC1_Pin|GPIO_MISC2_Pin, GPIO_PIN_RESET);
 8003bd2:	f7fd fb49 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bd6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bd8:	a955      	add	r1, sp, #340	; 0x154
 8003bda:	4854      	ldr	r0, [pc, #336]	; (8003d2c <main+0x1c4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_MISC1_Pin|GPIO_MISC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bdc:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bde:	9456      	str	r4, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be0:	9657      	str	r6, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003be2:	f7fd fa61 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_MISC1_Pin GPIO_MISC2_Pin */
  GPIO_InitStruct.Pin = GPIO_MISC1_Pin|GPIO_MISC2_Pin;
 8003be6:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bea:	a955      	add	r1, sp, #340	; 0x154
 8003bec:	484e      	ldr	r0, [pc, #312]	; (8003d28 <main+0x1c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : GPIO_MISC1_Pin GPIO_MISC2_Pin */
  GPIO_InitStruct.Pin = GPIO_MISC1_Pin|GPIO_MISC2_Pin;
 8003bee:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf0:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf6:	f7fd fa57 	bl	80010a8 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bfa:	9402      	str	r4, [sp, #8]
 8003bfc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c02:	632b      	str	r3, [r5, #48]	; 0x30
 8003c04:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0a:	9302      	str	r3, [sp, #8]
 8003c0c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c0e:	9403      	str	r4, [sp, #12]
 8003c10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c16:	632b      	str	r3, [r5, #48]	; 0x30
 8003c18:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003c1e:	4622      	mov	r2, r4
 8003c20:	2105      	movs	r1, #5
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c22:	9303      	str	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003c24:	200c      	movs	r0, #12
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c26:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003c28:	f7fc fffc 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003c2c:	200c      	movs	r0, #12
 8003c2e:	f7fd f82d 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8003c32:	4622      	mov	r2, r4
 8003c34:	2105      	movs	r1, #5
 8003c36:	200d      	movs	r0, #13
 8003c38:	f7fc fff4 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003c3c:	200d      	movs	r0, #13
 8003c3e:	f7fd f825 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8003c42:	4622      	mov	r2, r4
 8003c44:	2105      	movs	r1, #5
 8003c46:	200e      	movs	r0, #14
 8003c48:	f7fc ffec 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003c4c:	200e      	movs	r0, #14
 8003c4e:	f7fd f81d 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003c52:	4622      	mov	r2, r4
 8003c54:	2105      	movs	r1, #5
 8003c56:	200f      	movs	r0, #15
 8003c58:	f7fc ffe4 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003c5c:	200f      	movs	r0, #15
 8003c5e:	f7fd f815 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003c62:	4622      	mov	r2, r4
 8003c64:	2105      	movs	r1, #5
 8003c66:	2010      	movs	r0, #16
 8003c68:	f7fc ffdc 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003c6c:	2010      	movs	r0, #16
 8003c6e:	f7fd f80d 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8003c72:	4622      	mov	r2, r4
 8003c74:	2105      	movs	r1, #5
 8003c76:	2011      	movs	r0, #17
 8003c78:	f7fc ffd4 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003c7c:	2011      	movs	r0, #17
 8003c7e:	f7fd f805 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003c82:	4622      	mov	r2, r4
 8003c84:	2105      	movs	r1, #5
 8003c86:	2039      	movs	r0, #57	; 0x39
 8003c88:	f7fc ffcc 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003c8c:	2039      	movs	r0, #57	; 0x39
 8003c8e:	f7fc fffd 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003c92:	4622      	mov	r2, r4
 8003c94:	2105      	movs	r1, #5
 8003c96:	2045      	movs	r0, #69	; 0x45
 8003c98:	f7fc ffc4 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003c9c:	2045      	movs	r0, #69	; 0x45
 8003c9e:	f7fc fff5 	bl	8000c8c <HAL_NVIC_EnableIRQ>

/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
 8003ca2:	4823      	ldr	r0, [pc, #140]	; (8003d30 <main+0x1c8>)
  huart4.Init.BaudRate = 256000;
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <main+0x1cc>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003ca6:	6084      	str	r4, [r0, #8]
/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 256000;
 8003ca8:	f44f 377a 	mov.w	r7, #256000	; 0x3e800
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003cac:	250c      	movs	r5, #12
/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 256000;
 8003cae:	e880 0088 	stmia.w	r0, {r3, r7}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003cb2:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003cb4:	6104      	str	r4, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003cb6:	6145      	str	r5, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cb8:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cba:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003cbc:	f7fe f80e 	bl	8001cdc <HAL_UART_Init>
 8003cc0:	b100      	cbz	r0, 8003cc4 <main+0x15c>
 8003cc2:	e7fe      	b.n	8003cc2 <main+0x15a>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8003cc4:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <main+0x1d0>)
  huart2.Init.BaudRate = 921600;
 8003cc6:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <main+0x1d4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cc8:	6098      	str	r0, [r3, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 921600;
 8003cca:	f44f 2461 	mov.w	r4, #921600	; 0xe1000
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cce:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cd0:	6118      	str	r0, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cd2:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd4:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cd6:	4618      	mov	r0, r3
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 921600;
 8003cd8:	e883 0014 	stmia.w	r3, {r2, r4}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cdc:	615d      	str	r5, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cde:	f7fd fffd 	bl	8001cdc <HAL_UART_Init>
 8003ce2:	b100      	cbz	r0, 8003ce6 <main+0x17e>
 8003ce4:	e7fe      	b.n	8003ce4 <main+0x17c>

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <main+0x1d8>)
 8003ce8:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <main+0x1dc>)
  huart3.Init.BaudRate = 921600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003cea:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003cec:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003cee:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cf0:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cf2:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003cf4:	4618      	mov	r0, r3
/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 921600;
 8003cf6:	e883 0014 	stmia.w	r3, {r2, r4}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003cfa:	615d      	str	r5, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003cfc:	f7fd ffee 	bl	8001cdc <HAL_UART_Init>
 8003d00:	b100      	cbz	r0, 8003d04 <main+0x19c>
 8003d02:	e7fe      	b.n	8003d02 <main+0x19a>

/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
 8003d04:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <main+0x1e0>)
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <main+0x1e4>)
  huart6.Init.BaudRate = 256000;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003d08:	6098      	str	r0, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003d0a:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003d0c:	6118      	str	r0, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d0e:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d10:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003d12:	4618      	mov	r0, r3
/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
  huart6.Init.BaudRate = 256000;
 8003d14:	e883 0084 	stmia.w	r3, {r2, r7}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003d18:	615d      	str	r5, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003d1a:	f7fd ffdf 	bl	8001cdc <HAL_UART_Init>
 8003d1e:	4604      	mov	r4, r0
 8003d20:	b1b0      	cbz	r0, 8003d50 <main+0x1e8>
 8003d22:	e7fe      	b.n	8003d22 <main+0x1ba>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40020400 	.word	0x40020400
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	2000ca64 	.word	0x2000ca64
 8003d34:	40004c00 	.word	0x40004c00
 8003d38:	2000cae4 	.word	0x2000cae4
 8003d3c:	40004400 	.word	0x40004400
 8003d40:	2000c4c0 	.word	0x2000c4c0
 8003d44:	40004800 	.word	0x40004800
 8003d48:	2000ca20 	.word	0x2000ca20
 8003d4c:	40011400 	.word	0x40011400
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  MX_USART6_UART_Init();

  /* USER CODE BEGIN 2 */
  initCRC(0); 				//iNemo CRC False
 8003d50:	f7ff fc86 	bl	8003660 <initCRC>
  initCRC(1); 				//Driver CRC XModem
 8003d54:	4630      	mov	r0, r6
 8003d56:	f7ff fc83 	bl	8003660 <initCRC>
  SetupBinarySemaphores();
 8003d5a:	f7ff feb1 	bl	8003ac0 <SetupBinarySemaphores>
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of M1 */
  osSemaphoreDef(M1);
  M1Handle = osSemaphoreCreate(osSemaphore(M1), 1);
 8003d5e:	4631      	mov	r1, r6
 8003d60:	4668      	mov	r0, sp
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of M1 */
  osSemaphoreDef(M1);
 8003d62:	9400      	str	r4, [sp, #0]
  M1Handle = osSemaphoreCreate(osSemaphore(M1), 1);
 8003d64:	f7fe f9d1 	bl	800210a <osSemaphoreCreate>
 8003d68:	4b9f      	ldr	r3, [pc, #636]	; (8003fe8 <main+0x480>)

  /* definition and creation of M2 */
  osSemaphoreDef(M2);
 8003d6a:	9401      	str	r4, [sp, #4]
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of M1 */
  osSemaphoreDef(M1);
  M1Handle = osSemaphoreCreate(osSemaphore(M1), 1);
 8003d6c:	6018      	str	r0, [r3, #0]

  /* definition and creation of M2 */
  osSemaphoreDef(M2);
  M2Handle = osSemaphoreCreate(osSemaphore(M2), 1);
 8003d6e:	4631      	mov	r1, r6
 8003d70:	a801      	add	r0, sp, #4
 8003d72:	f7fe f9ca 	bl	800210a <osSemaphoreCreate>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003d76:	4d9d      	ldr	r5, [pc, #628]	; (8003fec <main+0x484>)
  osSemaphoreDef(M1);
  M1Handle = osSemaphoreCreate(osSemaphore(M1), 1);

  /* definition and creation of M2 */
  osSemaphoreDef(M2);
  M2Handle = osSemaphoreCreate(osSemaphore(M2), 1);
 8003d78:	4b9d      	ldr	r3, [pc, #628]	; (8003ff0 <main+0x488>)
 8003d7a:	6018      	str	r0, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d7e:	af28      	add	r7, sp, #160	; 0xa0
 8003d80:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d82:	462e      	mov	r6, r5
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003d84:	4621      	mov	r1, r4
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003d86:	f856 3b04 	ldr.w	r3, [r6], #4
 8003d8a:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003d8c:	a828      	add	r0, sp, #160	; 0xa0
 8003d8e:	f7fe f9a4 	bl	80020da <osThreadCreate>
 8003d92:	4b98      	ldr	r3, [pc, #608]	; (8003ff4 <main+0x48c>)
 8003d94:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXPC */
  osThreadDef(TXPC, StartTXPC, osPriorityHigh, 0, 128);
 8003d96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003d98:	af2d      	add	r7, sp, #180	; 0xb4
 8003d9a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d9c:	6833      	ldr	r3, [r6, #0]
 8003d9e:	603b      	str	r3, [r7, #0]
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);
 8003da0:	4621      	mov	r1, r4
 8003da2:	a82d      	add	r0, sp, #180	; 0xb4
 8003da4:	f7fe f999 	bl	80020da <osThreadCreate>
 8003da8:	4b93      	ldr	r3, [pc, #588]	; (8003ff8 <main+0x490>)

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityHigh, 0, 128);
 8003daa:	f105 0718 	add.w	r7, r5, #24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of TXPC */
  osThreadDef(TXPC, StartTXPC, osPriorityHigh, 0, 128);
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);
 8003dae:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityHigh, 0, 128);
 8003db0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003db2:	ae32      	add	r6, sp, #200	; 0xc8
 8003db4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6033      	str	r3, [r6, #0]
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);
 8003dba:	4621      	mov	r1, r4
 8003dbc:	a832      	add	r0, sp, #200	; 0xc8
 8003dbe:	f7fe f98c 	bl	80020da <osThreadCreate>
 8003dc2:	4b8e      	ldr	r3, [pc, #568]	; (8003ffc <main+0x494>)

  /* definition and creation of RXiN */
  osThreadDef(RXiN, StartRXiN, osPriorityHigh, 0, 128);
 8003dc4:	f105 072c 	add.w	r7, r5, #44	; 0x2c
  osThreadDef(TXPC, StartTXPC, osPriorityHigh, 0, 128);
  TXPCHandle = osThreadCreate(osThread(TXPC), NULL);

  /* definition and creation of RXPC */
  osThreadDef(RXPC, StartRXPC, osPriorityHigh, 0, 128);
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);
 8003dc8:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXiN */
  osThreadDef(RXiN, StartRXiN, osPriorityHigh, 0, 128);
 8003dca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003dcc:	ae37      	add	r6, sp, #220	; 0xdc
 8003dce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6033      	str	r3, [r6, #0]
  RXiNHandle = osThreadCreate(osThread(RXiN), NULL);
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	a837      	add	r0, sp, #220	; 0xdc
 8003dd8:	f7fe f97f 	bl	80020da <osThreadCreate>
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <main+0x498>)

  /* definition and creation of Heartbeat */
  osThreadDef(Heartbeat, StartHeartbeat, osPriorityHigh, 0, 128);
 8003dde:	f105 0740 	add.w	r7, r5, #64	; 0x40
  osThreadDef(RXPC, StartRXPC, osPriorityHigh, 0, 128);
  RXPCHandle = osThreadCreate(osThread(RXPC), NULL);

  /* definition and creation of RXiN */
  osThreadDef(RXiN, StartRXiN, osPriorityHigh, 0, 128);
  RXiNHandle = osThreadCreate(osThread(RXiN), NULL);
 8003de2:	6018      	str	r0, [r3, #0]

  /* definition and creation of Heartbeat */
  osThreadDef(Heartbeat, StartHeartbeat, osPriorityHigh, 0, 128);
 8003de4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003de6:	ae3c      	add	r6, sp, #240	; 0xf0
 8003de8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6033      	str	r3, [r6, #0]
  HeartbeatHandle = osThreadCreate(osThread(Heartbeat), NULL);
 8003dee:	4621      	mov	r1, r4
 8003df0:	a83c      	add	r0, sp, #240	; 0xf0
 8003df2:	f7fe f972 	bl	80020da <osThreadCreate>
 8003df6:	4b83      	ldr	r3, [pc, #524]	; (8004004 <main+0x49c>)

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
 8003df8:	f105 0754 	add.w	r7, r5, #84	; 0x54
  osThreadDef(RXiN, StartRXiN, osPriorityHigh, 0, 128);
  RXiNHandle = osThreadCreate(osThread(RXiN), NULL);

  /* definition and creation of Heartbeat */
  osThreadDef(Heartbeat, StartHeartbeat, osPriorityHigh, 0, 128);
  HeartbeatHandle = osThreadCreate(osThread(Heartbeat), NULL);
 8003dfc:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
 8003dfe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e00:	ae41      	add	r6, sp, #260	; 0x104
 8003e02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6033      	str	r3, [r6, #0]
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);
 8003e08:	4621      	mov	r1, r4
 8003e0a:	a841      	add	r0, sp, #260	; 0x104
 8003e0c:	f7fe f965 	bl	80020da <osThreadCreate>
 8003e10:	4b7d      	ldr	r3, [pc, #500]	; (8004008 <main+0x4a0>)

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
 8003e12:	f105 0768 	add.w	r7, r5, #104	; 0x68
  osThreadDef(Heartbeat, StartHeartbeat, osPriorityHigh, 0, 128);
  HeartbeatHandle = osThreadCreate(osThread(Heartbeat), NULL);

  /* definition and creation of TXMotor1 */
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);
 8003e16:	6018      	str	r0, [r3, #0]

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
 8003e18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e1a:	ae46      	add	r6, sp, #280	; 0x118
 8003e1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6033      	str	r3, [r6, #0]
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);
 8003e22:	4621      	mov	r1, r4
 8003e24:	a846      	add	r0, sp, #280	; 0x118
 8003e26:	f7fe f958 	bl	80020da <osThreadCreate>
 8003e2a:	4b78      	ldr	r3, [pc, #480]	; (800400c <main+0x4a4>)

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityHigh, 0, 128);
 8003e2c:	f105 077c 	add.w	r7, r5, #124	; 0x7c
  osThreadDef(TXMotor1, StartTXMotor1, osPriorityHigh, 0, 128);
  TXMotor1Handle = osThreadCreate(osThread(TXMotor1), NULL);

  /* definition and creation of TXMotor2 */
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);
 8003e30:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityHigh, 0, 128);
 8003e32:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e34:	ae4b      	add	r6, sp, #300	; 0x12c
 8003e36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6033      	str	r3, [r6, #0]
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	a84b      	add	r0, sp, #300	; 0x12c
 8003e40:	f7fe f94b 	bl	80020da <osThreadCreate>
 8003e44:	4b72      	ldr	r3, [pc, #456]	; (8004010 <main+0x4a8>)

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityHigh, 0, 128);
 8003e46:	f105 0790 	add.w	r7, r5, #144	; 0x90
  osThreadDef(TXMotor2, StartTXMotor2, osPriorityHigh, 0, 128);
  TXMotor2Handle = osThreadCreate(osThread(TXMotor2), NULL);

  /* definition and creation of RXMotor1 */
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityHigh, 0, 128);
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);
 8003e4a:	6018      	str	r0, [r3, #0]

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityHigh, 0, 128);
 8003e4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e4e:	ae50      	add	r6, sp, #320	; 0x140
 8003e50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6033      	str	r3, [r6, #0]
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);
 8003e56:	4621      	mov	r1, r4
 8003e58:	a850      	add	r0, sp, #320	; 0x140
 8003e5a:	f7fe f93e 	bl	80020da <osThreadCreate>
 8003e5e:	4b6d      	ldr	r3, [pc, #436]	; (8004014 <main+0x4ac>)

  /* definition and creation of Controller */
  osThreadDef(Controller, StartController, osPriorityHigh, 0, 500);
 8003e60:	f105 07a4 	add.w	r7, r5, #164	; 0xa4
  osThreadDef(RXMotor1, StartRXMotor1, osPriorityHigh, 0, 128);
  RXMotor1Handle = osThreadCreate(osThread(RXMotor1), NULL);

  /* definition and creation of RXMotor2 */
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityHigh, 0, 128);
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);
 8003e64:	6018      	str	r0, [r3, #0]

  /* definition and creation of Controller */
  osThreadDef(Controller, StartController, osPriorityHigh, 0, 500);
 8003e66:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e68:	ae55      	add	r6, sp, #340	; 0x154
 8003e6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6033      	str	r3, [r6, #0]
  ControllerHandle = osThreadCreate(osThread(Controller), NULL);
 8003e70:	4621      	mov	r1, r4
 8003e72:	a855      	add	r0, sp, #340	; 0x154
 8003e74:	f7fe f931 	bl	80020da <osThreadCreate>
 8003e78:	4b67      	ldr	r3, [pc, #412]	; (8004018 <main+0x4b0>)
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of ProcessQM1 */
  osMessageQDef(ProcessQM1, 1, uint32_t);
 8003e7a:	f105 06b8 	add.w	r6, r5, #184	; 0xb8
  osThreadDef(RXMotor2, StartRXMotor2, osPriorityHigh, 0, 128);
  RXMotor2Handle = osThreadCreate(osThread(RXMotor2), NULL);

  /* definition and creation of Controller */
  osThreadDef(Controller, StartController, osPriorityHigh, 0, 500);
  ControllerHandle = osThreadCreate(osThread(Controller), NULL);
 8003e7e:	6018      	str	r0, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of ProcessQM1 */
  osMessageQDef(ProcessQM1, 1, uint32_t);
 8003e80:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003e84:	ab08      	add	r3, sp, #32
 8003e86:	e883 0003 	stmia.w	r3, {r0, r1}
  ProcessQM1Handle = osMessageCreate(osMessageQ(ProcessQM1), NULL);
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe f950 	bl	8002132 <osMessageCreate>
 8003e92:	4b62      	ldr	r3, [pc, #392]	; (800401c <main+0x4b4>)
 8003e94:	6018      	str	r0, [r3, #0]

  /* definition and creation of ProcessQM2 */
  osMessageQDef(ProcessQM2, 1, uint32_t);
 8003e96:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003e9a:	ab0a      	add	r3, sp, #40	; 0x28
 8003e9c:	e883 0003 	stmia.w	r3, {r0, r1}
  ProcessQM2Handle = osMessageCreate(osMessageQ(ProcessQM2), NULL);
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f945 	bl	8002132 <osMessageCreate>
 8003ea8:	4b5d      	ldr	r3, [pc, #372]	; (8004020 <main+0x4b8>)
 8003eaa:	6018      	str	r0, [r3, #0]

  /* definition and creation of ProcessQiN */
  osMessageQDef(ProcessQiN, 1, uint32_t);
 8003eac:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003eb0:	ab0c      	add	r3, sp, #48	; 0x30
 8003eb2:	e883 0003 	stmia.w	r3, {r0, r1}
  ProcessQiNHandle = osMessageCreate(osMessageQ(ProcessQiN), NULL);
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe f93a 	bl	8002132 <osMessageCreate>
 8003ebe:	4b59      	ldr	r3, [pc, #356]	; (8004024 <main+0x4bc>)
 8003ec0:	6018      	str	r0, [r3, #0]

  /* definition and creation of ProcessQPC */
  osMessageQDef(ProcessQPC, 1, uint32_t);
 8003ec2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003ec6:	ab0e      	add	r3, sp, #56	; 0x38
 8003ec8:	e883 0003 	stmia.w	r3, {r0, r1}
  ProcessQPCHandle = osMessageCreate(osMessageQ(ProcessQPC), NULL);
 8003ecc:	4621      	mov	r1, r4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe f92f 	bl	8002132 <osMessageCreate>
 8003ed4:	4b54      	ldr	r3, [pc, #336]	; (8004028 <main+0x4c0>)

  /* definition and creation of TransmitM1Q */
  osMessageQDef(TransmitM1Q, 3, uint32_t);
 8003ed6:	35c0      	adds	r5, #192	; 0xc0
  osMessageQDef(ProcessQiN, 1, uint32_t);
  ProcessQiNHandle = osMessageCreate(osMessageQ(ProcessQiN), NULL);

  /* definition and creation of ProcessQPC */
  osMessageQDef(ProcessQPC, 1, uint32_t);
  ProcessQPCHandle = osMessageCreate(osMessageQ(ProcessQPC), NULL);
 8003ed8:	6018      	str	r0, [r3, #0]

  /* definition and creation of TransmitM1Q */
  osMessageQDef(TransmitM1Q, 3, uint32_t);
 8003eda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ede:	ab10      	add	r3, sp, #64	; 0x40
 8003ee0:	e883 0003 	stmia.w	r3, {r0, r1}
  TransmitM1QHandle = osMessageCreate(osMessageQ(TransmitM1Q), NULL);
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe f923 	bl	8002132 <osMessageCreate>
 8003eec:	4b4f      	ldr	r3, [pc, #316]	; (800402c <main+0x4c4>)
 8003eee:	6018      	str	r0, [r3, #0]

  /* definition and creation of TransmitM2Q */
  osMessageQDef(TransmitM2Q, 3, uint32_t);
 8003ef0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ef4:	ab12      	add	r3, sp, #72	; 0x48
 8003ef6:	e883 0003 	stmia.w	r3, {r0, r1}
  TransmitM2QHandle = osMessageCreate(osMessageQ(TransmitM2Q), NULL);
 8003efa:	4621      	mov	r1, r4
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe f918 	bl	8002132 <osMessageCreate>
 8003f02:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <main+0x4c8>)
 8003f04:	6018      	str	r0, [r3, #0]

  /* definition and creation of ICommandM1Q */
  osMessageQDef(ICommandM1Q, 1, uint32_t);
 8003f06:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003f0a:	ab14      	add	r3, sp, #80	; 0x50
 8003f0c:	e883 0003 	stmia.w	r3, {r0, r1}
  ICommandM1QHandle = osMessageCreate(osMessageQ(ICommandM1Q), NULL);
 8003f10:	4621      	mov	r1, r4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe f90d 	bl	8002132 <osMessageCreate>
 8003f18:	4b46      	ldr	r3, [pc, #280]	; (8004034 <main+0x4cc>)
 8003f1a:	6018      	str	r0, [r3, #0]

  /* definition and creation of ICommandM2Q */
  osMessageQDef(ICommandM2Q, 1, uint32_t);
 8003f1c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003f20:	ab16      	add	r3, sp, #88	; 0x58
 8003f22:	e883 0003 	stmia.w	r3, {r0, r1}
  ICommandM2QHandle = osMessageCreate(osMessageQ(ICommandM2Q), NULL);
 8003f26:	4621      	mov	r1, r4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe f902 	bl	8002132 <osMessageCreate>
 8003f2e:	4b42      	ldr	r3, [pc, #264]	; (8004038 <main+0x4d0>)
 8003f30:	6018      	str	r0, [r3, #0]

  /* definition and creation of PCommandM1Q */
  osMessageQDef(PCommandM1Q, 1, uint32_t);
 8003f32:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003f36:	ab18      	add	r3, sp, #96	; 0x60
 8003f38:	e883 0003 	stmia.w	r3, {r0, r1}
  PCommandM1QHandle = osMessageCreate(osMessageQ(PCommandM1Q), NULL);
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe f8f7 	bl	8002132 <osMessageCreate>
 8003f44:	4b3d      	ldr	r3, [pc, #244]	; (800403c <main+0x4d4>)
 8003f46:	6018      	str	r0, [r3, #0]

  /* definition and creation of PCommandM2Q */
  osMessageQDef(PCommandM2Q, 1, uint32_t);
 8003f48:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003f4c:	ab1a      	add	r3, sp, #104	; 0x68
 8003f4e:	e883 0003 	stmia.w	r3, {r0, r1}
  PCommandM2QHandle = osMessageCreate(osMessageQ(PCommandM2Q), NULL);
 8003f52:	4621      	mov	r1, r4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f8ec 	bl	8002132 <osMessageCreate>
 8003f5a:	4b39      	ldr	r3, [pc, #228]	; (8004040 <main+0x4d8>)
 8003f5c:	6018      	str	r0, [r3, #0]

  /* definition and creation of CommandM1Q */
  osMessageQDef(CommandM1Q, 3, uint32_t);
 8003f5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f62:	ab1c      	add	r3, sp, #112	; 0x70
 8003f64:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandM1QHandle = osMessageCreate(osMessageQ(CommandM1Q), NULL);
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe f8e1 	bl	8002132 <osMessageCreate>
 8003f70:	4b34      	ldr	r3, [pc, #208]	; (8004044 <main+0x4dc>)
 8003f72:	6018      	str	r0, [r3, #0]

  /* definition and creation of CommandM2Q */
  osMessageQDef(CommandM2Q, 3, uint32_t);
 8003f74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f78:	ab1e      	add	r3, sp, #120	; 0x78
 8003f7a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandM2QHandle = osMessageCreate(osMessageQ(CommandM2Q), NULL);
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe f8d6 	bl	8002132 <osMessageCreate>
 8003f86:	4b30      	ldr	r3, [pc, #192]	; (8004048 <main+0x4e0>)
 8003f88:	6018      	str	r0, [r3, #0]

  /* definition and creation of ControllerQ */
  osMessageQDef(ControllerQ, 1, uint32_t);
 8003f8a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003f8e:	ab20      	add	r3, sp, #128	; 0x80
 8003f90:	e883 0003 	stmia.w	r3, {r0, r1}
  ControllerQHandle = osMessageCreate(osMessageQ(ControllerQ), NULL);
 8003f94:	4621      	mov	r1, r4
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe f8cb 	bl	8002132 <osMessageCreate>
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <main+0x4e4>)
 8003f9e:	6018      	str	r0, [r3, #0]

  /* definition and creation of ControlM1Q */
  osMessageQDef(ControlM1Q, 1, uint32_t);
 8003fa0:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003fa4:	ab22      	add	r3, sp, #136	; 0x88
 8003fa6:	e883 0003 	stmia.w	r3, {r0, r1}
  ControlM1QHandle = osMessageCreate(osMessageQ(ControlM1Q), NULL);
 8003faa:	4621      	mov	r1, r4
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe f8c0 	bl	8002132 <osMessageCreate>
 8003fb2:	4b27      	ldr	r3, [pc, #156]	; (8004050 <main+0x4e8>)
 8003fb4:	6018      	str	r0, [r3, #0]

  /* definition and creation of ControlM2Q */
  osMessageQDef(ControlM2Q, 1, uint32_t);
 8003fb6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003fba:	ab24      	add	r3, sp, #144	; 0x90
 8003fbc:	e883 0003 	stmia.w	r3, {r0, r1}
  ControlM2QHandle = osMessageCreate(osMessageQ(ControlM2Q), NULL);
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe f8b5 	bl	8002132 <osMessageCreate>
 8003fc8:	4b22      	ldr	r3, [pc, #136]	; (8004054 <main+0x4ec>)
 8003fca:	6018      	str	r0, [r3, #0]

  /* definition and creation of ProcessQControl */
  osMessageQDef(ProcessQControl, 1, uint32_t);
 8003fcc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003fd0:	ab26      	add	r3, sp, #152	; 0x98
 8003fd2:	e883 0003 	stmia.w	r3, {r0, r1}
  ProcessQControlHandle = osMessageCreate(osMessageQ(ProcessQControl), NULL);
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	4621      	mov	r1, r4
 8003fda:	f7fe f8aa 	bl	8002132 <osMessageCreate>
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <main+0x4f0>)
 8003fe0:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8003fe2:	f7fe f875 	bl	80020d0 <osKernelStart>
 8003fe6:	e7fe      	b.n	8003fe6 <main+0x47e>
 8003fe8:	2000ca60 	.word	0x2000ca60
 8003fec:	08006ac4 	.word	0x08006ac4
 8003ff0:	2000ca1c 	.word	0x2000ca1c
 8003ff4:	2000c388 	.word	0x2000c388
 8003ff8:	2000ca08 	.word	0x2000ca08
 8003ffc:	2000cb90 	.word	0x2000cb90
 8004000:	2000c504 	.word	0x2000c504
 8004004:	2000caa4 	.word	0x2000caa4
 8004008:	2000c5c8 	.word	0x2000c5c8
 800400c:	2000c458 	.word	0x2000c458
 8004010:	2000ca18 	.word	0x2000ca18
 8004014:	2000ca0c 	.word	0x2000ca0c
 8004018:	2000c664 	.word	0x2000c664
 800401c:	2000ca00 	.word	0x2000ca00
 8004020:	2000cb24 	.word	0x2000cb24
 8004024:	2000c5cc 	.word	0x2000c5cc
 8004028:	2000c31c 	.word	0x2000c31c
 800402c:	2000c508 	.word	0x2000c508
 8004030:	2000c9f4 	.word	0x2000c9f4
 8004034:	2000ca14 	.word	0x2000ca14
 8004038:	2000c45c 	.word	0x2000c45c
 800403c:	2000cadc 	.word	0x2000cadc
 8004040:	2000ca04 	.word	0x2000ca04
 8004044:	2000c6cc 	.word	0x2000c6cc
 8004048:	2000cbfc 	.word	0x2000cbfc
 800404c:	2000c9f8 	.word	0x2000c9f8
 8004050:	2000cc68 	.word	0x2000cc68
 8004054:	2000cae0 	.word	0x2000cae0
 8004058:	2000c3ec 	.word	0x2000c3ec

0800405c <BaseCommandCompile>:
{
        val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF );
        return (val << 16) | ((val >> 16) & 0xFFFF);
}

void BaseCommandCompile(uint8_t n, uint8_t SeqBits, uint8_t ComBits, uint8_t INDOFF1, uint8_t INDOFF2, uint8_t *DATA, uint8_t LEN, uint8_t SNIP_LEN){
 800405c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	4691      	mov	r9, r2
        memset(&BaseCommand[n], 0, sizeof(BaseCommand[0]));
 8004062:	4c37      	ldr	r4, [pc, #220]	; (8004140 <BaseCommandCompile+0xe4>)
{
        val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF );
        return (val << 16) | ((val >> 16) & 0xFFFF);
}

void BaseCommandCompile(uint8_t n, uint8_t SeqBits, uint8_t ComBits, uint8_t INDOFF1, uint8_t INDOFF2, uint8_t *DATA, uint8_t LEN, uint8_t SNIP_LEN){
 8004064:	9301      	str	r3, [sp, #4]
        memset(&BaseCommand[n], 0, sizeof(BaseCommand[0]));
 8004066:	220e      	movs	r2, #14
 8004068:	fb02 fa00 	mul.w	sl, r2, r0
 800406c:	eb0a 0504 	add.w	r5, sl, r4
{
        val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF );
        return (val << 16) | ((val >> 16) & 0xFFFF);
}

void BaseCommandCompile(uint8_t n, uint8_t SeqBits, uint8_t ComBits, uint8_t INDOFF1, uint8_t INDOFF2, uint8_t *DATA, uint8_t LEN, uint8_t SNIP_LEN){
 8004070:	468b      	mov	fp, r1
 8004072:	4606      	mov	r6, r0
        memset(&BaseCommand[n], 0, sizeof(BaseCommand[0]));
 8004074:	2100      	movs	r1, #0
 8004076:	4628      	mov	r0, r5
{
        val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF );
        return (val << 16) | ((val >> 16) & 0xFFFF);
}

void BaseCommandCompile(uint8_t n, uint8_t SeqBits, uint8_t ComBits, uint8_t INDOFF1, uint8_t INDOFF2, uint8_t *DATA, uint8_t LEN, uint8_t SNIP_LEN){
 8004078:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
 800407c:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
        memset(&BaseCommand[n], 0, sizeof(BaseCommand[0]));
 8004080:	f001 fe88 	bl	8005d94 <memset>
        //SeqBits = 0bXXXX according to op-code

        BaseCommand[n].START[0] = 0xA5;
        BaseCommand[n].START[1] = 0x3F;
        BaseCommand[n].CB = (SeqBits<<2 | ComBits);
        BaseCommand[n].INDOFF[0] = INDOFF1;
 8004084:	9b01      	ldr	r3, [sp, #4]
 8004086:	70eb      	strb	r3, [r5, #3]
        memset(&BaseCommand[n], 0, sizeof(BaseCommand[0]));

        //ComBits = 0x02 for set and 0x01 for read
        //SeqBits = 0bXXXX according to op-code

        BaseCommand[n].START[0] = 0xA5;
 8004088:	22a5      	movs	r2, #165	; 0xa5
 800408a:	f80a 2004 	strb.w	r2, [sl, r4]
        BaseCommand[n].START[1] = 0x3F;
        BaseCommand[n].CB = (SeqBits<<2 | ComBits);
        BaseCommand[n].INDOFF[0] = INDOFF1;
        BaseCommand[n].INDOFF[1] = INDOFF2;
 800408e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004092:	712b      	strb	r3, [r5, #4]

        //ComBits = 0x02 for set and 0x01 for read
        //SeqBits = 0bXXXX according to op-code

        BaseCommand[n].START[0] = 0xA5;
        BaseCommand[n].START[1] = 0x3F;
 8004094:	223f      	movs	r2, #63	; 0x3f
        BaseCommand[n].CB = (SeqBits<<2 | ComBits);
 8004096:	ea49 098b 	orr.w	r9, r9, fp, lsl #2

        //ComBits = 0x02 for set and 0x01 for read
        //SeqBits = 0bXXXX according to op-code

        BaseCommand[n].START[0] = 0xA5;
        BaseCommand[n].START[1] = 0x3F;
 800409a:	706a      	strb	r2, [r5, #1]
        BaseCommand[n].CB = (SeqBits<<2 | ComBits);
 800409c:	f885 9002 	strb.w	r9, [r5, #2]
        BaseCommand[n].INDOFF[0] = INDOFF1;
        BaseCommand[n].INDOFF[1] = INDOFF2;
        BaseCommand[n].LEN = LEN;
        CALC_CRCBase = crcCalc(BaseCommand[n].START, 0, 6, 1);
 80040a0:	2301      	movs	r3, #1
 80040a2:	2206      	movs	r2, #6
 80040a4:	2100      	movs	r1, #0
        BaseCommand[n].START[0] = 0xA5;
        BaseCommand[n].START[1] = 0x3F;
        BaseCommand[n].CB = (SeqBits<<2 | ComBits);
        BaseCommand[n].INDOFF[0] = INDOFF1;
        BaseCommand[n].INDOFF[1] = INDOFF2;
        BaseCommand[n].LEN = LEN;
 80040a6:	f885 8005 	strb.w	r8, [r5, #5]
        CALC_CRCBase = crcCalc(BaseCommand[n].START, 0, 6, 1);
 80040aa:	4628      	mov	r0, r5
 80040ac:	f7ff fafe 	bl	80036ac <crcCalc>
        WORDtoBYTEBase.HALFWORD = CALC_CRCBase;
 80040b0:	4b24      	ldr	r3, [pc, #144]	; (8004144 <BaseCommandCompile+0xe8>)
        BaseCommand[n].START[1] = 0x3F;
        BaseCommand[n].CB = (SeqBits<<2 | ComBits);
        BaseCommand[n].INDOFF[0] = INDOFF1;
        BaseCommand[n].INDOFF[1] = INDOFF2;
        BaseCommand[n].LEN = LEN;
        CALC_CRCBase = crcCalc(BaseCommand[n].START, 0, 6, 1);
 80040b2:	4a25      	ldr	r2, [pc, #148]	; (8004148 <BaseCommandCompile+0xec>)
        WORDtoBYTEBase.HALFWORD = CALC_CRCBase;
 80040b4:	8018      	strh	r0, [r3, #0]
 80040b6:	4699      	mov	r9, r3
        BaseCommand[n].CRC1[0] = WORDtoBYTEBase.BYTE[1];
        BaseCommand[n].CRC1[1] = WORDtoBYTEBase.BYTE[0];

        if(DATA != NULL) {
 80040b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        BaseCommand[n].START[1] = 0x3F;
        BaseCommand[n].CB = (SeqBits<<2 | ComBits);
        BaseCommand[n].INDOFF[0] = INDOFF1;
        BaseCommand[n].INDOFF[1] = INDOFF2;
        BaseCommand[n].LEN = LEN;
        CALC_CRCBase = crcCalc(BaseCommand[n].START, 0, 6, 1);
 80040ba:	6010      	str	r0, [r2, #0]
        WORDtoBYTEBase.HALFWORD = CALC_CRCBase;
        BaseCommand[n].CRC1[0] = WORDtoBYTEBase.BYTE[1];
 80040bc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80040c0:	71a9      	strb	r1, [r5, #6]
        BaseCommand[n].CRC1[1] = WORDtoBYTEBase.BYTE[0];
 80040c2:	71e8      	strb	r0, [r5, #7]
 80040c4:	4692      	mov	sl, r2

        if(DATA != NULL) {
 80040c6:	b313      	cbz	r3, 800410e <BaseCommandCompile+0xb2>
 80040c8:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
                for(int i = 0; i<LEN*2; i++) {
 80040cc:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80040d0:	0052      	lsls	r2, r2, #1
 80040d2:	2300      	movs	r3, #0
 80040d4:	4283      	cmp	r3, r0
 80040d6:	d006      	beq.n	80040e6 <BaseCommandCompile+0x8a>
                        BaseCommand[n].DATA[i] = DATA[i];
 80040d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040da:	5ccd      	ldrb	r5, [r1, r3]
 80040dc:	1899      	adds	r1, r3, r2
 80040de:	4421      	add	r1, r4
        WORDtoBYTEBase.HALFWORD = CALC_CRCBase;
        BaseCommand[n].CRC1[0] = WORDtoBYTEBase.BYTE[1];
        BaseCommand[n].CRC1[1] = WORDtoBYTEBase.BYTE[0];

        if(DATA != NULL) {
                for(int i = 0; i<LEN*2; i++) {
 80040e0:	3301      	adds	r3, #1
                        BaseCommand[n].DATA[i] = DATA[i];
 80040e2:	720d      	strb	r5, [r1, #8]
 80040e4:	e7f6      	b.n	80040d4 <BaseCommandCompile+0x78>
                }
                CALC_CRCBase = crcCalc(BaseCommand[n].DATA, 0, LEN*2, 1);
 80040e6:	250e      	movs	r5, #14
 80040e8:	4375      	muls	r5, r6
 80040ea:	2301      	movs	r3, #1
 80040ec:	f105 0008 	add.w	r0, r5, #8
 80040f0:	fa08 f203 	lsl.w	r2, r8, r3
 80040f4:	2100      	movs	r1, #0
 80040f6:	4420      	add	r0, r4
 80040f8:	f7ff fad8 	bl	80036ac <crcCalc>
                WORDtoBYTEBase.HALFWORD = CALC_CRCBase;
                BaseCommand[n].CRC2[0] = WORDtoBYTEBase.BYTE[1];
 80040fc:	4425      	add	r5, r4
 80040fe:	f3c0 2307 	ubfx	r3, r0, #8, #8

        if(DATA != NULL) {
                for(int i = 0; i<LEN*2; i++) {
                        BaseCommand[n].DATA[i] = DATA[i];
                }
                CALC_CRCBase = crcCalc(BaseCommand[n].DATA, 0, LEN*2, 1);
 8004102:	f8ca 0000 	str.w	r0, [sl]
                WORDtoBYTEBase.HALFWORD = CALC_CRCBase;
 8004106:	f8a9 0000 	strh.w	r0, [r9]
                BaseCommand[n].CRC2[0] = WORDtoBYTEBase.BYTE[1];
 800410a:	732b      	strb	r3, [r5, #12]
                BaseCommand[n].CRC2[1] = WORDtoBYTEBase.BYTE[0];
 800410c:	7368      	strb	r0, [r5, #13]
        }

        SNIP = SNIP_LEN;
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <BaseCommandCompile+0xf0>)
 8004110:	701f      	strb	r7, [r3, #0]

        memcpy(&BaseCommand[n].DATA[4-SNIP], BaseCommand[n].CRC2, 2);
 8004112:	230e      	movs	r3, #14
 8004114:	435e      	muls	r6, r3
 8004116:	f106 0108 	add.w	r1, r6, #8
 800411a:	1863      	adds	r3, r4, r1
 800411c:	1bf6      	subs	r6, r6, r7
 800411e:	360c      	adds	r6, #12
 8004120:	889a      	ldrh	r2, [r3, #4]
 8004122:	53a2      	strh	r2, [r4, r6]

        if(SNIP==2) {
 8004124:	2f02      	cmp	r7, #2
 8004126:	d101      	bne.n	800412c <BaseCommandCompile+0xd0>
                memset(&BaseCommand[n].CRC2, 0, 2);
 8004128:	2200      	movs	r2, #0
 800412a:	e004      	b.n	8004136 <BaseCommandCompile+0xda>
        }
        if(SNIP==4) {
 800412c:	2f04      	cmp	r7, #4
 800412e:	d103      	bne.n	8004138 <BaseCommandCompile+0xdc>
                memset(&BaseCommand[n].DATA, 0, 4);
 8004130:	4803      	ldr	r0, [pc, #12]	; (8004140 <BaseCommandCompile+0xe4>)
 8004132:	2200      	movs	r2, #0
 8004134:	500a      	str	r2, [r1, r0]
                memset(&BaseCommand[n].CRC2, 0, 2);
 8004136:	809a      	strh	r2, [r3, #4]
        }
}
 8004138:	b003      	add	sp, #12
 800413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413e:	bf00      	nop
 8004140:	2000c6d4 	.word	0x2000c6d4
 8004144:	2000c530 	.word	0x2000c530
 8004148:	2000c6d0 	.word	0x2000c6d0
 800414c:	2000c668 	.word	0x2000c668

08004150 <StartRXPC>:
  /* USER CODE END StartTXPC */
}

/* StartRXPC function */
void StartRXPC(void const * argument)
{
 8004150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartRXPC */

    RXPacket.START[0] = 0x7E;
 8004154:	4cc2      	ldr	r4, [pc, #776]	; (8004460 <StartRXPC+0x310>)
    RXPacket.START[1] = 0x5B;
 8004156:	225b      	movs	r2, #91	; 0x5b
/* StartRXPC function */
void StartRXPC(void const * argument)
{
  /* USER CODE BEGIN StartRXPC */

    RXPacket.START[0] = 0x7E;
 8004158:	237e      	movs	r3, #126	; 0x7e
    RXPacket.START[1] = 0x5B;
 800415a:	7062      	strb	r2, [r4, #1]
  /* USER CODE END StartTXPC */
}

/* StartRXPC function */
void StartRXPC(void const * argument)
{
 800415c:	b085      	sub	sp, #20
  /* USER CODE BEGIN StartRXPC */

    RXPacket.START[0] = 0x7E;
    RXPacket.START[1] = 0x5B;

    RXPacket.STOP[0] = 0x5D;
 800415e:	225d      	movs	r2, #93	; 0x5d
            uint8_t BYTE[4];
    } WORDtoBYTE;

    uint8_t rcvdCount;

    HAL_Delay(1000);
 8004160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
/* StartRXPC function */
void StartRXPC(void const * argument)
{
  /* USER CODE BEGIN StartRXPC */

    RXPacket.START[0] = 0x7E;
 8004164:	7023      	strb	r3, [r4, #0]
    RXPacket.START[1] = 0x5B;

    RXPacket.STOP[0] = 0x5D;
 8004166:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    RXPacket.STOP[1] = 0x7E;
 800416a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            uint8_t BYTE[4];
    } WORDtoBYTE;

    uint8_t rcvdCount;

    HAL_Delay(1000);
 800416e:	f7fc fd37 	bl	8000be0 <HAL_Delay>
    /* Infinite loop */
    for(;; )
    {
            HAL_UART_Receive_DMA(&PC_UART, RXBufPC, sizeof(RXPacket));
            //HAL_DMA_Start(&hdma_uart4_rx, (uint32_t)(&(UART4->DR)), (uint32_t)(&RXBufPC), sizeof(RXPacket));
            if(xSemaphoreTake( PCRXHandle, portMAX_DELAY ) == pdTRUE) {
 8004172:	4dbc      	ldr	r5, [pc, #752]	; (8004464 <StartRXPC+0x314>)
//                __HAL_USART_ENABLE_IT(&huart3, USART_IT_IDLE);

    /* Infinite loop */
    for(;; )
    {
            HAL_UART_Receive_DMA(&PC_UART, RXBufPC, sizeof(RXPacket));
 8004174:	49bc      	ldr	r1, [pc, #752]	; (8004468 <StartRXPC+0x318>)
 8004176:	48bd      	ldr	r0, [pc, #756]	; (800446c <StartRXPC+0x31c>)
 8004178:	2245      	movs	r2, #69	; 0x45
 800417a:	f7fd fe17 	bl	8001dac <HAL_UART_Receive_DMA>
            //HAL_DMA_Start(&hdma_uart4_rx, (uint32_t)(&(UART4->DR)), (uint32_t)(&RXBufPC), sizeof(RXPacket));
            if(xSemaphoreTake( PCRXHandle, portMAX_DELAY ) == pdTRUE) {
 800417e:	2300      	movs	r3, #0
 8004180:	f04f 32ff 	mov.w	r2, #4294967295
 8004184:	4619      	mov	r1, r3
 8004186:	6828      	ldr	r0, [r5, #0]
 8004188:	f7fe fafe 	bl	8002788 <xQueueGenericReceive>
 800418c:	2801      	cmp	r0, #1
 800418e:	4607      	mov	r7, r0
 8004190:	d1f0      	bne.n	8004174 <StartRXPC+0x24>
                    //HAL_UART_EndDMA_RX(&huart4);

                    //xQueueReset(TransmitM1QHandle);
                    //xQueueReset(TransmitM2QHandle);

                    START_INDEX = findBytes(RXBufPC, rcvdCount, RXPacket.START, 2, 1);
 8004192:	4db3      	ldr	r5, [pc, #716]	; (8004460 <StartRXPC+0x310>)
 8004194:	9000      	str	r0, [sp, #0]
 8004196:	2145      	movs	r1, #69	; 0x45
 8004198:	2302      	movs	r3, #2
 800419a:	462a      	mov	r2, r5
 800419c:	48b2      	ldr	r0, [pc, #712]	; (8004468 <StartRXPC+0x318>)
 800419e:	f7ff faad 	bl	80036fc <findBytes>
                    if(START_INDEX>=0) {
 80041a2:	1e01      	subs	r1, r0, #0
 80041a4:	dbe5      	blt.n	8004172 <StartRXPC+0x22>

                            memcpy(RXPacketPTR, &RXBufPC[START_INDEX], sizeof(RXPacket));
 80041a6:	4bb0      	ldr	r3, [pc, #704]	; (8004468 <StartRXPC+0x318>)
                            RX_DATA_VALID = 0;
 80041a8:	f8df 8310 	ldr.w	r8, [pc, #784]	; 80044bc <StartRXPC+0x36c>
                    //xQueueReset(TransmitM2QHandle);

                    START_INDEX = findBytes(RXBufPC, rcvdCount, RXPacket.START, 2, 1);
                    if(START_INDEX>=0) {

                            memcpy(RXPacketPTR, &RXBufPC[START_INDEX], sizeof(RXPacket));
 80041ac:	4419      	add	r1, r3
 80041ae:	4bb0      	ldr	r3, [pc, #704]	; (8004470 <StartRXPC+0x320>)
 80041b0:	2245      	movs	r2, #69	; 0x45
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	f001 fde3 	bl	8005d7e <memcpy>
                            RX_DATA_VALID = 0;

                            WORDtoBYTE.BYTE[1] = RXPacket.CRCCheck[0];
 80041b8:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 80041bc:	f363 2a0f 	bfi	sl, r3, #8, #8
                            WORDtoBYTE.BYTE[0] = RXPacket.CRCCheck[1];
 80041c0:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42

                    START_INDEX = findBytes(RXBufPC, rcvdCount, RXPacket.START, 2, 1);
                    if(START_INDEX>=0) {

                            memcpy(RXPacketPTR, &RXBufPC[START_INDEX], sizeof(RXPacket));
                            RX_DATA_VALID = 0;
 80041c4:	2600      	movs	r6, #0

                            WORDtoBYTE.BYTE[1] = RXPacket.CRCCheck[0];
                            WORDtoBYTE.BYTE[0] = RXPacket.CRCCheck[1];
 80041c6:	f363 0a07 	bfi	sl, r3, #0, #8
                            CALC_CRC = crcCalc(&RXPacket.OPCODE, 0, PAYLOAD_RX, 0);
 80041ca:	223f      	movs	r2, #63	; 0x3f
 80041cc:	4633      	mov	r3, r6
 80041ce:	4631      	mov	r1, r6
 80041d0:	1ca8      	adds	r0, r5, #2

                    START_INDEX = findBytes(RXBufPC, rcvdCount, RXPacket.START, 2, 1);
                    if(START_INDEX>=0) {

                            memcpy(RXPacketPTR, &RXBufPC[START_INDEX], sizeof(RXPacket));
                            RX_DATA_VALID = 0;
 80041d2:	f888 6000 	strb.w	r6, [r8]

                            WORDtoBYTE.BYTE[1] = RXPacket.CRCCheck[0];
                            WORDtoBYTE.BYTE[0] = RXPacket.CRCCheck[1];
                            CALC_CRC = crcCalc(&RXPacket.OPCODE, 0, PAYLOAD_RX, 0);
 80041d6:	f7ff fa69 	bl	80036ac <crcCalc>

                            if(WORDtoBYTE.HALFWORD==CALC_CRC) {
 80041da:	fa1f f38a 	uxth.w	r3, sl
 80041de:	4298      	cmp	r0, r3
 80041e0:	d1c7      	bne.n	8004172 <StartRXPC+0x22>
                                    RX_DATA_VALID = 1;
                                    START = 0;
 80041e2:	4ba4      	ldr	r3, [pc, #656]	; (8004474 <StartRXPC+0x324>)
                                    TRIGGER = 0;
 80041e4:	4aa4      	ldr	r2, [pc, #656]	; (8004478 <StartRXPC+0x328>)
                                    switch(RXPacket.OPCODE) {
 80041e6:	78a9      	ldrb	r1, [r5, #2]
                            WORDtoBYTE.BYTE[1] = RXPacket.CRCCheck[0];
                            WORDtoBYTE.BYTE[0] = RXPacket.CRCCheck[1];
                            CALC_CRC = crcCalc(&RXPacket.OPCODE, 0, PAYLOAD_RX, 0);

                            if(WORDtoBYTE.HALFWORD==CALC_CRC) {
                                    RX_DATA_VALID = 1;
 80041e8:	f888 7000 	strb.w	r7, [r8]
                                    START = 0;
 80041ec:	701e      	strb	r6, [r3, #0]
                                    TRIGGER = 0;
 80041ee:	7016      	strb	r6, [r2, #0]
                                    switch(RXPacket.OPCODE) {
 80041f0:	291f      	cmp	r1, #31
 80041f2:	d8be      	bhi.n	8004172 <StartRXPC+0x22>
 80041f4:	a001      	add	r0, pc, #4	; (adr r0, 80041fc <StartRXPC+0xac>)
 80041f6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	0800427d 	.word	0x0800427d
 8004200:	080042a5 	.word	0x080042a5
 8004204:	080042c1 	.word	0x080042c1
 8004208:	08004173 	.word	0x08004173
 800420c:	08004173 	.word	0x08004173
 8004210:	08004173 	.word	0x08004173
 8004214:	08004173 	.word	0x08004173
 8004218:	08004173 	.word	0x08004173
 800421c:	080043bd 	.word	0x080043bd
 8004220:	080043f1 	.word	0x080043f1
 8004224:	0800441d 	.word	0x0800441d
 8004228:	08004173 	.word	0x08004173
 800422c:	08004173 	.word	0x08004173
 8004230:	080044d5 	.word	0x080044d5
 8004234:	08004173 	.word	0x08004173
 8004238:	08004173 	.word	0x08004173
 800423c:	08004575 	.word	0x08004575
 8004240:	08004173 	.word	0x08004173
 8004244:	08004173 	.word	0x08004173
 8004248:	08004173 	.word	0x08004173
 800424c:	080042f1 	.word	0x080042f1
 8004250:	08004173 	.word	0x08004173
 8004254:	08004357 	.word	0x08004357
 8004258:	08004173 	.word	0x08004173
 800425c:	08004173 	.word	0x08004173
 8004260:	08004173 	.word	0x08004173
 8004264:	08004173 	.word	0x08004173
 8004268:	08004173 	.word	0x08004173
 800426c:	08004173 	.word	0x08004173
 8004270:	08004173 	.word	0x08004173
 8004274:	080045d1 	.word	0x080045d1
 8004278:	080045dd 	.word	0x080045dd
                                    case KILL_BRIDGE:
                                            START = 0;
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0001, 0x02, 0x01, 0x00, KILL_BRIDGE_DATA, 1, 2);
 800427c:	2301      	movs	r3, #1
 800427e:	2202      	movs	r2, #2
 8004280:	497e      	ldr	r1, [pc, #504]	; (800447c <StartRXPC+0x32c>)
 8004282:	9203      	str	r2, [sp, #12]
 8004284:	2500      	movs	r5, #0
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	9101      	str	r1, [sp, #4]
 800428a:	9500      	str	r5, [sp, #0]
 800428c:	4619      	mov	r1, r3
 800428e:	4628      	mov	r0, r5
 8004290:	f7ff fee4 	bl	800405c <BaseCommandCompile>
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 8004294:	78a2      	ldrb	r2, [r4, #2]
 8004296:	4b7a      	ldr	r3, [pc, #488]	; (8004480 <StartRXPC+0x330>)
 8004298:	4e7a      	ldr	r6, [pc, #488]	; (8004484 <StartRXPC+0x334>)
 800429a:	210e      	movs	r1, #14
 800429c:	fb01 3302 	mla	r3, r1, r2, r3
 80042a0:	6033      	str	r3, [r6, #0]
 80042a2:	e09a      	b.n	80043da <StartRXPC+0x28a>
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case WRITE_ENABLE:
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80042a4:	4d77      	ldr	r5, [pc, #476]	; (8004484 <StartRXPC+0x334>)
 80042a6:	4b78      	ldr	r3, [pc, #480]	; (8004488 <StartRXPC+0x338>)
 80042a8:	602b      	str	r3, [r5, #0]
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0010, 0x02, 0x07, 0x00, WRITE_ENABLE_DATA, 1, 2);
 80042aa:	2202      	movs	r2, #2
 80042ac:	4b77      	ldr	r3, [pc, #476]	; (800448c <StartRXPC+0x33c>)
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	2001      	movs	r0, #1
 80042b2:	2600      	movs	r6, #0
 80042b4:	9203      	str	r2, [sp, #12]
 80042b6:	9002      	str	r0, [sp, #8]
 80042b8:	9600      	str	r6, [sp, #0]
 80042ba:	2307      	movs	r3, #7
 80042bc:	4611      	mov	r1, r2
 80042be:	e00c      	b.n	80042da <StartRXPC+0x18a>
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case BRIDGE_ENABLE:
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80042c0:	4d70      	ldr	r5, [pc, #448]	; (8004484 <StartRXPC+0x334>)
 80042c2:	4b73      	ldr	r3, [pc, #460]	; (8004490 <StartRXPC+0x340>)
 80042c4:	602b      	str	r3, [r5, #0]
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0100, 0x02, 0x01, 0x00, BRIDGE_ENABLE_DATA, 1, 2);
 80042c6:	2202      	movs	r2, #2
 80042c8:	4972      	ldr	r1, [pc, #456]	; (8004494 <StartRXPC+0x344>)
 80042ca:	9101      	str	r1, [sp, #4]
 80042cc:	2301      	movs	r3, #1
 80042ce:	2600      	movs	r6, #0
 80042d0:	9203      	str	r2, [sp, #12]
 80042d2:	9302      	str	r3, [sp, #8]
 80042d4:	9600      	str	r6, [sp, #0]
 80042d6:	2104      	movs	r1, #4
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff febf 	bl	800405c <BaseCommandCompile>
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80042de:	486e      	ldr	r0, [pc, #440]	; (8004498 <StartRXPC+0x348>)
 80042e0:	4633      	mov	r3, r6
 80042e2:	2205      	movs	r2, #5
 80042e4:	4629      	mov	r1, r5
 80042e6:	6800      	ldr	r0, [r0, #0]
 80042e8:	f7fe f94a 	bl	8002580 <xQueueGenericSend>
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80042ec:	4633      	mov	r3, r6
 80042ee:	e168      	b.n	80045c2 <StartRXPC+0x472>
                                            break;
                                    case CURRENT_COMMAND:
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80042f0:	4e64      	ldr	r6, [pc, #400]	; (8004484 <StartRXPC+0x334>)
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0011, 0x02, 0x45, 0x02, RXPacket.M1C, 2, 0);
 80042f2:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80044c0 <StartRXPC+0x370>
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0100, 0x02, 0x01, 0x00, BRIDGE_ENABLE_DATA, 1, 2);
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case CURRENT_COMMAND:
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80042f6:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80044c4 <StartRXPC+0x374>
 80042fa:	f8c6 9000 	str.w	r9, [r6]
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0011, 0x02, 0x45, 0x02, RXPacket.M1C, 2, 0);
 80042fe:	2502      	movs	r5, #2
 8004300:	2700      	movs	r7, #0
 8004302:	2345      	movs	r3, #69	; 0x45
 8004304:	462a      	mov	r2, r5
 8004306:	2103      	movs	r1, #3
 8004308:	2014      	movs	r0, #20
 800430a:	9703      	str	r7, [sp, #12]
 800430c:	9502      	str	r5, [sp, #8]
 800430e:	e88d 0120 	stmia.w	sp, {r5, r8}
 8004312:	f7ff fea3 	bl	800405c <BaseCommandCompile>
                                            xQueueOverwrite( ICommandM1QHandle, &BaseCommandPTR);
 8004316:	4861      	ldr	r0, [pc, #388]	; (800449c <StartRXPC+0x34c>)
 8004318:	462b      	mov	r3, r5
 800431a:	463a      	mov	r2, r7
 800431c:	4631      	mov	r1, r6
 800431e:	6800      	ldr	r0, [r0, #0]
 8004320:	f7fe f92e 	bl	8002580 <xQueueGenericSend>

                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE+1];
 8004324:	78a0      	ldrb	r0, [r4, #2]
 8004326:	f5a9 798c 	sub.w	r9, r9, #280	; 0x118
 800432a:	3001      	adds	r0, #1
 800432c:	230e      	movs	r3, #14
 800432e:	fb03 9300 	mla	r3, r3, r0, r9
 8004332:	6033      	str	r3, [r6, #0]
                                            BaseCommandCompile(RXPacket.OPCODE+1, 0b0011, 0x02, 0x45, 0x02, RXPacket.M2C, 2, 0);
 8004334:	f108 0304 	add.w	r3, r8, #4
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	462a      	mov	r2, r5
 800433c:	2345      	movs	r3, #69	; 0x45
 800433e:	2103      	movs	r1, #3
 8004340:	b2c0      	uxtb	r0, r0
 8004342:	9703      	str	r7, [sp, #12]
 8004344:	9502      	str	r5, [sp, #8]
 8004346:	9500      	str	r5, [sp, #0]
 8004348:	f7ff fe88 	bl	800405c <BaseCommandCompile>
                                            xQueueOverwrite( ICommandM2QHandle, &BaseCommandPTR);
 800434c:	462b      	mov	r3, r5
 800434e:	463a      	mov	r2, r7
 8004350:	4631      	mov	r1, r6
 8004352:	4853      	ldr	r0, [pc, #332]	; (80044a0 <StartRXPC+0x350>)
 8004354:	e138      	b.n	80045c8 <StartRXPC+0x478>
                                            break;
                                    case POSITION_COMMAND:
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 8004356:	4f4b      	ldr	r7, [pc, #300]	; (8004484 <StartRXPC+0x334>)
                                            BaseCommandCompile(RXPacket.OPCODE, 0b1010, 0x02, 0x45, 0x00, RXPacket.M1P, 2, 0);
 8004358:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80044c8 <StartRXPC+0x378>
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE+1];
                                            BaseCommandCompile(RXPacket.OPCODE+1, 0b0011, 0x02, 0x45, 0x02, RXPacket.M2C, 2, 0);
                                            xQueueOverwrite( ICommandM2QHandle, &BaseCommandPTR);
                                            break;
                                    case POSITION_COMMAND:
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 800435c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80044cc <StartRXPC+0x37c>
 8004360:	f8c7 9000 	str.w	r9, [r7]
                                            BaseCommandCompile(RXPacket.OPCODE, 0b1010, 0x02, 0x45, 0x00, RXPacket.M1P, 2, 0);
 8004364:	2500      	movs	r5, #0
 8004366:	2602      	movs	r6, #2
 8004368:	2345      	movs	r3, #69	; 0x45
 800436a:	4632      	mov	r2, r6
 800436c:	210a      	movs	r1, #10
 800436e:	2016      	movs	r0, #22
 8004370:	9503      	str	r5, [sp, #12]
 8004372:	9602      	str	r6, [sp, #8]
 8004374:	e88d 0120 	stmia.w	sp, {r5, r8}
 8004378:	f7ff fe70 	bl	800405c <BaseCommandCompile>
                                            xQueueOverwrite( PCommandM1QHandle, &BaseCommandPTR);
 800437c:	4849      	ldr	r0, [pc, #292]	; (80044a4 <StartRXPC+0x354>)
 800437e:	4633      	mov	r3, r6
 8004380:	462a      	mov	r2, r5
 8004382:	4639      	mov	r1, r7
 8004384:	6800      	ldr	r0, [r0, #0]
 8004386:	f7fe f8fb 	bl	8002580 <xQueueGenericSend>

                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE+1];
 800438a:	78a0      	ldrb	r0, [r4, #2]
 800438c:	f5a9 799a 	sub.w	r9, r9, #308	; 0x134
 8004390:	3001      	adds	r0, #1
 8004392:	230e      	movs	r3, #14
 8004394:	fb03 9300 	mla	r3, r3, r0, r9
 8004398:	603b      	str	r3, [r7, #0]
                                            BaseCommandCompile(RXPacket.OPCODE+1, 0b1010, 0x02, 0x45, 0x00, RXPacket.M2P, 2, 0);
 800439a:	f108 0304 	add.w	r3, r8, #4
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	4632      	mov	r2, r6
 80043a2:	2345      	movs	r3, #69	; 0x45
 80043a4:	210a      	movs	r1, #10
 80043a6:	b2c0      	uxtb	r0, r0
 80043a8:	9503      	str	r5, [sp, #12]
 80043aa:	9602      	str	r6, [sp, #8]
 80043ac:	9500      	str	r5, [sp, #0]
 80043ae:	f7ff fe55 	bl	800405c <BaseCommandCompile>
                                            xQueueOverwrite( PCommandM2QHandle, &BaseCommandPTR);
 80043b2:	4633      	mov	r3, r6
 80043b4:	462a      	mov	r2, r5
 80043b6:	4639      	mov	r1, r7
 80043b8:	483b      	ldr	r0, [pc, #236]	; (80044a8 <StartRXPC+0x358>)
 80043ba:	e105      	b.n	80045c8 <StartRXPC+0x478>
                                            break;
                                    case ZERO_POSITION:
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80043bc:	4e31      	ldr	r6, [pc, #196]	; (8004484 <StartRXPC+0x334>)
 80043be:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <StartRXPC+0x35c>)
 80043c0:	6033      	str	r3, [r6, #0]
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x01, 0x00, ZERO_POSITION_DATA, 2, 0);
 80043c2:	2500      	movs	r5, #0
 80043c4:	4b3a      	ldr	r3, [pc, #232]	; (80044b0 <StartRXPC+0x360>)
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	9503      	str	r5, [sp, #12]
 80043cc:	9202      	str	r2, [sp, #8]
 80043ce:	9500      	str	r5, [sp, #0]
 80043d0:	2301      	movs	r3, #1
 80043d2:	4629      	mov	r1, r5
 80043d4:	2008      	movs	r0, #8
 80043d6:	f7ff fe41 	bl	800405c <BaseCommandCompile>
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80043da:	482f      	ldr	r0, [pc, #188]	; (8004498 <StartRXPC+0x348>)
 80043dc:	462b      	mov	r3, r5
 80043de:	2205      	movs	r2, #5
 80043e0:	4631      	mov	r1, r6
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	f7fe f8cc 	bl	8002580 <xQueueGenericSend>
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80043e8:	462b      	mov	r3, r5
 80043ea:	2205      	movs	r2, #5
 80043ec:	4631      	mov	r1, r6
 80043ee:	e0ea      	b.n	80045c6 <StartRXPC+0x476>
                                            break;
                                    case GAIN_SET:
                                            if(RXPacket.StatBIT_1 == 0) {
 80043f0:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80043f4:	f011 0101 	ands.w	r1, r1, #1
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x01, 0x01, GAIN_SET_0_DATA, 2, 0);
 80043f8:	bf0c      	ite	eq
 80043fa:	4b2e      	ldreq	r3, [pc, #184]	; (80044b4 <StartRXPC+0x364>)
                                            }
                                            else{
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x01, 0x01, GAIN_SET_1_DATA, 2, 0);
 80043fc:	4b2e      	ldrne	r3, [pc, #184]	; (80044b8 <StartRXPC+0x368>)
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	f04f 0202 	mov.w	r2, #2
 8004404:	bf18      	it	ne
 8004406:	2100      	movne	r1, #0
 8004408:	f04f 0301 	mov.w	r3, #1
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case GAIN_SET:
                                            if(RXPacket.StatBIT_1 == 0) {
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x01, 0x01, GAIN_SET_0_DATA, 2, 0);
 800440c:	bf07      	ittee	eq
 800440e:	9103      	streq	r1, [sp, #12]
 8004410:	9202      	streq	r2, [sp, #8]
                                            }
                                            else{
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x01, 0x01, GAIN_SET_1_DATA, 2, 0);
 8004412:	9103      	strne	r1, [sp, #12]
 8004414:	9202      	strne	r2, [sp, #8]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2009      	movs	r0, #9
 800441a:	e0c1      	b.n	80045a0 <StartRXPC+0x450>
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case GAIN_CHANGE_M1:
                                            //PID Position Loop
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 800441c:	4f19      	ldr	r7, [pc, #100]	; (8004484 <StartRXPC+0x334>)
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x38, 0x00, RXPacket.M1C, 2, 0);
 800441e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80044c0 <StartRXPC+0x370>
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case GAIN_CHANGE_M1:
                                            //PID Position Loop
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 8004422:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80044d0 <StartRXPC+0x380>
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x38, 0x00, RXPacket.M1C, 2, 0);
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004426:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004498 <StartRXPC+0x348>
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case GAIN_CHANGE_M1:
                                            //PID Position Loop
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 800442a:	f8c7 b000 	str.w	fp, [r7]
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x38, 0x00, RXPacket.M1C, 2, 0);
 800442e:	2500      	movs	r5, #0
 8004430:	2602      	movs	r6, #2
 8004432:	2338      	movs	r3, #56	; 0x38
 8004434:	4632      	mov	r2, r6
 8004436:	4629      	mov	r1, r5
 8004438:	200a      	movs	r0, #10
 800443a:	9503      	str	r5, [sp, #12]
 800443c:	9602      	str	r6, [sp, #8]
 800443e:	e88d 0120 	stmia.w	sp, {r5, r8}
 8004442:	f7ff fe0b 	bl	800405c <BaseCommandCompile>
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004446:	462b      	mov	r3, r5
 8004448:	2205      	movs	r2, #5
 800444a:	4639      	mov	r1, r7
 800444c:	f8d9 0000 	ldr.w	r0, [r9]
 8004450:	f7fe f896 	bl	8002580 <xQueueGenericSend>

                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE+1];
 8004454:	78a0      	ldrb	r0, [r4, #2]
 8004456:	f1ab 0b8c 	sub.w	fp, fp, #140	; 0x8c
 800445a:	3001      	adds	r0, #1
 800445c:	e05a      	b.n	8004514 <StartRXPC+0x3c4>
 800445e:	bf00      	nop
 8004460:	2000cb28 	.word	0x2000cb28
 8004464:	2000c9fc 	.word	0x2000c9fc
 8004468:	2000c990 	.word	0x2000c990
 800446c:	2000ca64 	.word	0x2000ca64
 8004470:	2000000c 	.word	0x2000000c
 8004474:	2000c30a 	.word	0x2000c30a
 8004478:	2000c30b 	.word	0x2000c30b
 800447c:	20000008 	.word	0x20000008
 8004480:	2000c6d4 	.word	0x2000c6d4
 8004484:	2000c320 	.word	0x2000c320
 8004488:	2000c6e2 	.word	0x2000c6e2
 800448c:	20007d24 	.word	0x20007d24
 8004490:	2000c6f0 	.word	0x2000c6f0
 8004494:	2000c308 	.word	0x2000c308
 8004498:	2000c6cc 	.word	0x2000c6cc
 800449c:	2000ca14 	.word	0x2000ca14
 80044a0:	2000c45c 	.word	0x2000c45c
 80044a4:	2000cadc 	.word	0x2000cadc
 80044a8:	2000ca04 	.word	0x2000ca04
 80044ac:	2000c744 	.word	0x2000c744
 80044b0:	20003e98 	.word	0x20003e98
 80044b4:	2000c30c 	.word	0x2000c30c
 80044b8:	20000011 	.word	0x20000011
 80044bc:	2000c310 	.word	0x2000c310
 80044c0:	2000cb2b 	.word	0x2000cb2b
 80044c4:	2000c7ec 	.word	0x2000c7ec
 80044c8:	2000cb33 	.word	0x2000cb33
 80044cc:	2000c808 	.word	0x2000c808
 80044d0:	2000c760 	.word	0x2000c760
                                            BaseCommandCompile(RXPacket.OPCODE+2, 0b0000, 0x02, 0x38, 0x04, RXPacket.M2C, 2, 0);
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case GAIN_CHANGE_M2:
                                            //PID Position Loop
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80044d4:	4f44      	ldr	r7, [pc, #272]	; (80045e8 <StartRXPC+0x498>)
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x38, 0x00, RXPacket.M1C, 2, 0);
 80044d6:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8004600 <StartRXPC+0x4b0>
                                            BaseCommandCompile(RXPacket.OPCODE+2, 0b0000, 0x02, 0x38, 0x04, RXPacket.M2C, 2, 0);
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case GAIN_CHANGE_M2:
                                            //PID Position Loop
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80044da:	f8df b128 	ldr.w	fp, [pc, #296]	; 8004604 <StartRXPC+0x4b4>
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x38, 0x00, RXPacket.M1C, 2, 0);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80044de:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80045fc <StartRXPC+0x4ac>
                                            BaseCommandCompile(RXPacket.OPCODE+2, 0b0000, 0x02, 0x38, 0x04, RXPacket.M2C, 2, 0);
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case GAIN_CHANGE_M2:
                                            //PID Position Loop
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80044e2:	f8c7 b000 	str.w	fp, [r7]
                                            BaseCommandCompile(RXPacket.OPCODE, 0b0000, 0x02, 0x38, 0x00, RXPacket.M1C, 2, 0);
 80044e6:	2500      	movs	r5, #0
 80044e8:	2602      	movs	r6, #2
 80044ea:	2338      	movs	r3, #56	; 0x38
 80044ec:	4632      	mov	r2, r6
 80044ee:	4629      	mov	r1, r5
 80044f0:	200d      	movs	r0, #13
 80044f2:	9503      	str	r5, [sp, #12]
 80044f4:	9602      	str	r6, [sp, #8]
 80044f6:	e88d 0120 	stmia.w	sp, {r5, r8}
 80044fa:	f7ff fdaf 	bl	800405c <BaseCommandCompile>
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80044fe:	462b      	mov	r3, r5
 8004500:	2205      	movs	r2, #5
 8004502:	4639      	mov	r1, r7
 8004504:	f8d9 0000 	ldr.w	r0, [r9]
 8004508:	f7fe f83a 	bl	8002580 <xQueueGenericSend>

                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE+1];
 800450c:	78a0      	ldrb	r0, [r4, #2]
 800450e:	f1ab 0bb6 	sub.w	fp, fp, #182	; 0xb6
 8004512:	3001      	adds	r0, #1
 8004514:	230e      	movs	r3, #14
 8004516:	fb03 b300 	mla	r3, r3, r0, fp
 800451a:	603b      	str	r3, [r7, #0]
                                            BaseCommandCompile(RXPacket.OPCODE+1, 0b0000, 0x02, 0x38, 0x02, RXPacket.M1P, 2, 0);
 800451c:	f108 0308 	add.w	r3, r8, #8
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	4632      	mov	r2, r6
 8004524:	2338      	movs	r3, #56	; 0x38
 8004526:	4629      	mov	r1, r5
 8004528:	b2c0      	uxtb	r0, r0
 800452a:	9503      	str	r5, [sp, #12]
 800452c:	9602      	str	r6, [sp, #8]
 800452e:	9600      	str	r6, [sp, #0]
 8004530:	f7ff fd94 	bl	800405c <BaseCommandCompile>
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004534:	462b      	mov	r3, r5
 8004536:	2205      	movs	r2, #5
 8004538:	4639      	mov	r1, r7
 800453a:	f8d9 0000 	ldr.w	r0, [r9]
 800453e:	f7fe f81f 	bl	8002580 <xQueueGenericSend>

                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE+2];
 8004542:	78a0      	ldrb	r0, [r4, #2]
 8004544:	230e      	movs	r3, #14
 8004546:	4430      	add	r0, r6
 8004548:	fb03 b300 	mla	r3, r3, r0, fp
 800454c:	603b      	str	r3, [r7, #0]
                                            BaseCommandCompile(RXPacket.OPCODE+2, 0b0000, 0x02, 0x38, 0x04, RXPacket.M2C, 2, 0);
 800454e:	f108 0304 	add.w	r3, r8, #4
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	2304      	movs	r3, #4
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	4632      	mov	r2, r6
 800455a:	2338      	movs	r3, #56	; 0x38
 800455c:	4629      	mov	r1, r5
 800455e:	b2c0      	uxtb	r0, r0
 8004560:	9503      	str	r5, [sp, #12]
 8004562:	9602      	str	r6, [sp, #8]
 8004564:	f7ff fd7a 	bl	800405c <BaseCommandCompile>
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004568:	462b      	mov	r3, r5
 800456a:	2205      	movs	r2, #5
 800456c:	4639      	mov	r1, r7
 800456e:	f8d9 0000 	ldr.w	r0, [r9]
 8004572:	e02a      	b.n	80045ca <StartRXPC+0x47a>
                                            break;
                                    case CONFIG_SET:
                                            if(RXPacket.StatBIT_2 == 0) {
 8004574:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8004578:	2202      	movs	r2, #2
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2101      	movs	r1, #1
 8004580:	f003 00ff 	and.w	r0, r3, #255	; 0xff
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b1001, 0x02, 0xD1, 0x00, CONFIG_0_SET_DATA, 1, 2);
 8004584:	9203      	str	r2, [sp, #12]
 8004586:	9102      	str	r1, [sp, #8]
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE+2];
                                            BaseCommandCompile(RXPacket.OPCODE+2, 0b0000, 0x02, 0x38, 0x04, RXPacket.M2C, 2, 0);
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                            break;
                                    case CONFIG_SET:
                                            if(RXPacket.StatBIT_2 == 0) {
 8004588:	b91b      	cbnz	r3, 8004592 <StartRXPC+0x442>
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b1001, 0x02, 0xD1, 0x00, CONFIG_0_SET_DATA, 1, 2);
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <StartRXPC+0x49c>)
 800458c:	e88d 0009 	stmia.w	sp, {r0, r3}
 8004590:	e003      	b.n	800459a <StartRXPC+0x44a>
                                            }
                                            else{
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b1001, 0x02, 0xD1, 0x00, CONFIG_1_SET_DATA, 1, 2);
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <StartRXPC+0x4a0>)
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	2300      	movs	r3, #0
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	23d1      	movs	r3, #209	; 0xd1
 800459c:	2109      	movs	r1, #9
 800459e:	2010      	movs	r0, #16
 80045a0:	f7ff fd5c 	bl	800405c <BaseCommandCompile>
                                            }
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80045a4:	78a2      	ldrb	r2, [r4, #2]
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <StartRXPC+0x4a4>)
 80045a8:	4d0f      	ldr	r5, [pc, #60]	; (80045e8 <StartRXPC+0x498>)
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80045aa:	4813      	ldr	r0, [pc, #76]	; (80045f8 <StartRXPC+0x4a8>)
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b1001, 0x02, 0xD1, 0x00, CONFIG_0_SET_DATA, 1, 2);
                                            }
                                            else{
                                                    BaseCommandCompile(RXPacket.OPCODE, 0b1001, 0x02, 0xD1, 0x00, CONFIG_1_SET_DATA, 1, 2);
                                            }
                                            BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 80045ac:	210e      	movs	r1, #14
 80045ae:	fb01 3302 	mla	r3, r1, r2, r3
 80045b2:	602b      	str	r3, [r5, #0]
                                            xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80045b4:	2205      	movs	r2, #5
 80045b6:	2300      	movs	r3, #0
 80045b8:	4629      	mov	r1, r5
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	f7fd ffe0 	bl	8002580 <xQueueGenericSend>
                                            xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80045c0:	2300      	movs	r3, #0
 80045c2:	2205      	movs	r2, #5
 80045c4:	4629      	mov	r1, r5
 80045c6:	480d      	ldr	r0, [pc, #52]	; (80045fc <StartRXPC+0x4ac>)
 80045c8:	6800      	ldr	r0, [r0, #0]
 80045ca:	f7fd ffd9 	bl	8002580 <xQueueGenericSend>
                                            break;
 80045ce:	e5d0      	b.n	8004172 <StartRXPC+0x22>
                                    case START_CONTROL:
                                            if(RXPacket.StatBIT_3 == 1) {
 80045d0:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80045d4:	0752      	lsls	r2, r2, #29
 80045d6:	f57f adcc 	bpl.w	8004172 <StartRXPC+0x22>
 80045da:	e002      	b.n	80045e2 <StartRXPC+0x492>
                                            else{
                                                    START = 0;
                                            }
                                            break;
                                    case TRIGGER_ONESHOT:
                                            TRIGGER = RXPacket.TRIGGER;
 80045dc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 80045e0:	7011      	strb	r1, [r2, #0]
                                            START = 1;
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e5c4      	b.n	8004172 <StartRXPC+0x22>
 80045e8:	2000c320 	.word	0x2000c320
 80045ec:	2000c311 	.word	0x2000c311
 80045f0:	20003e9c 	.word	0x20003e9c
 80045f4:	2000c6d4 	.word	0x2000c6d4
 80045f8:	2000c6cc 	.word	0x2000c6cc
 80045fc:	2000cbfc 	.word	0x2000cbfc
 8004600:	2000cb2b 	.word	0x2000cb2b
 8004604:	2000c78a 	.word	0x2000c78a

08004608 <StartHeartbeat>:
  /* USER CODE END StartRXiN */
}

/* StartHeartbeat function */
void StartHeartbeat(void const * argument)
{
 8004608:	e92d 489f 	stmdb	sp!, {r0, r1, r2, r3, r4, r7, fp, lr}
  /* Infinite loop */
  for(;;)
  {
      //Read Current
      BaseCommandCompile(READ_CURRENT, 0b1100, 0x01, 0x10, 0x03, NULL, 1, 4);
      BaseCommandPTR = &BaseCommand[READ_CURRENT];
 800460c:	f8df b108 	ldr.w	fp, [pc, #264]	; 8004718 <StartHeartbeat+0x110>
 8004610:	4d39      	ldr	r5, [pc, #228]	; (80046f8 <StartHeartbeat+0xf0>)
      xQueueSendToBack( TransmitM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004612:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800471c <StartHeartbeat+0x114>
      xQueueSendToBack( TransmitM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004616:	4f39      	ldr	r7, [pc, #228]	; (80046fc <StartHeartbeat+0xf4>)
  /* USER CODE BEGIN StartHeartbeat */
  /* Infinite loop */
  for(;;)
  {
      //Read Current
      BaseCommandCompile(READ_CURRENT, 0b1100, 0x01, 0x10, 0x03, NULL, 1, 4);
 8004618:	2400      	movs	r4, #0
 800461a:	2601      	movs	r6, #1
 800461c:	f04f 0a04 	mov.w	sl, #4
 8004620:	2303      	movs	r3, #3
 8004622:	e88d 0458 	stmia.w	sp, {r3, r4, r6, sl}
 8004626:	4632      	mov	r2, r6
 8004628:	2310      	movs	r3, #16
 800462a:	210c      	movs	r1, #12
 800462c:	2005      	movs	r0, #5
 800462e:	f7ff fd15 	bl	800405c <BaseCommandCompile>
      BaseCommandPTR = &BaseCommand[READ_CURRENT];
      xQueueSendToBack( TransmitM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004632:	4623      	mov	r3, r4
 8004634:	4629      	mov	r1, r5
 8004636:	2205      	movs	r2, #5
 8004638:	f8d8 0000 	ldr.w	r0, [r8]
  /* Infinite loop */
  for(;;)
  {
      //Read Current
      BaseCommandCompile(READ_CURRENT, 0b1100, 0x01, 0x10, 0x03, NULL, 1, 4);
      BaseCommandPTR = &BaseCommand[READ_CURRENT];
 800463c:	f8c5 b000 	str.w	fp, [r5]
      xQueueSendToBack( TransmitM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
      xQueueSendToBack( TransmitM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);

      //Read Position
      BaseCommandCompile(READ_POSITION, 0b1111, 0x01, 0x12, 0x00, NULL, 2, 4);
 8004640:	f04f 0902 	mov.w	r9, #2
  for(;;)
  {
      //Read Current
      BaseCommandCompile(READ_CURRENT, 0b1100, 0x01, 0x10, 0x03, NULL, 1, 4);
      BaseCommandPTR = &BaseCommand[READ_CURRENT];
      xQueueSendToBack( TransmitM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004644:	f7fd ff9c 	bl	8002580 <xQueueGenericSend>
      xQueueSendToBack( TransmitM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004648:	4623      	mov	r3, r4
 800464a:	4629      	mov	r1, r5
 800464c:	2205      	movs	r2, #5
 800464e:	6838      	ldr	r0, [r7, #0]
 8004650:	f7fd ff96 	bl	8002580 <xQueueGenericSend>

      //Read Position
      BaseCommandCompile(READ_POSITION, 0b1111, 0x01, 0x12, 0x00, NULL, 2, 4);
 8004654:	4632      	mov	r2, r6
 8004656:	f8cd a00c 	str.w	sl, [sp, #12]
 800465a:	f8cd 9008 	str.w	r9, [sp, #8]
 800465e:	9401      	str	r4, [sp, #4]
 8004660:	9400      	str	r4, [sp, #0]
 8004662:	2312      	movs	r3, #18
 8004664:	210f      	movs	r1, #15
 8004666:	2006      	movs	r0, #6
 8004668:	f7ff fcf8 	bl	800405c <BaseCommandCompile>
      BaseCommandPTR = &BaseCommand[READ_POSITION];
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <StartHeartbeat+0xf8>)
 800466e:	602b      	str	r3, [r5, #0]
      xQueueSendToBack( TransmitM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8004670:	4629      	mov	r1, r5
 8004672:	4623      	mov	r3, r4
 8004674:	2205      	movs	r2, #5
 8004676:	f8d8 0000 	ldr.w	r0, [r8]
 800467a:	f7fd ff81 	bl	8002580 <xQueueGenericSend>
      xQueueSendToBack( TransmitM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 800467e:	4623      	mov	r3, r4
 8004680:	4629      	mov	r1, r5
 8004682:	2205      	movs	r2, #5
 8004684:	6838      	ldr	r0, [r7, #0]
 8004686:	f7fd ff7b 	bl	8002580 <xQueueGenericSend>

      //Read Velocity
      BaseCommandCompile(READ_VELOCITY, 0b0101, 0x01, 0x11, 0x02, NULL, 2, 4);
 800468a:	4632      	mov	r2, r6
 800468c:	f8cd a00c 	str.w	sl, [sp, #12]
 8004690:	f8cd 9008 	str.w	r9, [sp, #8]
 8004694:	9401      	str	r4, [sp, #4]
 8004696:	f8cd 9000 	str.w	r9, [sp]
 800469a:	2311      	movs	r3, #17
 800469c:	2105      	movs	r1, #5
 800469e:	2007      	movs	r0, #7
 80046a0:	f7ff fcdc 	bl	800405c <BaseCommandCompile>
      BaseCommandPTR = &BaseCommand[READ_VELOCITY];
 80046a4:	4b17      	ldr	r3, [pc, #92]	; (8004704 <StartHeartbeat+0xfc>)
 80046a6:	602b      	str	r3, [r5, #0]
      xQueueSendToBack( TransmitM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80046a8:	4629      	mov	r1, r5
 80046aa:	4623      	mov	r3, r4
 80046ac:	2205      	movs	r2, #5
 80046ae:	f8d8 0000 	ldr.w	r0, [r8]
 80046b2:	f7fd ff65 	bl	8002580 <xQueueGenericSend>
      xQueueSendToBack( TransmitM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 80046b6:	4623      	mov	r3, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	2205      	movs	r2, #5
 80046bc:	6838      	ldr	r0, [r7, #0]
 80046be:	f7fd ff5f 	bl	8002580 <xQueueGenericSend>

      xSemaphoreGive(TXMotorM1Handle);
 80046c2:	4811      	ldr	r0, [pc, #68]	; (8004708 <StartHeartbeat+0x100>)
 80046c4:	4623      	mov	r3, r4
 80046c6:	4622      	mov	r2, r4
 80046c8:	4621      	mov	r1, r4
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	f7fd ff58 	bl	8002580 <xQueueGenericSend>
      xSemaphoreGive(TXMotorM2Handle);
 80046d0:	480e      	ldr	r0, [pc, #56]	; (800470c <StartHeartbeat+0x104>)
 80046d2:	4622      	mov	r2, r4
 80046d4:	4621      	mov	r1, r4
 80046d6:	4623      	mov	r3, r4
 80046d8:	6800      	ldr	r0, [r0, #0]
 80046da:	f7fd ff51 	bl	8002580 <xQueueGenericSend>

      vTaskDelay(Ts);
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <StartHeartbeat+0x108>)
 80046e0:	7818      	ldrb	r0, [r3, #0]
 80046e2:	f7fe fbaf 	bl	8002e44 <vTaskDelay>

      xSemaphoreGive(iNRXHandle);
 80046e6:	480b      	ldr	r0, [pc, #44]	; (8004714 <StartHeartbeat+0x10c>)
 80046e8:	4623      	mov	r3, r4
 80046ea:	4622      	mov	r2, r4
 80046ec:	4621      	mov	r1, r4
 80046ee:	6800      	ldr	r0, [r0, #0]
 80046f0:	f7fd ff46 	bl	8002580 <xQueueGenericSend>
 80046f4:	e78c      	b.n	8004610 <StartHeartbeat+0x8>
 80046f6:	bf00      	nop
 80046f8:	2000c320 	.word	0x2000c320
 80046fc:	2000c9f4 	.word	0x2000c9f4
 8004700:	2000c728 	.word	0x2000c728
 8004704:	2000c736 	.word	0x2000c736
 8004708:	2000c500 	.word	0x2000c500
 800470c:	2000c454 	.word	0x2000c454
 8004710:	20000010 	.word	0x20000010
 8004714:	2000cc6c 	.word	0x2000cc6c
 8004718:	2000c71a 	.word	0x2000c71a
 800471c:	2000c508 	.word	0x2000c508

08004720 <TransmitM1_DMA>:
                memset(&BaseCommand[n].DATA, 0, 4);
                memset(&BaseCommand[n].CRC2, 0, 2);
        }
}

void TransmitM1_DMA(uint8_t *data, uint8_t size){
 8004720:	b508      	push	{r3, lr}
        if(HAL_UART_Transmit_DMA(&M1_UART, data, size) != HAL_OK) { Error_Handler(); }
 8004722:	460a      	mov	r2, r1
 8004724:	4601      	mov	r1, r0
 8004726:	4803      	ldr	r0, [pc, #12]	; (8004734 <TransmitM1_DMA+0x14>)
 8004728:	f7fd fb06 	bl	8001d38 <HAL_UART_Transmit_DMA>
 800472c:	b100      	cbz	r0, 8004730 <TransmitM1_DMA+0x10>
 800472e:	e7fe      	b.n	800472e <TransmitM1_DMA+0xe>
 8004730:	bd08      	pop	{r3, pc}
 8004732:	bf00      	nop
 8004734:	2000c4c0 	.word	0x2000c4c0

08004738 <StartTXMotor1>:
  /* USER CODE END StartHeartbeat */
}

/* StartTXMotor1 function */
void StartTXMotor1(void const * argument)
{
 8004738:	b573      	push	{r0, r1, r4, r5, r6, lr}
            HAL_UART_Receive_DMA(&M1_UART, RXBufM1, sizeof(RXBufM1));

            while(uxQueueMessagesWaiting( CommandM1QHandle )) {
                    xQueueReceive( CommandM1QHandle, &( pxRxedMessage ), portMAX_DELAY);
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
 800473a:	4c34      	ldr	r4, [pc, #208]	; (800480c <StartTXMotor1+0xd4>)
  /* USER CODE BEGIN StartTXMotor1 */
    uint8_t *pxRxedMessage;
    /* Infinite loop */
    for(;; )
    {
            xSemaphoreTake( TXMotorM1Handle, portMAX_DELAY );
 800473c:	4834      	ldr	r0, [pc, #208]	; (8004810 <StartTXMotor1+0xd8>)
            __HAL_UART_FLUSH_DRREGISTER(&M1_UART);
 800473e:	4d35      	ldr	r5, [pc, #212]	; (8004814 <StartTXMotor1+0xdc>)
  /* USER CODE BEGIN StartTXMotor1 */
    uint8_t *pxRxedMessage;
    /* Infinite loop */
    for(;; )
    {
            xSemaphoreTake( TXMotorM1Handle, portMAX_DELAY );
 8004740:	6800      	ldr	r0, [r0, #0]
 8004742:	2300      	movs	r3, #0
 8004744:	4619      	mov	r1, r3
 8004746:	f04f 32ff 	mov.w	r2, #4294967295
 800474a:	f7fe f81d 	bl	8002788 <xQueueGenericReceive>
            __HAL_UART_FLUSH_DRREGISTER(&M1_UART);
 800474e:	682b      	ldr	r3, [r5, #0]
            memset(RXBufM1, 0, sizeof(RXBufM1));
 8004750:	4831      	ldr	r0, [pc, #196]	; (8004818 <StartTXMotor1+0xe0>)
    uint8_t *pxRxedMessage;
    /* Infinite loop */
    for(;; )
    {
            xSemaphoreTake( TXMotorM1Handle, portMAX_DELAY );
            __HAL_UART_FLUSH_DRREGISTER(&M1_UART);
 8004752:	685b      	ldr	r3, [r3, #4]
            memset(RXBufM1, 0, sizeof(RXBufM1));
 8004754:	2232      	movs	r2, #50	; 0x32
 8004756:	2100      	movs	r1, #0
 8004758:	f001 fb1c 	bl	8005d94 <memset>
            HAL_UART_Receive_DMA(&M1_UART, RXBufM1, sizeof(RXBufM1));
 800475c:	4628      	mov	r0, r5
 800475e:	2232      	movs	r2, #50	; 0x32
 8004760:	492d      	ldr	r1, [pc, #180]	; (8004818 <StartTXMotor1+0xe0>)

            while(uxQueueMessagesWaiting( CommandM1QHandle )) {
 8004762:	4d2e      	ldr	r5, [pc, #184]	; (800481c <StartTXMotor1+0xe4>)
    for(;; )
    {
            xSemaphoreTake( TXMotorM1Handle, portMAX_DELAY );
            __HAL_UART_FLUSH_DRREGISTER(&M1_UART);
            memset(RXBufM1, 0, sizeof(RXBufM1));
            HAL_UART_Receive_DMA(&M1_UART, RXBufM1, sizeof(RXBufM1));
 8004764:	f7fd fb22 	bl	8001dac <HAL_UART_Receive_DMA>

            while(uxQueueMessagesWaiting( CommandM1QHandle )) {
 8004768:	6828      	ldr	r0, [r5, #0]
 800476a:	f7fe f8c9 	bl	8002900 <uxQueueMessagesWaiting>
 800476e:	4603      	mov	r3, r0
 8004770:	b170      	cbz	r0, 8004790 <StartTXMotor1+0x58>
                    xQueueReceive( CommandM1QHandle, &( pxRxedMessage ), portMAX_DELAY);
 8004772:	2300      	movs	r3, #0
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	a901      	add	r1, sp, #4
 800477a:	6828      	ldr	r0, [r5, #0]
 800477c:	f7fe f804 	bl	8002788 <xQueueGenericReceive>
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
 8004780:	9801      	ldr	r0, [sp, #4]
 8004782:	210e      	movs	r1, #14
 8004784:	f7ff ffcc 	bl	8004720 <TransmitM1_DMA>
                    vTaskDelay(Td);
 8004788:	7820      	ldrb	r0, [r4, #0]
 800478a:	f7fe fb5b 	bl	8002e44 <vTaskDelay>
 800478e:	e7eb      	b.n	8004768 <StartTXMotor1+0x30>
            }

            if(xQueueReceive( ICommandM1QHandle, &( pxRxedMessage ), 0)) {
 8004790:	4602      	mov	r2, r0
 8004792:	4823      	ldr	r0, [pc, #140]	; (8004820 <StartTXMotor1+0xe8>)
 8004794:	a901      	add	r1, sp, #4
 8004796:	6800      	ldr	r0, [r0, #0]
 8004798:	f7fd fff6 	bl	8002788 <xQueueGenericReceive>
 800479c:	4603      	mov	r3, r0
 800479e:	b148      	cbz	r0, 80047b4 <StartTXMotor1+0x7c>
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
 80047a0:	9801      	ldr	r0, [sp, #4]
 80047a2:	210e      	movs	r1, #14
 80047a4:	f7ff ffbc 	bl	8004720 <TransmitM1_DMA>
                    vTaskDelay(Td);
 80047a8:	7820      	ldrb	r0, [r4, #0]
 80047aa:	f7fe fb4b 	bl	8002e44 <vTaskDelay>
            else if (xQueueReceive( PCommandM1QHandle, &( pxRxedMessage ), 0)) {
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
            }

            while(uxQueueMessagesWaiting( TransmitM1QHandle )) {
 80047ae:	4d1d      	ldr	r5, [pc, #116]	; (8004824 <StartTXMotor1+0xec>)
                    xQueueReceive( TransmitM1QHandle, &( pxRxedMessage ), portMAX_DELAY);
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    //while(huart2.gState != HAL_UART_STATE_READY);
                    vTaskDelay(Td);
                    if(uxQueueMessagesWaiting( TransmitM2QHandle )>0) {vTaskDelay(Td); }
 80047b0:	4e1d      	ldr	r6, [pc, #116]	; (8004828 <StartTXMotor1+0xf0>)
 80047b2:	e01e      	b.n	80047f2 <StartTXMotor1+0xba>
            if(xQueueReceive( ICommandM1QHandle, &( pxRxedMessage ), 0)) {
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
            }

            else if (xQueueReceive( PCommandM1QHandle, &( pxRxedMessage ), 0)) {
 80047b4:	4602      	mov	r2, r0
 80047b6:	481d      	ldr	r0, [pc, #116]	; (800482c <StartTXMotor1+0xf4>)
 80047b8:	a901      	add	r1, sp, #4
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	f7fd ffe4 	bl	8002788 <xQueueGenericReceive>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d0f4      	beq.n	80047ae <StartTXMotor1+0x76>
 80047c4:	e7ec      	b.n	80047a0 <StartTXMotor1+0x68>
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
            }

            while(uxQueueMessagesWaiting( TransmitM1QHandle )) {
                    xQueueReceive( TransmitM1QHandle, &( pxRxedMessage ), portMAX_DELAY);
 80047c6:	2300      	movs	r3, #0
 80047c8:	f04f 32ff 	mov.w	r2, #4294967295
 80047cc:	a901      	add	r1, sp, #4
 80047ce:	6828      	ldr	r0, [r5, #0]
 80047d0:	f7fd ffda 	bl	8002788 <xQueueGenericReceive>
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
 80047d4:	210e      	movs	r1, #14
 80047d6:	9801      	ldr	r0, [sp, #4]
 80047d8:	f7ff ffa2 	bl	8004720 <TransmitM1_DMA>
                    //while(huart2.gState != HAL_UART_STATE_READY);
                    vTaskDelay(Td);
 80047dc:	7820      	ldrb	r0, [r4, #0]
 80047de:	f7fe fb31 	bl	8002e44 <vTaskDelay>
                    if(uxQueueMessagesWaiting( TransmitM2QHandle )>0) {vTaskDelay(Td); }
 80047e2:	6830      	ldr	r0, [r6, #0]
 80047e4:	f7fe f88c 	bl	8002900 <uxQueueMessagesWaiting>
 80047e8:	4603      	mov	r3, r0
 80047ea:	b140      	cbz	r0, 80047fe <StartTXMotor1+0xc6>
 80047ec:	7820      	ldrb	r0, [r4, #0]
 80047ee:	f7fe fb29 	bl	8002e44 <vTaskDelay>
            else if (xQueueReceive( PCommandM1QHandle, &( pxRxedMessage ), 0)) {
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
            }

            while(uxQueueMessagesWaiting( TransmitM1QHandle )) {
 80047f2:	6828      	ldr	r0, [r5, #0]
 80047f4:	f7fe f884 	bl	8002900 <uxQueueMessagesWaiting>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1e4      	bne.n	80047c6 <StartTXMotor1+0x8e>
 80047fc:	e79e      	b.n	800473c <StartTXMotor1+0x4>
                    xQueueReceive( TransmitM1QHandle, &( pxRxedMessage ), portMAX_DELAY);
                    TransmitM1_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    //while(huart2.gState != HAL_UART_STATE_READY);
                    vTaskDelay(Td);
                    if(uxQueueMessagesWaiting( TransmitM2QHandle )>0) {vTaskDelay(Td); }
                    else{xSemaphoreGive( RXMotorM1Handle ); }
 80047fe:	4602      	mov	r2, r0
 8004800:	4601      	mov	r1, r0
 8004802:	480b      	ldr	r0, [pc, #44]	; (8004830 <StartTXMotor1+0xf8>)
 8004804:	6800      	ldr	r0, [r0, #0]
 8004806:	f7fd febb 	bl	8002580 <xQueueGenericSend>
 800480a:	e7f2      	b.n	80047f2 <StartTXMotor1+0xba>
 800480c:	2000000a 	.word	0x2000000a
 8004810:	2000c500 	.word	0x2000c500
 8004814:	2000c4c0 	.word	0x2000c4c0
 8004818:	2000c594 	.word	0x2000c594
 800481c:	2000c6cc 	.word	0x2000c6cc
 8004820:	2000ca14 	.word	0x2000ca14
 8004824:	2000c508 	.word	0x2000c508
 8004828:	2000c9f4 	.word	0x2000c9f4
 800482c:	2000cadc 	.word	0x2000cadc
 8004830:	2000ca10 	.word	0x2000ca10

08004834 <TransmitM2_DMA>:

void ReceiveM1_DMA(uint8_t *data, uint8_t size){
        if(HAL_UART_Receive_DMA(&M1_UART, data, size) != HAL_OK) { Error_Handler(); }
}

void TransmitM2_DMA(uint8_t *data, uint8_t size){
 8004834:	b508      	push	{r3, lr}
        if(HAL_UART_Transmit_DMA(&M2_UART, data, size) != HAL_OK) { Error_Handler(); }
 8004836:	460a      	mov	r2, r1
 8004838:	4601      	mov	r1, r0
 800483a:	4803      	ldr	r0, [pc, #12]	; (8004848 <TransmitM2_DMA+0x14>)
 800483c:	f7fd fa7c 	bl	8001d38 <HAL_UART_Transmit_DMA>
 8004840:	b100      	cbz	r0, 8004844 <TransmitM2_DMA+0x10>
 8004842:	e7fe      	b.n	8004842 <TransmitM2_DMA+0xe>
 8004844:	bd08      	pop	{r3, pc}
 8004846:	bf00      	nop
 8004848:	2000cae4 	.word	0x2000cae4

0800484c <StartTXMotor2>:
  /* USER CODE END StartTXMotor1 */
}

/* StartTXMotor2 function */
void StartTXMotor2(void const * argument)
{
 800484c:	b573      	push	{r0, r1, r4, r5, r6, lr}
            HAL_UART_Receive_DMA(&M2_UART, RXBufM2, sizeof(RXBufM2));

            while(uxQueueMessagesWaiting( CommandM2QHandle )) {
                    xQueueReceive( CommandM2QHandle, &( pxRxedMessage ), portMAX_DELAY);
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
 800484e:	4c34      	ldr	r4, [pc, #208]	; (8004920 <StartTXMotor2+0xd4>)
  /* USER CODE BEGIN StartTXMotor2 */
    uint8_t *pxRxedMessage;
    /* Infinite loop */
    for(;; )
    {
            xSemaphoreTake( TXMotorM2Handle, portMAX_DELAY );
 8004850:	4834      	ldr	r0, [pc, #208]	; (8004924 <StartTXMotor2+0xd8>)
            __HAL_UART_FLUSH_DRREGISTER(&M2_UART);
 8004852:	4d35      	ldr	r5, [pc, #212]	; (8004928 <StartTXMotor2+0xdc>)
  /* USER CODE BEGIN StartTXMotor2 */
    uint8_t *pxRxedMessage;
    /* Infinite loop */
    for(;; )
    {
            xSemaphoreTake( TXMotorM2Handle, portMAX_DELAY );
 8004854:	6800      	ldr	r0, [r0, #0]
 8004856:	2300      	movs	r3, #0
 8004858:	4619      	mov	r1, r3
 800485a:	f04f 32ff 	mov.w	r2, #4294967295
 800485e:	f7fd ff93 	bl	8002788 <xQueueGenericReceive>
            __HAL_UART_FLUSH_DRREGISTER(&M2_UART);
 8004862:	682b      	ldr	r3, [r5, #0]
            memset(RXBufM2, 0, sizeof(RXBufM2));
 8004864:	4831      	ldr	r0, [pc, #196]	; (800492c <StartTXMotor2+0xe0>)
    uint8_t *pxRxedMessage;
    /* Infinite loop */
    for(;; )
    {
            xSemaphoreTake( TXMotorM2Handle, portMAX_DELAY );
            __HAL_UART_FLUSH_DRREGISTER(&M2_UART);
 8004866:	685b      	ldr	r3, [r3, #4]
            memset(RXBufM2, 0, sizeof(RXBufM2));
 8004868:	2232      	movs	r2, #50	; 0x32
 800486a:	2100      	movs	r1, #0
 800486c:	f001 fa92 	bl	8005d94 <memset>
            HAL_UART_Receive_DMA(&M2_UART, RXBufM2, sizeof(RXBufM2));
 8004870:	4628      	mov	r0, r5
 8004872:	2232      	movs	r2, #50	; 0x32
 8004874:	492d      	ldr	r1, [pc, #180]	; (800492c <StartTXMotor2+0xe0>)

            while(uxQueueMessagesWaiting( CommandM2QHandle )) {
 8004876:	4d2e      	ldr	r5, [pc, #184]	; (8004930 <StartTXMotor2+0xe4>)
    for(;; )
    {
            xSemaphoreTake( TXMotorM2Handle, portMAX_DELAY );
            __HAL_UART_FLUSH_DRREGISTER(&M2_UART);
            memset(RXBufM2, 0, sizeof(RXBufM2));
            HAL_UART_Receive_DMA(&M2_UART, RXBufM2, sizeof(RXBufM2));
 8004878:	f7fd fa98 	bl	8001dac <HAL_UART_Receive_DMA>

            while(uxQueueMessagesWaiting( CommandM2QHandle )) {
 800487c:	6828      	ldr	r0, [r5, #0]
 800487e:	f7fe f83f 	bl	8002900 <uxQueueMessagesWaiting>
 8004882:	4603      	mov	r3, r0
 8004884:	b170      	cbz	r0, 80048a4 <StartTXMotor2+0x58>
                    xQueueReceive( CommandM2QHandle, &( pxRxedMessage ), portMAX_DELAY);
 8004886:	2300      	movs	r3, #0
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	a901      	add	r1, sp, #4
 800488e:	6828      	ldr	r0, [r5, #0]
 8004890:	f7fd ff7a 	bl	8002788 <xQueueGenericReceive>
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
 8004894:	9801      	ldr	r0, [sp, #4]
 8004896:	210e      	movs	r1, #14
 8004898:	f7ff ffcc 	bl	8004834 <TransmitM2_DMA>
                    vTaskDelay(Td);
 800489c:	7820      	ldrb	r0, [r4, #0]
 800489e:	f7fe fad1 	bl	8002e44 <vTaskDelay>
 80048a2:	e7eb      	b.n	800487c <StartTXMotor2+0x30>
            }

            if(xQueueReceive( ICommandM2QHandle, &( pxRxedMessage ), 0)) {
 80048a4:	4602      	mov	r2, r0
 80048a6:	4823      	ldr	r0, [pc, #140]	; (8004934 <StartTXMotor2+0xe8>)
 80048a8:	a901      	add	r1, sp, #4
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	f7fd ff6c 	bl	8002788 <xQueueGenericReceive>
 80048b0:	4603      	mov	r3, r0
 80048b2:	b148      	cbz	r0, 80048c8 <StartTXMotor2+0x7c>
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
 80048b4:	9801      	ldr	r0, [sp, #4]
 80048b6:	210e      	movs	r1, #14
 80048b8:	f7ff ffbc 	bl	8004834 <TransmitM2_DMA>
                    vTaskDelay(Td);
 80048bc:	7820      	ldrb	r0, [r4, #0]
 80048be:	f7fe fac1 	bl	8002e44 <vTaskDelay>
            else if(xQueueReceive( PCommandM2QHandle, &( pxRxedMessage ), 0)) {
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
            }

            while(uxQueueMessagesWaiting( TransmitM2QHandle )) {
 80048c2:	4d1d      	ldr	r5, [pc, #116]	; (8004938 <StartTXMotor2+0xec>)
                    xQueueReceive( TransmitM2QHandle, &( pxRxedMessage ), portMAX_DELAY);
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
                    if(uxQueueMessagesWaiting( TransmitM2QHandle )>0) {vTaskDelay(Td); }
                    else{xSemaphoreGive( RXMotorM2Handle ); }
 80048c4:	4e1d      	ldr	r6, [pc, #116]	; (800493c <StartTXMotor2+0xf0>)
 80048c6:	e01e      	b.n	8004906 <StartTXMotor2+0xba>
            if(xQueueReceive( ICommandM2QHandle, &( pxRxedMessage ), 0)) {
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
            }

            else if(xQueueReceive( PCommandM2QHandle, &( pxRxedMessage ), 0)) {
 80048c8:	4602      	mov	r2, r0
 80048ca:	481d      	ldr	r0, [pc, #116]	; (8004940 <StartTXMotor2+0xf4>)
 80048cc:	a901      	add	r1, sp, #4
 80048ce:	6800      	ldr	r0, [r0, #0]
 80048d0:	f7fd ff5a 	bl	8002788 <xQueueGenericReceive>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d0f4      	beq.n	80048c2 <StartTXMotor2+0x76>
 80048d8:	e7ec      	b.n	80048b4 <StartTXMotor2+0x68>
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
            }

            while(uxQueueMessagesWaiting( TransmitM2QHandle )) {
                    xQueueReceive( TransmitM2QHandle, &( pxRxedMessage ), portMAX_DELAY);
 80048da:	2300      	movs	r3, #0
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295
 80048e0:	a901      	add	r1, sp, #4
 80048e2:	6828      	ldr	r0, [r5, #0]
 80048e4:	f7fd ff50 	bl	8002788 <xQueueGenericReceive>
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
 80048e8:	210e      	movs	r1, #14
 80048ea:	9801      	ldr	r0, [sp, #4]
 80048ec:	f7ff ffa2 	bl	8004834 <TransmitM2_DMA>
                    vTaskDelay(Td);
 80048f0:	7820      	ldrb	r0, [r4, #0]
 80048f2:	f7fe faa7 	bl	8002e44 <vTaskDelay>
                    if(uxQueueMessagesWaiting( TransmitM2QHandle )>0) {vTaskDelay(Td); }
 80048f6:	6828      	ldr	r0, [r5, #0]
 80048f8:	f7fe f802 	bl	8002900 <uxQueueMessagesWaiting>
 80048fc:	4603      	mov	r3, r0
 80048fe:	b140      	cbz	r0, 8004912 <StartTXMotor2+0xc6>
 8004900:	7820      	ldrb	r0, [r4, #0]
 8004902:	f7fe fa9f 	bl	8002e44 <vTaskDelay>
            else if(xQueueReceive( PCommandM2QHandle, &( pxRxedMessage ), 0)) {
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
            }

            while(uxQueueMessagesWaiting( TransmitM2QHandle )) {
 8004906:	6828      	ldr	r0, [r5, #0]
 8004908:	f7fd fffa 	bl	8002900 <uxQueueMessagesWaiting>
 800490c:	2800      	cmp	r0, #0
 800490e:	d1e4      	bne.n	80048da <StartTXMotor2+0x8e>
 8004910:	e79e      	b.n	8004850 <StartTXMotor2+0x4>
                    xQueueReceive( TransmitM2QHandle, &( pxRxedMessage ), portMAX_DELAY);
                    TransmitM2_DMA(pxRxedMessage, sizeof(BaseCommand[0]));
                    vTaskDelay(Td);
                    if(uxQueueMessagesWaiting( TransmitM2QHandle )>0) {vTaskDelay(Td); }
                    else{xSemaphoreGive( RXMotorM2Handle ); }
 8004912:	4602      	mov	r2, r0
 8004914:	4601      	mov	r1, r0
 8004916:	6830      	ldr	r0, [r6, #0]
 8004918:	f7fd fe32 	bl	8002580 <xQueueGenericSend>
 800491c:	e7f3      	b.n	8004906 <StartTXMotor2+0xba>
 800491e:	bf00      	nop
 8004920:	2000000a 	.word	0x2000000a
 8004924:	2000c454 	.word	0x2000c454
 8004928:	2000cae4 	.word	0x2000cae4
 800492c:	2000caa8 	.word	0x2000caa8
 8004930:	2000cbfc 	.word	0x2000cbfc
 8004934:	2000c45c 	.word	0x2000c45c
 8004938:	2000c9f4 	.word	0x2000c9f4
 800493c:	2000cbf8 	.word	0x2000cbf8
 8004940:	2000ca04 	.word	0x2000ca04

08004944 <HAL_UART_TxCpltCallback>:
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004944:	bf00      	nop
 8004946:	4770      	bx	lr

08004948 <HAL_UART_RxCpltCallback>:
//	if(GPIO_Pin == Foot_Switch_Pin){
//		FOOT_TRIGGER = 1;
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004948:	b507      	push	{r0, r1, r2, lr}
        BaseType_t xHigherPriorityTaskWoken;
        xHigherPriorityTaskWoken = pdFALSE;
 800494a:	2300      	movs	r3, #0
 800494c:	9301      	str	r3, [sp, #4]

        if(huart->Instance == UART4) {
 800494e:	6802      	ldr	r2, [r0, #0]
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_UART_RxCpltCallback+0x34>)
 8004952:	429a      	cmp	r2, r3
 8004954:	d104      	bne.n	8004960 <HAL_UART_RxCpltCallback+0x18>
                xSemaphoreGiveFromISR( PCRXHandle, &xHigherPriorityTaskWoken );
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_UART_RxCpltCallback+0x38>)
 8004958:	a901      	add	r1, sp, #4
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	f7fd fec2 	bl	80026e4 <xQueueGiveFromISR>
//        }

        /* If xHigherPriorityTaskWoken was set to true you
           we should yield.  The actual macro used here is
           port specific. portYIELD_FROM_ISR */
        portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8004960:	9b01      	ldr	r3, [sp, #4]
 8004962:	b13b      	cbz	r3, 8004974 <HAL_UART_RxCpltCallback+0x2c>
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <HAL_UART_RxCpltCallback+0x3c>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
}
 8004974:	b003      	add	sp, #12
 8004976:	f85d fb04 	ldr.w	pc, [sp], #4
 800497a:	bf00      	nop
 800497c:	40004c00 	.word	0x40004c00
 8004980:	2000c9fc 	.word	0x2000c9fc
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <HAL_UART_EndDMA_RX>:
//}

void HAL_UART_EndDMA_RX(UART_HandleTypeDef *huart){
/* Stop UART DMA Rx request if ongoing */
        uint32_t dmarequest = 0x00U;
        dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004988:	6803      	ldr	r3, [r0, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
        if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800498c:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 8004990:	2922      	cmp	r1, #34	; 0x22
//           we should yield.  The actual macro used here is
//           port specific. portYIELD_FROM_ISR */
//        portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
//}

void HAL_UART_EndDMA_RX(UART_HandleTypeDef *huart){
 8004992:	b510      	push	{r4, lr}
 8004994:	4604      	mov	r4, r0
/* Stop UART DMA Rx request if ongoing */
        uint32_t dmarequest = 0x00U;
        dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
        if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004996:	d115      	bne.n	80049c4 <HAL_UART_EndDMA_RX+0x3c>
 8004998:	0652      	lsls	r2, r2, #25
 800499a:	d513      	bpl.n	80049c4 <HAL_UART_EndDMA_RX+0x3c>
        {
                CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499c:	695a      	ldr	r2, [r3, #20]
                /* Abort the UART DMA Rx channel */
                if(huart->hdmarx != NULL)
 800499e:	6b40      	ldr	r0, [r0, #52]	; 0x34
/* Stop UART DMA Rx request if ongoing */
        uint32_t dmarequest = 0x00U;
        dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
        if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
        {
                CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a4:	615a      	str	r2, [r3, #20]
                /* Abort the UART DMA Rx channel */
                if(huart->hdmarx != NULL)
 80049a6:	b108      	cbz	r0, 80049ac <HAL_UART_EndDMA_RX+0x24>
                {
                        HAL_DMA_Abort(huart->hdmarx);
 80049a8:	f7fc fa6a 	bl	8000e80 <HAL_DMA_Abort>
                }
                /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
                CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049b4:	60da      	str	r2, [r3, #12]
                CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	615a      	str	r2, [r3, #20]
                /* At end of Rx process, restore huart->RxState to Ready */
                huart->RxState = HAL_UART_STATE_READY;
 80049be:	2320      	movs	r3, #32
 80049c0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80049c4:	bd10      	pop	{r4, pc}
	...

080049c8 <StartRXMotor1>:
  /* USER CODE END StartTXMotor2 */
}

/* StartRXMotor1 function */
void StartRXMotor1(void const * argument)
{
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t PCBuf[10] = {0};
    uint8_t *PCBufPTR;


    uint8_t OPCODE;
    uint8_t START_BYTE[2] = {0xA5, 0xFF};
 80049cc:	4a69      	ldr	r2, [pc, #420]	; (8004b74 <StartRXMotor1+0x1ac>)
                                    WORDtoBYTE.BYTE[1] = CURRENTrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = CURRENTrx.CRC2[1];
                                    CALC_CRC = crcCalc(CURRENTrx.DATA, 0, DATA_SIZE, 1);
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
                                            appendBytes(PCBuf, 10, 0, CURRENTrx.DATA, 0, DATA_SIZE);
                                            PCPacket.StatBIT_1 = 1;
 80049ce:	4e6a      	ldr	r6, [pc, #424]	; (8004b78 <StartRXMotor1+0x1b0>)
    uint8_t PCBuf[10] = {0};
    uint8_t *PCBufPTR;


    uint8_t OPCODE;
    uint8_t START_BYTE[2] = {0xA5, 0xFF};
 80049d0:	8812      	ldrh	r2, [r2, #0]
  /* USER CODE END StartTXMotor2 */
}

/* StartRXMotor1 function */
void StartRXMotor1(void const * argument)
{
 80049d2:	b095      	sub	sp, #84	; 0x54
  /* USER CODE BEGIN StartRXMotor1 */

    uint8_t PCBuf[10] = {0};
 80049d4:	af06      	add	r7, sp, #24
    uint8_t DATA_SIZE;
    uint8_t START_INDEX;
    uint32_t CALC_CRC;

    uint8_t INDEX_SIZE = 0;
    uint8_t INDEX[5] = {0};
 80049d6:	f10d 0910 	add.w	r9, sp, #16
/* StartRXMotor1 function */
void StartRXMotor1(void const * argument)
{
  /* USER CODE BEGIN StartRXMotor1 */

    uint8_t PCBuf[10] = {0};
 80049da:	2300      	movs	r3, #0
 80049dc:	9306      	str	r3, [sp, #24]
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	813b      	strh	r3, [r7, #8]
    uint8_t *PCBufPTR;


    uint8_t OPCODE;
    uint8_t START_BYTE[2] = {0xA5, 0xFF};
 80049e2:	f8ad 2008 	strh.w	r2, [sp, #8]
    uint8_t DATA_SIZE;
    uint8_t START_INDEX;
    uint32_t CALC_CRC;

    uint8_t INDEX_SIZE = 0;
    uint8_t INDEX[5] = {0};
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	f889 3004 	strb.w	r3, [r9, #4]
                                    WORDtoBYTE.BYTE[1] = CURRENTrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = CURRENTrx.CRC2[1];
                                    CALC_CRC = crcCalc(CURRENTrx.DATA, 0, DATA_SIZE, 1);
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
                                            appendBytes(PCBuf, 10, 0, CURRENTrx.DATA, 0, DATA_SIZE);
                                            PCPacket.StatBIT_1 = 1;
 80049ec:	46b3      	mov	fp, r6
    uint8_t rcvdCount;
    /* Infinite loop */
    for(;; )
    {
            //vTaskSuspend(NULL);
            xSemaphoreTake( RXMotorM1Handle, portMAX_DELAY );
 80049ee:	4863      	ldr	r0, [pc, #396]	; (8004b7c <StartRXMotor1+0x1b4>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 32ff 	mov.w	r2, #4294967295
 80049f8:	6800      	ldr	r0, [r0, #0]
 80049fa:	f7fd fec5 	bl	8002788 <xQueueGenericReceive>
            START_BYTE[0] = 0xA5;
 80049fe:	23a5      	movs	r3, #165	; 0xa5
            START_BYTE[1] = 0xFF;

            rcvdCount = sizeof(RXBufM1) - M1_UART.hdmarx->Instance->NDTR;
 8004a00:	485f      	ldr	r0, [pc, #380]	; (8004b80 <StartRXMotor1+0x1b8>)
    /* Infinite loop */
    for(;; )
    {
            //vTaskSuspend(NULL);
            xSemaphoreTake( RXMotorM1Handle, portMAX_DELAY );
            START_BYTE[0] = 0xA5;
 8004a02:	f88d 3008 	strb.w	r3, [sp, #8]
            START_BYTE[1] = 0xFF;
 8004a06:	23ff      	movs	r3, #255	; 0xff
 8004a08:	f88d 3009 	strb.w	r3, [sp, #9]

            rcvdCount = sizeof(RXBufM1) - M1_UART.hdmarx->Instance->NDTR;
 8004a0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685c      	ldr	r4, [r3, #4]
 8004a12:	f1c4 0432 	rsb	r4, r4, #50	; 0x32
 8004a16:	b2e4      	uxtb	r4, r4
            HAL_UART_EndDMA_RX(&M1_UART);
 8004a18:	f7ff ffb6 	bl	8004988 <HAL_UART_EndDMA_RX>
            //__HAL_UART_FLUSH_DRREGISTER(&huart2);

            if(rcvdCount>0) {
 8004a1c:	b97c      	cbnz	r4, 8004a3e <StartRXMotor1+0x76>
                    }
            }


            PCBufPTR = &PCBuf;
            if(PCPacket.StatBIT_1 && PCPacket.StatBIT_2 && PCPacket.StatBIT_3) {
 8004a1e:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
                            }
                    }
            }


            PCBufPTR = &PCBuf;
 8004a22:	9703      	str	r7, [sp, #12]
            if(PCPacket.StatBIT_1 && PCPacket.StatBIT_2 && PCPacket.StatBIT_3) {
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	2b07      	cmp	r3, #7
 8004a2a:	f040 8094 	bne.w	8004b56 <StartRXMotor1+0x18e>
                    xQueueOverwrite(ProcessQM1Handle, &PCBufPTR);
 8004a2e:	4855      	ldr	r0, [pc, #340]	; (8004b84 <StartRXMotor1+0x1bc>)
 8004a30:	2302      	movs	r3, #2
 8004a32:	2200      	movs	r2, #0
 8004a34:	a903      	add	r1, sp, #12
 8004a36:	6800      	ldr	r0, [r0, #0]
 8004a38:	f7fd fda2 	bl	8002580 <xQueueGenericSend>
 8004a3c:	e08b      	b.n	8004b56 <StartRXMotor1+0x18e>
            HAL_UART_EndDMA_RX(&M1_UART);
            //__HAL_UART_FLUSH_DRREGISTER(&huart2);

            if(rcvdCount>0) {

                    INDEX_SIZE = findMultipleBytes(RXBufM1, rcvdCount, START_BYTE, START_SIZE, INDEX, sizeof(INDEX));
 8004a3e:	2305      	movs	r3, #5
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	f8cd 9000 	str.w	r9, [sp]
 8004a46:	2302      	movs	r3, #2
 8004a48:	aa02      	add	r2, sp, #8
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	484e      	ldr	r0, [pc, #312]	; (8004b88 <StartRXMotor1+0x1c0>)
 8004a4e:	f7fe fe76 	bl	800373e <findMultipleBytes>

                    for(int i=0; i<INDEX_SIZE; i++) {
 8004a52:	f04f 0800 	mov.w	r8, #0
            HAL_UART_EndDMA_RX(&M1_UART);
            //__HAL_UART_FLUSH_DRREGISTER(&huart2);

            if(rcvdCount>0) {

                    INDEX_SIZE = findMultipleBytes(RXBufM1, rcvdCount, START_BYTE, START_SIZE, INDEX, sizeof(INDEX));
 8004a56:	4682      	mov	sl, r0

                    for(int i=0; i<INDEX_SIZE; i++) {
 8004a58:	45d0      	cmp	r8, sl
 8004a5a:	dae0      	bge.n	8004a1e <StartRXMotor1+0x56>
                            OPCODE = (RXBufM1[INDEX[i]+2] & 0b00111100)>>2;
 8004a5c:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <StartRXMotor1+0x1c0>)
 8004a5e:	f819 1008 	ldrb.w	r1, [r9, r8]
 8004a62:	4419      	add	r1, r3
                            START_INDEX = INDEX[i];
                            switch(OPCODE)
 8004a64:	788b      	ldrb	r3, [r1, #2]
 8004a66:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d004      	beq.n	8004a78 <StartRXMotor1+0xb0>
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d025      	beq.n	8004abe <StartRXMotor1+0xf6>
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d16c      	bne.n	8004b50 <StartRXMotor1+0x188>
 8004a76:	e046      	b.n	8004b06 <StartRXMotor1+0x13e>
                            {
                            case 0b0011: //Current_Set
                                    break;
                            case 0b1100: //Current_Data
                                    DATA_SIZE = 2;
                                    memcpy(CURRENTrxPTR, &RXBufM1[START_INDEX], rcvdCount);
 8004a78:	4622      	mov	r2, r4
 8004a7a:	a809      	add	r0, sp, #36	; 0x24
 8004a7c:	f001 f97f 	bl	8005d7e <memcpy>
                                    WORDtoBYTE.BYTE[1] = CURRENTrx.CRC2[0];
 8004a80:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004a84:	f363 250f 	bfi	r5, r3, #8, #8
                                    WORDtoBYTE.BYTE[0] = CURRENTrx.CRC2[1];
 8004a88:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
                                    CALC_CRC = crcCalc(CURRENTrx.DATA, 0, DATA_SIZE, 1);
 8004a8c:	2202      	movs	r2, #2
                                    break;
                            case 0b1100: //Current_Data
                                    DATA_SIZE = 2;
                                    memcpy(CURRENTrxPTR, &RXBufM1[START_INDEX], rcvdCount);
                                    WORDtoBYTE.BYTE[1] = CURRENTrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = CURRENTrx.CRC2[1];
 8004a8e:	f363 0507 	bfi	r5, r3, #0, #8
                                    CALC_CRC = crcCalc(CURRENTrx.DATA, 0, DATA_SIZE, 1);
 8004a92:	2100      	movs	r1, #0
 8004a94:	2301      	movs	r3, #1
 8004a96:	a80b      	add	r0, sp, #44	; 0x2c
 8004a98:	f7fe fe08 	bl	80036ac <crcCalc>
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
 8004a9c:	b2ab      	uxth	r3, r5
 8004a9e:	4298      	cmp	r0, r3
 8004aa0:	d156      	bne.n	8004b50 <StartRXMotor1+0x188>
                                            appendBytes(PCBuf, 10, 0, CURRENTrx.DATA, 0, DATA_SIZE);
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004aaa:	210a      	movs	r1, #10
 8004aac:	ab0b      	add	r3, sp, #44	; 0x2c
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f7fe fe6b 	bl	800378a <appendBytes>
                                            PCPacket.StatBIT_1 = 1;
 8004ab4:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	e046      	b.n	8004b4c <StartRXMotor1+0x184>
                                    }
                                    break;
                            case 0b1111: //Position_Data
                                    DATA_SIZE = 4;
                                    memcpy(POSITIONrxPTR, &RXBufM1[START_INDEX], rcvdCount);
 8004abe:	4622      	mov	r2, r4
 8004ac0:	a80c      	add	r0, sp, #48	; 0x30
 8004ac2:	f001 f95c 	bl	8005d7e <memcpy>
                                    WORDtoBYTE.BYTE[1] = POSITIONrx.CRC2[0];
 8004ac6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004aca:	f363 250f 	bfi	r5, r3, #8, #8
                                    WORDtoBYTE.BYTE[0] = POSITIONrx.CRC2[1];
 8004ace:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
                                    CALC_CRC = crcCalc(POSITIONrx.DATA, 0, DATA_SIZE, 1);
 8004ad2:	2204      	movs	r2, #4
                                    break;
                            case 0b1111: //Position_Data
                                    DATA_SIZE = 4;
                                    memcpy(POSITIONrxPTR, &RXBufM1[START_INDEX], rcvdCount);
                                    WORDtoBYTE.BYTE[1] = POSITIONrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = POSITIONrx.CRC2[1];
 8004ad4:	f363 0507 	bfi	r5, r3, #0, #8
                                    CALC_CRC = crcCalc(POSITIONrx.DATA, 0, DATA_SIZE, 1);
 8004ad8:	2100      	movs	r1, #0
 8004ada:	2301      	movs	r3, #1
 8004adc:	a80e      	add	r0, sp, #56	; 0x38
 8004ade:	f7fe fde5 	bl	80036ac <crcCalc>
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
 8004ae2:	b2ab      	uxth	r3, r5
 8004ae4:	4298      	cmp	r0, r3
 8004ae6:	d133      	bne.n	8004b50 <StartRXMotor1+0x188>
                                            appendBytes(PCBuf, 10, 2, POSITIONrx.DATA, 0, DATA_SIZE);
 8004ae8:	2100      	movs	r1, #0
 8004aea:	2304      	movs	r3, #4
 8004aec:	e88d 000a 	stmia.w	sp, {r1, r3}
 8004af0:	2202      	movs	r2, #2
 8004af2:	ab0e      	add	r3, sp, #56	; 0x38
 8004af4:	210a      	movs	r1, #10
 8004af6:	4638      	mov	r0, r7
 8004af8:	f7fe fe47 	bl	800378a <appendBytes>
                                            PCPacket.StatBIT_2 = 1;
 8004afc:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	e022      	b.n	8004b4c <StartRXMotor1+0x184>
                                    }
                                    break;
                            case 0b0101: //Velocity_Data
                                    DATA_SIZE = 4;
                                    memcpy(VELOCITYrxPTR, &RXBufM1[START_INDEX], rcvdCount);
 8004b06:	4622      	mov	r2, r4
 8004b08:	a810      	add	r0, sp, #64	; 0x40
 8004b0a:	f001 f938 	bl	8005d7e <memcpy>
                                    WORDtoBYTE.BYTE[1] = VELOCITYrx.CRC2[0];
 8004b0e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8004b12:	f363 250f 	bfi	r5, r3, #8, #8
                                    WORDtoBYTE.BYTE[0] = VELOCITYrx.CRC2[1];
 8004b16:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
                                    CALC_CRC = crcCalc(VELOCITYrx.DATA, 0, DATA_SIZE, 1);
 8004b1a:	2204      	movs	r2, #4
                                    break;
                            case 0b0101: //Velocity_Data
                                    DATA_SIZE = 4;
                                    memcpy(VELOCITYrxPTR, &RXBufM1[START_INDEX], rcvdCount);
                                    WORDtoBYTE.BYTE[1] = VELOCITYrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = VELOCITYrx.CRC2[1];
 8004b1c:	f363 0507 	bfi	r5, r3, #0, #8
                                    CALC_CRC = crcCalc(VELOCITYrx.DATA, 0, DATA_SIZE, 1);
 8004b20:	2100      	movs	r1, #0
 8004b22:	2301      	movs	r3, #1
 8004b24:	a812      	add	r0, sp, #72	; 0x48
 8004b26:	f7fe fdc1 	bl	80036ac <crcCalc>
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
 8004b2a:	b2ab      	uxth	r3, r5
 8004b2c:	4298      	cmp	r0, r3
 8004b2e:	d10f      	bne.n	8004b50 <StartRXMotor1+0x188>
                                            appendBytes(PCBuf, 10, 2 + 4, VELOCITYrx.DATA, 0, DATA_SIZE);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2304      	movs	r3, #4
 8004b34:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004b38:	210a      	movs	r1, #10
 8004b3a:	ab12      	add	r3, sp, #72	; 0x48
 8004b3c:	2206      	movs	r2, #6
 8004b3e:	4638      	mov	r0, r7
 8004b40:	f7fe fe23 	bl	800378a <appendBytes>
                                            PCPacket.StatBIT_3 = 1;
 8004b44:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8004b48:	f043 0304 	orr.w	r3, r3, #4
 8004b4c:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b

            if(rcvdCount>0) {

                    INDEX_SIZE = findMultipleBytes(RXBufM1, rcvdCount, START_BYTE, START_SIZE, INDEX, sizeof(INDEX));

                    for(int i=0; i<INDEX_SIZE; i++) {
 8004b50:	f108 0801 	add.w	r8, r8, #1
 8004b54:	e780      	b.n	8004a58 <StartRXMotor1+0x90>

            PCBufPTR = &PCBuf;
            if(PCPacket.StatBIT_1 && PCPacket.StatBIT_2 && PCPacket.StatBIT_3) {
                    xQueueOverwrite(ProcessQM1Handle, &PCBufPTR);
            }
            if(PCPacket.StatBIT_1 && PCPacket.StatBIT_2 && PCPacket.StatBIT_3) {
 8004b56:	f89b 305b 	ldrb.w	r3, [fp, #91]	; 0x5b
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b07      	cmp	r3, #7
 8004b60:	f47f af45 	bne.w	80049ee <StartRXMotor1+0x26>
                    xQueueOverwrite(ControlM1QHandle, &PCBufPTR);
 8004b64:	4809      	ldr	r0, [pc, #36]	; (8004b8c <StartRXMotor1+0x1c4>)
 8004b66:	2302      	movs	r3, #2
 8004b68:	2200      	movs	r2, #0
 8004b6a:	a903      	add	r1, sp, #12
 8004b6c:	6800      	ldr	r0, [r0, #0]
 8004b6e:	f7fd fd07 	bl	8002580 <xQueueGenericSend>
 8004b72:	e73c      	b.n	80049ee <StartRXMotor1+0x26>
 8004b74:	08006b9c 	.word	0x08006b9c
 8004b78:	2000cb94 	.word	0x2000cb94
 8004b7c:	2000ca10 	.word	0x2000ca10
 8004b80:	2000c4c0 	.word	0x2000c4c0
 8004b84:	2000ca00 	.word	0x2000ca00
 8004b88:	2000c594 	.word	0x2000c594
 8004b8c:	2000cc68 	.word	0x2000cc68

08004b90 <StartRXMotor2>:
  /* USER CODE END StartRXMotor1 */
}

/* StartRXMotor2 function */
void StartRXMotor2(void const * argument)
{
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    uint8_t PCBuf[10] = {0};
    uint8_t *PCBufPTR;

    uint8_t OPCODE;
    uint8_t START_BYTE[2] = {0xA5, 0xFF};
 8004b94:	4a6f      	ldr	r2, [pc, #444]	; (8004d54 <StartRXMotor2+0x1c4>)
                                    WORDtoBYTE.BYTE[1] = CURRENTrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = CURRENTrx.CRC2[1];
                                    CALC_CRC = crcCalc(CURRENTrx.DATA, 0, DATA_SIZE, 1);
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
                                            appendBytes(PCBuf, 10, 0, CURRENTrx.DATA, 0, DATA_SIZE);
                                            PCPacket.StatBIT_4 = 1;
 8004b96:	4e70      	ldr	r6, [pc, #448]	; (8004d58 <StartRXMotor2+0x1c8>)

    uint8_t PCBuf[10] = {0};
    uint8_t *PCBufPTR;

    uint8_t OPCODE;
    uint8_t START_BYTE[2] = {0xA5, 0xFF};
 8004b98:	8812      	ldrh	r2, [r2, #0]
  /* USER CODE END StartRXMotor1 */
}

/* StartRXMotor2 function */
void StartRXMotor2(void const * argument)
{
 8004b9a:	b095      	sub	sp, #84	; 0x54
  /* USER CODE BEGIN StartRXMotor2 */

    uint8_t PCBuf[10] = {0};
 8004b9c:	af06      	add	r7, sp, #24
    uint8_t DATA_SIZE;
    uint8_t START_INDEX;
    uint32_t CALC_CRC;

    uint8_t INDEX_SIZE = 0;
    uint8_t INDEX[5] = {0};
 8004b9e:	f10d 0910 	add.w	r9, sp, #16
/* StartRXMotor2 function */
void StartRXMotor2(void const * argument)
{
  /* USER CODE BEGIN StartRXMotor2 */

    uint8_t PCBuf[10] = {0};
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9306      	str	r3, [sp, #24]
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	813b      	strh	r3, [r7, #8]
    uint8_t *PCBufPTR;

    uint8_t OPCODE;
    uint8_t START_BYTE[2] = {0xA5, 0xFF};
 8004baa:	f8ad 2008 	strh.w	r2, [sp, #8]
    uint8_t DATA_SIZE;
    uint8_t START_INDEX;
    uint32_t CALC_CRC;

    uint8_t INDEX_SIZE = 0;
    uint8_t INDEX[5] = {0};
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	f889 3004 	strb.w	r3, [r9, #4]
    /* Infinite loop */
    for(;; )
    {
            //vTaskSuspend(NULL);

            xSemaphoreTake( RXMotorM2Handle, portMAX_DELAY );
 8004bb4:	4869      	ldr	r0, [pc, #420]	; (8004d5c <StartRXMotor2+0x1cc>)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbe:	6800      	ldr	r0, [r0, #0]
 8004bc0:	f7fd fde2 	bl	8002788 <xQueueGenericReceive>
            START_BYTE[0] = 0xA5;
 8004bc4:	23a5      	movs	r3, #165	; 0xa5
            START_BYTE[1] = 0xFF;

            rcvdCount = sizeof(RXBufM2) - M2_UART.hdmarx->Instance->NDTR;
 8004bc6:	4866      	ldr	r0, [pc, #408]	; (8004d60 <StartRXMotor2+0x1d0>)
    for(;; )
    {
            //vTaskSuspend(NULL);

            xSemaphoreTake( RXMotorM2Handle, portMAX_DELAY );
            START_BYTE[0] = 0xA5;
 8004bc8:	f88d 3008 	strb.w	r3, [sp, #8]
            START_BYTE[1] = 0xFF;
 8004bcc:	23ff      	movs	r3, #255	; 0xff
 8004bce:	f88d 3009 	strb.w	r3, [sp, #9]

            rcvdCount = sizeof(RXBufM2) - M2_UART.hdmarx->Instance->NDTR;
 8004bd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685c      	ldr	r4, [r3, #4]
 8004bd8:	f1c4 0432 	rsb	r4, r4, #50	; 0x32
 8004bdc:	b2e4      	uxtb	r4, r4
            HAL_UART_EndDMA_RX(&M2_UART);
 8004bde:	f7ff fed3 	bl	8004988 <HAL_UART_EndDMA_RX>
            //__HAL_UART_FLUSH_DRREGISTER(&huart3);

            if(rcvdCount>0) {
 8004be2:	b9a4      	cbnz	r4, 8004c0e <StartRXMotor2+0x7e>
                    }

            }

            PCBufPTR = &PCBuf;
            if(PCPacket.StatBIT_4 && PCPacket.StatBIT_5 && PCPacket.StatBIT_6) {
 8004be4:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
                            }
                    }

            }

            PCBufPTR = &PCBuf;
 8004be8:	9703      	str	r7, [sp, #12]
            if(PCPacket.StatBIT_4 && PCPacket.StatBIT_5 && PCPacket.StatBIT_6) {
 8004bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bee:	2b38      	cmp	r3, #56	; 0x38
 8004bf0:	f040 809f 	bne.w	8004d32 <StartRXMotor2+0x1a2>
                    xQueueOverwrite(ProcessQM2Handle, &PCBufPTR);
 8004bf4:	485b      	ldr	r0, [pc, #364]	; (8004d64 <StartRXMotor2+0x1d4>)
 8004bf6:	a903      	add	r1, sp, #12
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	6800      	ldr	r0, [r0, #0]
 8004bfe:	f7fd fcbf 	bl	8002580 <xQueueGenericSend>
                    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8004c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c06:	4858      	ldr	r0, [pc, #352]	; (8004d68 <StartRXMotor2+0x1d8>)
 8004c08:	f7fc fb32 	bl	8001270 <HAL_GPIO_TogglePin>
 8004c0c:	e091      	b.n	8004d32 <StartRXMotor2+0x1a2>
            HAL_UART_EndDMA_RX(&M2_UART);
            //__HAL_UART_FLUSH_DRREGISTER(&huart3);

            if(rcvdCount>0) {

                    INDEX_SIZE = findMultipleBytes(RXBufM2, rcvdCount, START_BYTE, START_SIZE, INDEX, sizeof(INDEX));
 8004c0e:	2305      	movs	r3, #5
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	f8cd 9000 	str.w	r9, [sp]
 8004c16:	2302      	movs	r3, #2
 8004c18:	aa02      	add	r2, sp, #8
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4853      	ldr	r0, [pc, #332]	; (8004d6c <StartRXMotor2+0x1dc>)

                    for(int i=0; i<INDEX_SIZE; i++) {
                            OPCODE = (RXBufM2[INDEX[i]+2] & 0b00111100)>>2;
 8004c1e:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8004d6c <StartRXMotor2+0x1dc>
            HAL_UART_EndDMA_RX(&M2_UART);
            //__HAL_UART_FLUSH_DRREGISTER(&huart3);

            if(rcvdCount>0) {

                    INDEX_SIZE = findMultipleBytes(RXBufM2, rcvdCount, START_BYTE, START_SIZE, INDEX, sizeof(INDEX));
 8004c22:	f7fe fd8c 	bl	800373e <findMultipleBytes>

                    for(int i=0; i<INDEX_SIZE; i++) {
 8004c26:	f04f 0800 	mov.w	r8, #0
            HAL_UART_EndDMA_RX(&M2_UART);
            //__HAL_UART_FLUSH_DRREGISTER(&huart3);

            if(rcvdCount>0) {

                    INDEX_SIZE = findMultipleBytes(RXBufM2, rcvdCount, START_BYTE, START_SIZE, INDEX, sizeof(INDEX));
 8004c2a:	4682      	mov	sl, r0

                    for(int i=0; i<INDEX_SIZE; i++) {
 8004c2c:	45d0      	cmp	r8, sl
 8004c2e:	dad9      	bge.n	8004be4 <StartRXMotor2+0x54>
                            OPCODE = (RXBufM2[INDEX[i]+2] & 0b00111100)>>2;
 8004c30:	f819 1008 	ldrb.w	r1, [r9, r8]
 8004c34:	4459      	add	r1, fp
                            START_INDEX = INDEX[i];
                            switch(OPCODE)
 8004c36:	788b      	ldrb	r3, [r1, #2]
 8004c38:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d004      	beq.n	8004c4a <StartRXMotor2+0xba>
 8004c40:	2b0f      	cmp	r3, #15
 8004c42:	d025      	beq.n	8004c90 <StartRXMotor2+0x100>
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d171      	bne.n	8004d2c <StartRXMotor2+0x19c>
 8004c48:	e046      	b.n	8004cd8 <StartRXMotor2+0x148>
                            {
                            case 0b0011: //Current_Set
                                    break;
                            case 0b1100: //Current_Data
                                    DATA_SIZE = 2;
                                    memcpy(CURRENTrxPTR, &RXBufM2[START_INDEX], rcvdCount);
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	a809      	add	r0, sp, #36	; 0x24
 8004c4e:	f001 f896 	bl	8005d7e <memcpy>
                                    WORDtoBYTE.BYTE[1] = CURRENTrx.CRC2[0];
 8004c52:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004c56:	f363 250f 	bfi	r5, r3, #8, #8
                                    WORDtoBYTE.BYTE[0] = CURRENTrx.CRC2[1];
 8004c5a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
                                    CALC_CRC = crcCalc(CURRENTrx.DATA, 0, DATA_SIZE, 1);
 8004c5e:	2202      	movs	r2, #2
                                    break;
                            case 0b1100: //Current_Data
                                    DATA_SIZE = 2;
                                    memcpy(CURRENTrxPTR, &RXBufM2[START_INDEX], rcvdCount);
                                    WORDtoBYTE.BYTE[1] = CURRENTrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = CURRENTrx.CRC2[1];
 8004c60:	f363 0507 	bfi	r5, r3, #0, #8
                                    CALC_CRC = crcCalc(CURRENTrx.DATA, 0, DATA_SIZE, 1);
 8004c64:	2100      	movs	r1, #0
 8004c66:	2301      	movs	r3, #1
 8004c68:	a80b      	add	r0, sp, #44	; 0x2c
 8004c6a:	f7fe fd1f 	bl	80036ac <crcCalc>
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
 8004c6e:	b2ab      	uxth	r3, r5
 8004c70:	4298      	cmp	r0, r3
 8004c72:	d15b      	bne.n	8004d2c <StartRXMotor2+0x19c>
                                            appendBytes(PCBuf, 10, 0, CURRENTrx.DATA, 0, DATA_SIZE);
 8004c74:	2200      	movs	r2, #0
 8004c76:	2302      	movs	r3, #2
 8004c78:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004c7c:	210a      	movs	r1, #10
 8004c7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004c80:	4638      	mov	r0, r7
 8004c82:	f7fe fd82 	bl	800378a <appendBytes>
                                            PCPacket.StatBIT_4 = 1;
 8004c86:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8004c8a:	f043 0308 	orr.w	r3, r3, #8
 8004c8e:	e046      	b.n	8004d1e <StartRXMotor2+0x18e>
                                            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
                                    }
                                    break;
                            case 0b1111: //Position_Data
                                    DATA_SIZE = 4;
                                    memcpy(POSITIONrxPTR, &RXBufM2[START_INDEX], rcvdCount);
 8004c90:	4622      	mov	r2, r4
 8004c92:	a80c      	add	r0, sp, #48	; 0x30
 8004c94:	f001 f873 	bl	8005d7e <memcpy>
                                    WORDtoBYTE.BYTE[1] = POSITIONrx.CRC2[0];
 8004c98:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004c9c:	f363 250f 	bfi	r5, r3, #8, #8
                                    WORDtoBYTE.BYTE[0] = POSITIONrx.CRC2[1];
 8004ca0:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
                                    CALC_CRC = crcCalc(POSITIONrx.DATA, 0, DATA_SIZE, 1);
 8004ca4:	2204      	movs	r2, #4
                                    break;
                            case 0b1111: //Position_Data
                                    DATA_SIZE = 4;
                                    memcpy(POSITIONrxPTR, &RXBufM2[START_INDEX], rcvdCount);
                                    WORDtoBYTE.BYTE[1] = POSITIONrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = POSITIONrx.CRC2[1];
 8004ca6:	f363 0507 	bfi	r5, r3, #0, #8
                                    CALC_CRC = crcCalc(POSITIONrx.DATA, 0, DATA_SIZE, 1);
 8004caa:	2100      	movs	r1, #0
 8004cac:	2301      	movs	r3, #1
 8004cae:	a80e      	add	r0, sp, #56	; 0x38
 8004cb0:	f7fe fcfc 	bl	80036ac <crcCalc>
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
 8004cb4:	b2ab      	uxth	r3, r5
 8004cb6:	4298      	cmp	r0, r3
 8004cb8:	d138      	bne.n	8004d2c <StartRXMotor2+0x19c>
                                            appendBytes(PCBuf, 10, 2, POSITIONrx.DATA, 0, DATA_SIZE);
 8004cba:	2100      	movs	r1, #0
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	e88d 000a 	stmia.w	sp, {r1, r3}
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	ab0e      	add	r3, sp, #56	; 0x38
 8004cc6:	210a      	movs	r1, #10
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7fe fd5e 	bl	800378a <appendBytes>
                                            PCPacket.StatBIT_5 = 1;
 8004cce:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8004cd2:	f043 0310 	orr.w	r3, r3, #16
 8004cd6:	e022      	b.n	8004d1e <StartRXMotor2+0x18e>
                                            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
                                    }
                                    break;
                            case 0b0101: //Velocity_Data
                                    DATA_SIZE = 4;
                                    memcpy(VELOCITYrxPTR, &RXBufM2[START_INDEX], rcvdCount);
 8004cd8:	4622      	mov	r2, r4
 8004cda:	a810      	add	r0, sp, #64	; 0x40
 8004cdc:	f001 f84f 	bl	8005d7e <memcpy>
                                    WORDtoBYTE.BYTE[1] = VELOCITYrx.CRC2[0];
 8004ce0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8004ce4:	f363 250f 	bfi	r5, r3, #8, #8
                                    WORDtoBYTE.BYTE[0] = VELOCITYrx.CRC2[1];
 8004ce8:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
                                    CALC_CRC = crcCalc(VELOCITYrx.DATA, 0, DATA_SIZE, 1);
 8004cec:	2204      	movs	r2, #4
                                    break;
                            case 0b0101: //Velocity_Data
                                    DATA_SIZE = 4;
                                    memcpy(VELOCITYrxPTR, &RXBufM2[START_INDEX], rcvdCount);
                                    WORDtoBYTE.BYTE[1] = VELOCITYrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = VELOCITYrx.CRC2[1];
 8004cee:	f363 0507 	bfi	r5, r3, #0, #8
                                    CALC_CRC = crcCalc(VELOCITYrx.DATA, 0, DATA_SIZE, 1);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	a812      	add	r0, sp, #72	; 0x48
 8004cf8:	f7fe fcd8 	bl	80036ac <crcCalc>
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
 8004cfc:	b2ab      	uxth	r3, r5
 8004cfe:	4298      	cmp	r0, r3
 8004d00:	d114      	bne.n	8004d2c <StartRXMotor2+0x19c>
                                            appendBytes(PCBuf, 10, 2 + 4, VELOCITYrx.DATA, 0, DATA_SIZE);
 8004d02:	2200      	movs	r2, #0
 8004d04:	2304      	movs	r3, #4
 8004d06:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004d0a:	210a      	movs	r1, #10
 8004d0c:	ab12      	add	r3, sp, #72	; 0x48
 8004d0e:	2206      	movs	r2, #6
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7fe fd3a 	bl	800378a <appendBytes>
                                            PCPacket.StatBIT_6 = 1;
 8004d16:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8004d1a:	f043 0320 	orr.w	r3, r3, #32
                                            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8004d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d22:	4811      	ldr	r0, [pc, #68]	; (8004d68 <StartRXMotor2+0x1d8>)
                                    WORDtoBYTE.BYTE[1] = VELOCITYrx.CRC2[0];
                                    WORDtoBYTE.BYTE[0] = VELOCITYrx.CRC2[1];
                                    CALC_CRC = crcCalc(VELOCITYrx.DATA, 0, DATA_SIZE, 1);
                                    if(WORDtoBYTE.HALFWORD==CALC_CRC) {
                                            appendBytes(PCBuf, 10, 2 + 4, VELOCITYrx.DATA, 0, DATA_SIZE);
                                            PCPacket.StatBIT_6 = 1;
 8004d24:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
                                            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8004d28:	f7fc faa2 	bl	8001270 <HAL_GPIO_TogglePin>

            if(rcvdCount>0) {

                    INDEX_SIZE = findMultipleBytes(RXBufM2, rcvdCount, START_BYTE, START_SIZE, INDEX, sizeof(INDEX));

                    for(int i=0; i<INDEX_SIZE; i++) {
 8004d2c:	f108 0801 	add.w	r8, r8, #1
 8004d30:	e77c      	b.n	8004c2c <StartRXMotor2+0x9c>
            PCBufPTR = &PCBuf;
            if(PCPacket.StatBIT_4 && PCPacket.StatBIT_5 && PCPacket.StatBIT_6) {
                    xQueueOverwrite(ProcessQM2Handle, &PCBufPTR);
                    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
            }
            if(PCPacket.StatBIT_4 && PCPacket.StatBIT_5 && PCPacket.StatBIT_6) {
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <StartRXMotor2+0x1c8>)
 8004d34:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8004d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d3c:	2b38      	cmp	r3, #56	; 0x38
 8004d3e:	f47f af39 	bne.w	8004bb4 <StartRXMotor2+0x24>
                    xQueueOverwrite(ControlM2QHandle, &PCBufPTR);
 8004d42:	480b      	ldr	r0, [pc, #44]	; (8004d70 <StartRXMotor2+0x1e0>)
 8004d44:	2302      	movs	r3, #2
 8004d46:	2200      	movs	r2, #0
 8004d48:	a903      	add	r1, sp, #12
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	f7fd fc18 	bl	8002580 <xQueueGenericSend>
 8004d50:	e730      	b.n	8004bb4 <StartRXMotor2+0x24>
 8004d52:	bf00      	nop
 8004d54:	08006b9c 	.word	0x08006b9c
 8004d58:	2000cb94 	.word	0x2000cb94
 8004d5c:	2000cbf8 	.word	0x2000cbf8
 8004d60:	2000cae4 	.word	0x2000cae4
 8004d64:	2000cb24 	.word	0x2000cb24
 8004d68:	40020400 	.word	0x40020400
 8004d6c:	2000caa8 	.word	0x2000caa8
 8004d70:	2000cae0 	.word	0x2000cae0
 8004d74:	00000000 	.word	0x00000000

08004d78 <ForwardKinematics>:
                /* At end of Rx process, restore huart->RxState to Ready */
                huart->RxState = HAL_UART_STATE_READY;
        }
}

float *ForwardKinematics(float phi1, float phi2){
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	ed2d 8b06 	vpush	{d8-d10}
        //phi2 = (phi2*2*PI)/360.0;

        static float l1 = 0.15; //length of upper linkage in m (measured from center of joint of 5 cm diameter)
        static float l2 = 0.3; //length of lower linkage in m (measured from center of joint of 5 cm diameter)

        ret[0] = fabs(-l1*cosf((phi1 + phi2)/2.0) + sqrt(pow(l2,2) - pow(l1,2)*pow(sinf((phi1 + phi2)/2.0),2))); //r
 8004d7e:	ee70 8a20 	vadd.f32	s17, s0, s1
 8004d82:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8004d86:	ee68 8a89 	vmul.f32	s17, s17, s18
                /* At end of Rx process, restore huart->RxState to Ready */
                huart->RxState = HAL_UART_STATE_READY;
        }
}

float *ForwardKinematics(float phi1, float phi2){
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	eeb0 8a40 	vmov.f32	s16, s0
        //phi2 = (phi2*2*PI)/360.0;

        static float l1 = 0.15; //length of upper linkage in m (measured from center of joint of 5 cm diameter)
        static float l2 = 0.3; //length of lower linkage in m (measured from center of joint of 5 cm diameter)

        ret[0] = fabs(-l1*cosf((phi1 + phi2)/2.0) + sqrt(pow(l2,2) - pow(l1,2)*pow(sinf((phi1 + phi2)/2.0),2))); //r
 8004d90:	eeb0 0a68 	vmov.f32	s0, s17
                /* At end of Rx process, restore huart->RxState to Ready */
                huart->RxState = HAL_UART_STATE_READY;
        }
}

float *ForwardKinematics(float phi1, float phi2){
 8004d94:	eef0 9a60 	vmov.f32	s19, s1
        //phi2 = (phi2*2*PI)/360.0;

        static float l1 = 0.15; //length of upper linkage in m (measured from center of joint of 5 cm diameter)
        static float l2 = 0.3; //length of lower linkage in m (measured from center of joint of 5 cm diameter)

        ret[0] = fabs(-l1*cosf((phi1 + phi2)/2.0) + sqrt(pow(l2,2) - pow(l1,2)*pow(sinf((phi1 + phi2)/2.0),2))); //r
 8004d98:	f001 f804 	bl	8005da4 <cosf>
 8004d9c:	eeb0 aa40 	vmov.f32	s20, s0
 8004da0:	eeb0 0a68 	vmov.f32	s0, s17
 8004da4:	f001 f83e 	bl	8005e24 <sinf>
 8004da8:	ee10 0a10 	vmov	r0, s0
 8004dac:	f7fb fb74 	bl	8000498 <__aeabi_f2d>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	f7fb fbc4 	bl	8000540 <__aeabi_dmul>
 8004db8:	a31b      	add	r3, pc, #108	; (adr r3, 8004e28 <ForwardKinematics+0xb0>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fbbf 	bl	8000540 <__aeabi_dmul>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	a11a      	add	r1, pc, #104	; (adr r1, 8004e30 <ForwardKinematics+0xb8>)
 8004dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dcc:	f7fb fa04 	bl	80001d8 <__aeabi_dsub>
 8004dd0:	ec41 0b10 	vmov	d0, r0, r1
 8004dd4:	f001 f868 	bl	8005ea8 <sqrt>
 8004dd8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8004e20 <ForwardKinematics+0xa8>
 8004ddc:	4c11      	ldr	r4, [pc, #68]	; (8004e24 <ForwardKinematics+0xac>)
 8004dde:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8004de2:	ec53 2b10 	vmov	r2, r3, d0
 8004de6:	ee17 0a90 	vmov	r0, s15
 8004dea:	e9cd 2300 	strd	r2, r3, [sp]
 8004dee:	f7fb fb53 	bl	8000498 <__aeabi_f2d>
 8004df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004df6:	f7fb f9f1 	bl	80001dc <__adddf3>
 8004dfa:	f7fb fe79 	bl	8000af0 <__aeabi_d2f>
        ret[1] = (phi1 - phi2)/2.0; //theta
 8004dfe:	ee38 8a69 	vsub.f32	s16, s16, s19
        //phi2 = (phi2*2*PI)/360.0;

        static float l1 = 0.15; //length of upper linkage in m (measured from center of joint of 5 cm diameter)
        static float l2 = 0.3; //length of lower linkage in m (measured from center of joint of 5 cm diameter)

        ret[0] = fabs(-l1*cosf((phi1 + phi2)/2.0) + sqrt(pow(l2,2) - pow(l1,2)*pow(sinf((phi1 + phi2)/2.0),2))); //r
 8004e02:	ee07 0a90 	vmov	s15, r0
        ret[1] = (phi1 - phi2)/2.0; //theta
 8004e06:	ee28 8a09 	vmul.f32	s16, s16, s18
        //phi2 = (phi2*2*PI)/360.0;

        static float l1 = 0.15; //length of upper linkage in m (measured from center of joint of 5 cm diameter)
        static float l2 = 0.3; //length of lower linkage in m (measured from center of joint of 5 cm diameter)

        ret[0] = fabs(-l1*cosf((phi1 + phi2)/2.0) + sqrt(pow(l2,2) - pow(l1,2)*pow(sinf((phi1 + phi2)/2.0),2))); //r
 8004e0a:	eef0 7ae7 	vabs.f32	s15, s15
                return ret;
        }
        else{
                return NULL;
        }
}
 8004e0e:	4620      	mov	r0, r4
        //phi2 = (phi2*2*PI)/360.0;

        static float l1 = 0.15; //length of upper linkage in m (measured from center of joint of 5 cm diameter)
        static float l2 = 0.3; //length of lower linkage in m (measured from center of joint of 5 cm diameter)

        ret[0] = fabs(-l1*cosf((phi1 + phi2)/2.0) + sqrt(pow(l2,2) - pow(l1,2)*pow(sinf((phi1 + phi2)/2.0),2))); //r
 8004e10:	edc4 7a00 	vstr	s15, [r4]
        ret[1] = (phi1 - phi2)/2.0; //theta
 8004e14:	ed84 8a01 	vstr	s16, [r4, #4]
                return ret;
        }
        else{
                return NULL;
        }
}
 8004e18:	b002      	add	sp, #8
 8004e1a:	ecbd 8b06 	vpop	{d8-d10}
 8004e1e:	bd10      	pop	{r4, pc}
 8004e20:	be19999a 	.word	0xbe19999a
 8004e24:	2000c300 	.word	0x2000c300
 8004e28:	8f5c2900 	.word	0x8f5c2900
 8004e2c:	3f970a3d 	.word	0x3f970a3d
 8004e30:	8f5c2900 	.word	0x8f5c2900
 8004e34:	3fb70a3d 	.word	0x3fb70a3d

08004e38 <StartController>:
  /* USER CODE END StartRXMotor2 */
}

/* StartController function */
void StartController(void const * argument)
{
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	ed2d 8b10 	vpush	{d8-d15}
    //Foot forces
    float f_r = 0;
    float f_s = 0;

    //Motor constants
    float k_i = 0.08; //0.119
 8004e40:	eddf 7a95 	vldr	s15, [pc, #596]	; 8005098 <StartController+0x260>
    //Weighting
    float k_r = 0;
    float k_s = 0;

    float ki_r = 0;
    float ki_s = 0;
 8004e44:	ed9f ba95 	vldr	s22, [pc, #596]	; 800509c <StartController+0x264>
    float Error_s_CV = 0;
    float Error_s_PV = 0;

    //Spring feedback
    float r_fbk = 0;
    float r_cmd = 0.3;
 8004e48:	eddf ca95 	vldr	s25, [pc, #596]	; 80050a0 <StartController+0x268>
  /* USER CODE END StartRXMotor2 */
}

/* StartController function */
void StartController(void const * argument)
{
 8004e4c:	b0a1      	sub	sp, #132	; 0x84
    //Foot forces
    float f_r = 0;
    float f_s = 0;

    //Motor constants
    float k_i = 0.08; //0.119
 8004e4e:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34

    //Spring damper constants
    float ks_s = 200;
    float kd_s = 30;

    float ks_r = 200; //200
 8004e52:	eddf 7a94 	vldr	s15, [pc, #592]	; 80050a4 <StartController+0x26c>

    //Weighting
    float k_r = 0;
    float k_s = 0;

    float ki_r = 0;
 8004e56:	ed8d ba0c 	vstr	s22, [sp, #48]	; 0x30
    //Spring damper constants
    float ks_s = 200;
    float kd_s = 30;

    float ks_r = 200; //200
    float kd_r = 30; //30
 8004e5a:	eef3 fa0e 	vmov.f32	s31, #62	; 0x41f00000  30.0

    //Motor constants
    float k_i = 0.08; //0.119

    //Trajectory
    int i_traj = 0;
 8004e5e:	f04f 0a00 	mov.w	sl, #0
    float dphi1_cmd = 0;
    float dphi2_cmd = 0;

    //Weighting
    float k_r = 0;
    float k_s = 0;
 8004e62:	ed8d ba0b 	vstr	s22, [sp, #44]	; 0x2c
    float phi2_cmd = 0;
    float dphi1_cmd = 0;
    float dphi2_cmd = 0;

    //Weighting
    float k_r = 0;
 8004e66:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28

    //Spring damper constants
    float ks_s = 200;
    float kd_s = 30;

    float ks_r = 200; //200
 8004e6a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    float F[2] = {0};
    float Tau[2] = {0};

    //Spring damper constants
    float ks_s = 200;
    float kd_s = 30;
 8004e6e:	edcd fa08 	vstr	s31, [sp, #32]
    float J[2][2] = {0};
    float F[2] = {0};
    float Tau[2] = {0};

    //Spring damper constants
    float ks_s = 200;
 8004e72:	edcd 7a07 	vstr	s15, [sp, #28]

    float theta_fbk = 0;
    float theta_d_fbk = 0;

    float s_fbk = 0;
    float s_cmd = 0;
 8004e76:	eeb0 ca4b 	vmov.f32	s24, s22
    float Error_r_CV = 0;
    float Error_r_PV = 0;

    float Error_s = 0;
    float Error_s_CV = 0;
    float Error_s_PV = 0;
 8004e7a:	eef0 9a4b 	vmov.f32	s19, s22
    float *ret;

    //Negative position feedback
    float Error_r = 0;
    float Error_r_CV = 0;
    float Error_r_PV = 0;
 8004e7e:	eeb0 9a4b 	vmov.f32	s18, s22

    /* Infinite loop */
    for(;; )
    {

            if(uxQueueMessagesWaiting(ControlM1QHandle) && uxQueueMessagesWaiting(ControlM2QHandle)) {
 8004e82:	4c89      	ldr	r4, [pc, #548]	; (80050a8 <StartController+0x270>)
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	f7fd fd3b 	bl	8002900 <uxQueueMessagesWaiting>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d0fa      	beq.n	8004e84 <StartController+0x4c>
 8004e8e:	4c87      	ldr	r4, [pc, #540]	; (80050ac <StartController+0x274>)
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	f7fd fd35 	bl	8002900 <uxQueueMessagesWaiting>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d0f3      	beq.n	8004e82 <StartController+0x4a>

                    //Data from Drivers
                    if(xQueueReceive(ControlM1QHandle, &pxRxedMessage, 0 )) {
 8004e9a:	4883      	ldr	r0, [pc, #524]	; (80050a8 <StartController+0x270>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	a91f      	add	r1, sp, #124	; 0x7c
 8004ea2:	6800      	ldr	r0, [r0, #0]
 8004ea4:	f7fd fc70 	bl	8002788 <xQueueGenericReceive>
 8004ea8:	b138      	cbz	r0, 8004eba <StartController+0x82>
                            memcpy(ControlPacket.M1C, pxRxedMessage, 10);
 8004eaa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004eac:	4b80      	ldr	r3, [pc, #512]	; (80050b0 <StartController+0x278>)
 8004eae:	6811      	ldr	r1, [r2, #0]
 8004eb0:	6019      	str	r1, [r3, #0]
 8004eb2:	6851      	ldr	r1, [r2, #4]
 8004eb4:	6059      	str	r1, [r3, #4]
 8004eb6:	8912      	ldrh	r2, [r2, #8]
 8004eb8:	811a      	strh	r2, [r3, #8]
                    }
                    if(xQueueReceive(ControlM2QHandle, &pxRxedMessage, 0 )) {
 8004eba:	2300      	movs	r3, #0
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	a91f      	add	r1, sp, #124	; 0x7c
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	f7fd fc61 	bl	8002788 <xQueueGenericReceive>
 8004ec6:	b138      	cbz	r0, 8004ed8 <StartController+0xa0>
                            memcpy(ControlPacket.M2C, pxRxedMessage, 10);
 8004ec8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004eca:	4b7a      	ldr	r3, [pc, #488]	; (80050b4 <StartController+0x27c>)
 8004ecc:	6811      	ldr	r1, [r2, #0]
 8004ece:	6019      	str	r1, [r3, #0]
 8004ed0:	6851      	ldr	r1, [r2, #4]
 8004ed2:	6059      	str	r1, [r3, #4]
 8004ed4:	8912      	ldrh	r2, [r2, #8]
 8004ed6:	811a      	strh	r2, [r3, #8]
                    }

                    //Data from PC
                    if(RX_DATA_VALID) {
 8004ed8:	4b77      	ldr	r3, [pc, #476]	; (80050b8 <StartController+0x280>)
 8004eda:	781a      	ldrb	r2, [r3, #0]
 8004edc:	b33a      	cbz	r2, 8004f2e <StartController+0xf6>
                            RX_DATA_VALID = 0;
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
                            r_cmd = RXPacket.r_cmd;
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <StartController+0x284>)
 8004ee4:	f8d3 2013 	ldr.w	r2, [r3, #19]
 8004ee8:	ee0c 2a90 	vmov	s25, r2
                            s_cmd = RXPacket.s_cmd;
 8004eec:	f8d3 2017 	ldr.w	r2, [r3, #23]
 8004ef0:	ee0c 2a10 	vmov	s24, r2
                            k_r = RXPacket.k_r;
 8004ef4:	f8d3 201b 	ldr.w	r2, [r3, #27]
 8004ef8:	920a      	str	r2, [sp, #40]	; 0x28
                            k_s = RXPacket.k_s;
 8004efa:	f8d3 201f 	ldr.w	r2, [r3, #31]
 8004efe:	920b      	str	r2, [sp, #44]	; 0x2c
                            ki_r = RXPacket.ki_r;
 8004f00:	f8d3 2023 	ldr.w	r2, [r3, #35]	; 0x23
 8004f04:	920c      	str	r2, [sp, #48]	; 0x30
                            ki_s = RXPacket.ki_s;
 8004f06:	f8d3 2027 	ldr.w	r2, [r3, #39]	; 0x27
 8004f0a:	ee0b 2a10 	vmov	s22, r2
                            ks_r = RXPacket.kr_s;
 8004f0e:	f8d3 202b 	ldr.w	r2, [r3, #43]	; 0x2b
 8004f12:	9209      	str	r2, [sp, #36]	; 0x24
                            kd_r = RXPacket.kr_d;
 8004f14:	f8d3 202f 	ldr.w	r2, [r3, #47]	; 0x2f
 8004f18:	ee0f 2a90 	vmov	s31, r2
                            ks_s = RXPacket.ks_s;
 8004f1c:	f8d3 2033 	ldr.w	r2, [r3, #51]	; 0x33
 8004f20:	9207      	str	r2, [sp, #28]
                            kd_s = RXPacket.ks_d;
 8004f22:	f8d3 2037 	ldr.w	r2, [r3, #55]	; 0x37
 8004f26:	9208      	str	r2, [sp, #32]
                            k_i = RXPacket.k_i;
 8004f28:	f8d3 303b 	ldr.w	r3, [r3, #59]	; 0x3b
 8004f2c:	930d      	str	r3, [sp, #52]	; 0x34
                    }

                    if(START==1) {
 8004f2e:	4e64      	ldr	r6, [pc, #400]	; (80050c0 <StartController+0x288>)
 8004f30:	7834      	ldrb	r4, [r6, #0]
 8004f32:	2c01      	cmp	r4, #1
 8004f34:	d1a5      	bne.n	8004e82 <StartController+0x4a>
                            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);

                            memcpy(F2B.BYTE, ControlPacket.M1C, 2);
                            I_fbk[0] = F2B.INT16/(pow(2.0,13)/60.0);

                            memcpy(F2B.BYTE, ControlPacket.M1P, 4);
 8004f36:	4d5e      	ldr	r5, [pc, #376]	; (80050b0 <StartController+0x278>)
                            k_i = RXPacket.k_i;
                    }

                    if(START==1) {
                            valid = 1;
                            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8004f38:	4862      	ldr	r0, [pc, #392]	; (80050c4 <StartController+0x28c>)
 8004f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f3e:	f7fc f997 	bl	8001270 <HAL_GPIO_TogglePin>

                            memcpy(F2B.BYTE, ControlPacket.M1C, 2);
                            I_fbk[0] = F2B.INT16/(pow(2.0,13)/60.0);

                            memcpy(F2B.BYTE, ControlPacket.M1P, 4);
                            phi1 = (F2B.INT32/(4*250.0) - 1)*(-180.0)*(2*PI/360.0);
 8004f42:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8004f46:	f7fb fa95 	bl	8000474 <__aeabi_i2d>
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <StartController+0x290>)
 8004f4e:	f7fb fc21 	bl	8000794 <__aeabi_ddiv>
 8004f52:	2200      	movs	r2, #0
 8004f54:	4b5d      	ldr	r3, [pc, #372]	; (80050cc <StartController+0x294>)
 8004f56:	f7fb f93f 	bl	80001d8 <__aeabi_dsub>
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4b5c      	ldr	r3, [pc, #368]	; (80050d0 <StartController+0x298>)
 8004f5e:	f7fb faef 	bl	8000540 <__aeabi_dmul>
 8004f62:	a345      	add	r3, pc, #276	; (adr r3, 8005078 <StartController+0x240>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f7fb faea 	bl	8000540 <__aeabi_dmul>
 8004f6c:	f7fb fdc0 	bl	8000af0 <__aeabi_d2f>
 8004f70:	ee0d 0a10 	vmov	s26, r0

                            memcpy(F2B.BYTE, ControlPacket.M1V, 4);
                            dphi1 = -(F2B.INT32/(pow(2.0,17)/20000.0))*(1/2000.0)*60.0*(2*PI/60.0);
 8004f74:	f8d5 0006 	ldr.w	r0, [r5, #6]
 8004f78:	f7fb fa7c 	bl	8000474 <__aeabi_i2d>
 8004f7c:	a340      	add	r3, pc, #256	; (adr r3, 8005080 <StartController+0x248>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f7fb fc07 	bl	8000794 <__aeabi_ddiv>
 8004f86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f8c:	900e      	str	r0, [sp, #56]	; 0x38
 8004f8e:	a33e      	add	r3, pc, #248	; (adr r3, 8005088 <StartController+0x250>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f98:	f7fb fad2 	bl	8000540 <__aeabi_dmul>
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <StartController+0x29c>)
 8004fa0:	f7fb face 	bl	8000540 <__aeabi_dmul>
 8004fa4:	a33a      	add	r3, pc, #232	; (adr r3, 8005090 <StartController+0x258>)
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f7fb fac9 	bl	8000540 <__aeabi_dmul>
 8004fae:	f7fb fd9f 	bl	8000af0 <__aeabi_d2f>
 8004fb2:	ee0e 0a10 	vmov	s28, r0

                            memcpy(F2B.BYTE, ControlPacket.M2C, 2);
                            I_fbk[1] = F2B.INT16/(pow(2.0,13)/60.0);

                            memcpy(F2B.BYTE, ControlPacket.M2P, 4);
                            phi2 = (F2B.INT32/(4*250.0) + 1)*180.0*(2*PI/360.0);
 8004fb6:	68e8      	ldr	r0, [r5, #12]
 8004fb8:	f7fb fa5c 	bl	8000474 <__aeabi_i2d>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <StartController+0x290>)
 8004fc0:	f7fb fbe8 	bl	8000794 <__aeabi_ddiv>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4b41      	ldr	r3, [pc, #260]	; (80050cc <StartController+0x294>)
 8004fc8:	f7fb f908 	bl	80001dc <__adddf3>
 8004fcc:	2200      	movs	r2, #0
 8004fce:	4b42      	ldr	r3, [pc, #264]	; (80050d8 <StartController+0x2a0>)
 8004fd0:	f7fb fab6 	bl	8000540 <__aeabi_dmul>
 8004fd4:	a328      	add	r3, pc, #160	; (adr r3, 8005078 <StartController+0x240>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f7fb fab1 	bl	8000540 <__aeabi_dmul>
 8004fde:	f7fb fd87 	bl	8000af0 <__aeabi_d2f>
 8004fe2:	ee08 0a90 	vmov	s17, r0

                            memcpy(F2B.BYTE, ControlPacket.M2V, 4);
                            dphi2 = (F2B.INT32/(pow(2.0,17)/20000.0))*(1/2000.0)*60.0*(2*PI/60.0);
 8004fe6:	6928      	ldr	r0, [r5, #16]
 8004fe8:	f7fb fa44 	bl	8000474 <__aeabi_i2d>
 8004fec:	a324      	add	r3, pc, #144	; (adr r3, 8005080 <StartController+0x248>)
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	f7fb fbcf 	bl	8000794 <__aeabi_ddiv>
 8004ff6:	a324      	add	r3, pc, #144	; (adr r3, 8005088 <StartController+0x250>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f7fb faa0 	bl	8000540 <__aeabi_dmul>
 8005000:	2200      	movs	r2, #0
 8005002:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <StartController+0x29c>)
 8005004:	f7fb fa9c 	bl	8000540 <__aeabi_dmul>
 8005008:	a321      	add	r3, pc, #132	; (adr r3, 8005090 <StartController+0x258>)
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f7fb fa97 	bl	8000540 <__aeabi_dmul>
 8005012:	f7fb fd6d 	bl	8000af0 <__aeabi_d2f>

                            //Forward kinematic mapping
                            ret = ForwardKinematics(phi1, phi2);
 8005016:	eef0 0a68 	vmov.f32	s1, s17
 800501a:	eeb0 0a4d 	vmov.f32	s0, s26

                            memcpy(F2B.BYTE, ControlPacket.M2P, 4);
                            phi2 = (F2B.INT32/(4*250.0) + 1)*180.0*(2*PI/360.0);

                            memcpy(F2B.BYTE, ControlPacket.M2V, 4);
                            dphi2 = (F2B.INT32/(pow(2.0,17)/20000.0))*(1/2000.0)*60.0*(2*PI/60.0);
 800501e:	ee08 0a10 	vmov	s16, r0

                            //Forward kinematic mapping
                            ret = ForwardKinematics(phi1, phi2);
 8005022:	f7ff fea9 	bl	8004d78 <ForwardKinematics>
                            if(ret == NULL) {
 8005026:	4605      	mov	r5, r0
 8005028:	2800      	cmp	r0, #0
 800502a:	d161      	bne.n	80050f0 <StartController+0x2b8>
                                    valid = 0;
                                    START = 0;
 800502c:	7030      	strb	r0, [r6, #0]
                                    BaseCommandCompile(RXPacket.OPCODE, 0b0001, 0x02, 0x01, 0x00, KILL_BRIDGE_DATA, 1, 2);
 800502e:	4e23      	ldr	r6, [pc, #140]	; (80050bc <StartController+0x284>)
 8005030:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <StartController+0x2a4>)
 8005032:	78b0      	ldrb	r0, [r6, #2]
 8005034:	9402      	str	r4, [sp, #8]
 8005036:	2202      	movs	r2, #2
 8005038:	4621      	mov	r1, r4
 800503a:	9203      	str	r2, [sp, #12]
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	9500      	str	r5, [sp, #0]
 8005040:	4623      	mov	r3, r4
 8005042:	f7ff f80b 	bl	800405c <BaseCommandCompile>
                                    BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 8005046:	78b3      	ldrb	r3, [r6, #2]
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <StartController+0x2a8>)
 800504a:	4c26      	ldr	r4, [pc, #152]	; (80050e4 <StartController+0x2ac>)
                                    xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 800504c:	4826      	ldr	r0, [pc, #152]	; (80050e8 <StartController+0x2b0>)
                            ret = ForwardKinematics(phi1, phi2);
                            if(ret == NULL) {
                                    valid = 0;
                                    START = 0;
                                    BaseCommandCompile(RXPacket.OPCODE, 0b0001, 0x02, 0x01, 0x00, KILL_BRIDGE_DATA, 1, 2);
                                    BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
 800504e:	210e      	movs	r1, #14
 8005050:	fb01 2303 	mla	r3, r1, r3, r2
 8005054:	6023      	str	r3, [r4, #0]
                                    xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8005056:	2205      	movs	r2, #5
 8005058:	462b      	mov	r3, r5
 800505a:	4621      	mov	r1, r4
 800505c:	6800      	ldr	r0, [r0, #0]
 800505e:	f7fd fa8f 	bl	8002580 <xQueueGenericSend>
                                    xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
 8005062:	4822      	ldr	r0, [pc, #136]	; (80050ec <StartController+0x2b4>)
 8005064:	462b      	mov	r3, r5
 8005066:	2205      	movs	r2, #5
 8005068:	4621      	mov	r1, r4
 800506a:	6800      	ldr	r0, [r0, #0]
 800506c:	f7fd fa88 	bl	8002580 <xQueueGenericSend>
                            dphi2 = (F2B.INT32/(pow(2.0,17)/20000.0))*(1/2000.0)*60.0*(2*PI/60.0);

                            //Forward kinematic mapping
                            ret = ForwardKinematics(phi1, phi2);
                            if(ret == NULL) {
                                    valid = 0;
 8005070:	46ab      	mov	fp, r5
 8005072:	e03e      	b.n	80050f2 <StartController+0x2ba>
 8005074:	f3af 8000 	nop.w
 8005078:	aaaaaaab 	.word	0xaaaaaaab
 800507c:	3f91df46 	.word	0x3f91df46
 8005080:	eb1c432d 	.word	0xeb1c432d
 8005084:	401a36e2 	.word	0x401a36e2
 8005088:	d2f1a9fc 	.word	0xd2f1a9fc
 800508c:	3f40624d 	.word	0x3f40624d
 8005090:	00000000 	.word	0x00000000
 8005094:	3fbaceea 	.word	0x3fbaceea
 8005098:	3da3d70a 	.word	0x3da3d70a
 800509c:	00000000 	.word	0x00000000
 80050a0:	3e99999a 	.word	0x3e99999a
 80050a4:	43480000 	.word	0x43480000
 80050a8:	2000cc68 	.word	0x2000cc68
 80050ac:	2000cae0 	.word	0x2000cae0
 80050b0:	2000c50c 	.word	0x2000c50c
 80050b4:	2000c516 	.word	0x2000c516
 80050b8:	2000c310 	.word	0x2000c310
 80050bc:	2000cb28 	.word	0x2000cb28
 80050c0:	2000c30a 	.word	0x2000c30a
 80050c4:	40020400 	.word	0x40020400
 80050c8:	408f4000 	.word	0x408f4000
 80050cc:	3ff00000 	.word	0x3ff00000
 80050d0:	c0668000 	.word	0xc0668000
 80050d4:	404e0000 	.word	0x404e0000
 80050d8:	40668000 	.word	0x40668000
 80050dc:	20000008 	.word	0x20000008
 80050e0:	2000c6d4 	.word	0x2000c6d4
 80050e4:	2000c320 	.word	0x2000c320
 80050e8:	2000c6cc 	.word	0x2000c6cc
 80050ec:	2000cbfc 	.word	0x2000cbfc
                            kd_s = RXPacket.ks_d;
                            k_i = RXPacket.k_i;
                    }

                    if(START==1) {
                            valid = 1;
 80050f0:	46a3      	mov	fp, r4
//                                JT[0][0] = (3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0)));
//                                JT[0][1] = (((3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))))*(phi1 - phi2))/2.0 - (3*cosf(phi1/2.0 + phi2/2.0))/40 + pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2))/400.0),(1/2.0))/2.0;
//                                JT[1][0] = (3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2))/400.0),(1/2.0)));
//                                JT[1][1] = (3*cosf(phi1/2.0 + phi2/2.0))/40.0 + (((3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))))*(phi1 - phi2))/2.0 - pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))/2.0;

                            JT[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 80050f2:	ee1d 0a10 	vmov	r0, s26
 80050f6:	f7fb f9cf 	bl	8000498 <__aeabi_f2d>
 80050fa:	2200      	movs	r2, #0
 80050fc:	4be0      	ldr	r3, [pc, #896]	; (8005480 <StartController+0x648>)
                                    BaseCommandCompile(RXPacket.OPCODE, 0b0001, 0x02, 0x01, 0x00, KILL_BRIDGE_DATA, 1, 2);
                                    BaseCommandPTR = &BaseCommand[RXPacket.OPCODE];
                                    xQueueSendToBack( CommandM1QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                                    xQueueSendToBack( CommandM2QHandle, &BaseCommandPTR, ( TickType_t ) 5);
                            }
                            r_fbk = ret[0];
 80050fe:	edd5 ba00 	vldr	s23, [r5]
                            theta_fbk = ret[1];
 8005102:	edd5 da01 	vldr	s27, [r5, #4]
//                                JT[0][0] = (3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0)));
//                                JT[0][1] = (((3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))))*(phi1 - phi2))/2.0 - (3*cosf(phi1/2.0 + phi2/2.0))/40 + pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2))/400.0),(1/2.0))/2.0;
//                                JT[1][0] = (3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2))/400.0),(1/2.0)));
//                                JT[1][1] = (3*cosf(phi1/2.0 + phi2/2.0))/40.0 + (((3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))))*(phi1 - phi2))/2.0 - pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))/2.0;

                            JT[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 8005106:	f7fb fa1b 	bl	8000540 <__aeabi_dmul>
 800510a:	4604      	mov	r4, r0
 800510c:	ee18 0a90 	vmov	r0, s17
 8005110:	460d      	mov	r5, r1
 8005112:	f7fb f9c1 	bl	8000498 <__aeabi_f2d>
 8005116:	2200      	movs	r2, #0
 8005118:	4bd9      	ldr	r3, [pc, #868]	; (8005480 <StartController+0x648>)
 800511a:	f7fb fa11 	bl	8000540 <__aeabi_dmul>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4620      	mov	r0, r4
 8005124:	4629      	mov	r1, r5
 8005126:	f7fb f859 	bl	80001dc <__adddf3>
 800512a:	f7fb fce1 	bl	8000af0 <__aeabi_d2f>
 800512e:	ee00 0a10 	vmov	s0, r0
 8005132:	ee0a 0a90 	vmov	s21, r0
 8005136:	f000 fe75 	bl	8005e24 <sinf>
 800513a:	ee10 0a10 	vmov	r0, s0
 800513e:	eeb0 aa40 	vmov.f32	s20, s0
 8005142:	f7fb f9a9 	bl	8000498 <__aeabi_f2d>
 8005146:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800514a:	4bce      	ldr	r3, [pc, #824]	; (8005484 <StartController+0x64c>)
 800514c:	4604      	mov	r4, r0
 800514e:	460d      	mov	r5, r1
 8005150:	f7fb f9f6 	bl	8000540 <__aeabi_dmul>
 8005154:	eeb0 0a6a 	vmov.f32	s0, s21
 8005158:	4680      	mov	r8, r0
 800515a:	4689      	mov	r9, r1
 800515c:	f000 fe22 	bl	8005da4 <cosf>
 8005160:	ee6a 7a00 	vmul.f32	s15, s20, s0
 8005164:	eeb0 fa40 	vmov.f32	s30, s0
 8005168:	ee17 0a90 	vmov	r0, s15
 800516c:	f7fb f994 	bl	8000498 <__aeabi_f2d>
 8005170:	4622      	mov	r2, r4
 8005172:	4606      	mov	r6, r0
 8005174:	460f      	mov	r7, r1
 8005176:	462b      	mov	r3, r5
 8005178:	4620      	mov	r0, r4
 800517a:	4629      	mov	r1, r5
 800517c:	f7fb f9e0 	bl	8000540 <__aeabi_dmul>
 8005180:	a3b7      	add	r3, pc, #732	; (adr r3, 8005460 <StartController+0x628>)
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f7fb f9db 	bl	8000540 <__aeabi_dmul>
 800518a:	a3b7      	add	r3, pc, #732	; (adr r3, 8005468 <StartController+0x630>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb f824 	bl	80001dc <__adddf3>
 8005194:	ec41 0b10 	vmov	d0, r0, r1
 8005198:	ec41 0b1a 	vmov	d10, r0, r1
 800519c:	f000 fe84 	bl	8005ea8 <sqrt>
 80051a0:	4630      	mov	r0, r6
 80051a2:	ec53 2b10 	vmov	r2, r3, d0
 80051a6:	4639      	mov	r1, r7
 80051a8:	f7fb faf4 	bl	8000794 <__aeabi_ddiv>
 80051ac:	a3b0      	add	r3, pc, #704	; (adr r3, 8005470 <StartController+0x638>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f7fb f9c5 	bl	8000540 <__aeabi_dmul>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4640      	mov	r0, r8
 80051bc:	4649      	mov	r1, r9
 80051be:	f7fb f80b 	bl	80001d8 <__aeabi_dsub>
 80051c2:	f7fb fc95 	bl	8000af0 <__aeabi_d2f>
 80051c6:	ee0e 0a90 	vmov	s29, r0
                            JT[0][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 80051ca:	ee1f 0a10 	vmov	r0, s30
 80051ce:	f7fb f963 	bl	8000498 <__aeabi_f2d>
 80051d2:	a3a9      	add	r3, pc, #676	; (adr r3, 8005478 <StartController+0x640>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80051dc:	f7fb f9b0 	bl	8000540 <__aeabi_dmul>
 80051e0:	eeb0 0a4a 	vmov.f32	s0, s20
 80051e4:	eef0 0a6a 	vmov.f32	s1, s21
 80051e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051ec:	f000 fe5c 	bl	8005ea8 <sqrt>
 80051f0:	ee7d 7a68 	vsub.f32	s15, s26, s17
 80051f4:	ec53 2b10 	vmov	r2, r3, d0
 80051f8:	ee17 0a90 	vmov	r0, s15
 80051fc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005200:	f7fb f94a 	bl	8000498 <__aeabi_f2d>
 8005204:	eeb0 0a4a 	vmov.f32	s0, s20
 8005208:	eef0 0a6a 	vmov.f32	s1, s21
 800520c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005210:	f000 fe4a 	bl	8005ea8 <sqrt>
 8005214:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005218:	4630      	mov	r0, r6
 800521a:	4639      	mov	r1, r7
 800521c:	ed8d 0b14 	vstr	d0, [sp, #80]	; 0x50
 8005220:	f7fb fab8 	bl	8000794 <__aeabi_ddiv>
 8005224:	a392      	add	r3, pc, #584	; (adr r3, 8005470 <StartController+0x638>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fb f989 	bl	8000540 <__aeabi_dmul>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4640      	mov	r0, r8
 8005234:	4649      	mov	r1, r9
 8005236:	f7fa ffcf 	bl	80001d8 <__aeabi_dsub>
 800523a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800523e:	f7fb f97f 	bl	8000540 <__aeabi_dmul>
 8005242:	2200      	movs	r2, #0
 8005244:	4b8e      	ldr	r3, [pc, #568]	; (8005480 <StartController+0x648>)
 8005246:	f7fb f97b 	bl	8000540 <__aeabi_dmul>
 800524a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800524e:	f7fa ffc5 	bl	80001dc <__adddf3>
 8005252:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8005256:	4604      	mov	r4, r0
 8005258:	460d      	mov	r5, r1
 800525a:	2200      	movs	r2, #0
 800525c:	ec51 0b10 	vmov	r0, r1, d0
 8005260:	4b87      	ldr	r3, [pc, #540]	; (8005480 <StartController+0x648>)
 8005262:	f7fb f96d 	bl	8000540 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4620      	mov	r0, r4
 800526c:	4629      	mov	r1, r5
 800526e:	f7fa ffb5 	bl	80001dc <__adddf3>
 8005272:	f7fb fc3d 	bl	8000af0 <__aeabi_d2f>
                            JT[1][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 8005276:	eeb0 0a4a 	vmov.f32	s0, s20
 800527a:	eef0 0a6a 	vmov.f32	s1, s21
//                                JT[0][1] = (((3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))))*(phi1 - phi2))/2.0 - (3*cosf(phi1/2.0 + phi2/2.0))/40 + pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2))/400.0),(1/2.0))/2.0;
//                                JT[1][0] = (3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2))/400.0),(1/2.0)));
//                                JT[1][1] = (3*cosf(phi1/2.0 + phi2/2.0))/40.0 + (((3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))))*(phi1 - phi2))/2.0 - pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))/2.0;

                            JT[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            JT[0][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 800527e:	ee08 0a90 	vmov	s17, r0
                            JT[1][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 8005282:	f000 fe11 	bl	8005ea8 <sqrt>
 8005286:	4630      	mov	r0, r6
 8005288:	ec53 2b10 	vmov	r2, r3, d0
 800528c:	4639      	mov	r1, r7
 800528e:	f7fb fa81 	bl	8000794 <__aeabi_ddiv>
 8005292:	a377      	add	r3, pc, #476	; (adr r3, 8005470 <StartController+0x638>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fb f952 	bl	8000540 <__aeabi_dmul>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fa ff98 	bl	80001d8 <__aeabi_dsub>
 80052a8:	f7fb fc22 	bl	8000af0 <__aeabi_d2f>
                            JT[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 80052ac:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80052b0:	4b74      	ldr	r3, [pc, #464]	; (8005484 <StartController+0x64c>)
//                                JT[1][0] = (3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2))/400.0),(1/2.0)));
//                                JT[1][1] = (3*cosf(phi1/2.0 + phi2/2.0))/40.0 + (((3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))))*(phi1 - phi2))/2.0 - pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))/2.0;

                            JT[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            JT[0][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
                            JT[1][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 80052b2:	ee0f 0a10 	vmov	s30, r0
                            JT[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 80052b6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80052ba:	f7fb f941 	bl	8000540 <__aeabi_dmul>
 80052be:	eeb0 0a4a 	vmov.f32	s0, s20
 80052c2:	eef0 0a6a 	vmov.f32	s1, s21
 80052c6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80052ca:	f000 fded 	bl	8005ea8 <sqrt>
 80052ce:	ec53 2b10 	vmov	r2, r3, d0
 80052d2:	eeb0 0a4a 	vmov.f32	s0, s20
 80052d6:	eef0 0a6a 	vmov.f32	s1, s21
 80052da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80052de:	f000 fde3 	bl	8005ea8 <sqrt>
 80052e2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80052e6:	4630      	mov	r0, r6
 80052e8:	4639      	mov	r1, r7
 80052ea:	ed8d 0b14 	vstr	d0, [sp, #80]	; 0x50
 80052ee:	f7fb fa51 	bl	8000794 <__aeabi_ddiv>
 80052f2:	a35f      	add	r3, pc, #380	; (adr r3, 8005470 <StartController+0x638>)
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f7fb f922 	bl	8000540 <__aeabi_dmul>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4640      	mov	r0, r8
 8005302:	4649      	mov	r1, r9
 8005304:	f7fa ff68 	bl	80001d8 <__aeabi_dsub>
 8005308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800530c:	f7fb f918 	bl	8000540 <__aeabi_dmul>
 8005310:	2200      	movs	r2, #0
 8005312:	4b5b      	ldr	r3, [pc, #364]	; (8005480 <StartController+0x648>)
 8005314:	f7fb f914 	bl	8000540 <__aeabi_dmul>
 8005318:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800531c:	f7fa ff5e 	bl	80001dc <__adddf3>
 8005320:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8005324:	4604      	mov	r4, r0
 8005326:	460d      	mov	r5, r1
 8005328:	2200      	movs	r2, #0
 800532a:	ec51 0b10 	vmov	r0, r1, d0
 800532e:	4b54      	ldr	r3, [pc, #336]	; (8005480 <StartController+0x648>)
 8005330:	f7fb f906 	bl	8000540 <__aeabi_dmul>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4620      	mov	r0, r4
 800533a:	4629      	mov	r1, r5
 800533c:	f7fa ff4c 	bl	80001d8 <__aeabi_dsub>
 8005340:	f7fb fbd6 	bl	8000af0 <__aeabi_d2f>
//                                J[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
//                                J[0][1] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
//                                J[1][0] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
//                                J[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);

                            J[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 8005344:	eeb0 0a4a 	vmov.f32	s0, s20
 8005348:	eef0 0a6a 	vmov.f32	s1, s21
//                                JT[1][1] = (3*cosf(phi1/2.0 + phi2/2.0))/40.0 + (((3*sinf(phi1/2.0 + phi2/2.0))/40.0 - (9*cosf(phi1/2.0 + phi2/2.0)*sinf(phi1/2.0 + phi2/2.0))/(800*pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))))*(phi1 - phi2))/2.0 - pow((9/100.0 - (9*pow(sinf(phi1/2.0 + phi2/2.0),2.0))/400.0),(1/2.0))/2.0;

                            JT[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            JT[0][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
                            JT[1][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            JT[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 800534c:	ee0d 0a10 	vmov	s26, r0
//                                J[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
//                                J[0][1] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
//                                J[1][0] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
//                                J[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);

                            J[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 8005350:	f000 fdaa 	bl	8005ea8 <sqrt>
 8005354:	ed8d 0b14 	vstr	d0, [sp, #80]	; 0x50
                            J[0][1] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 8005358:	eeb0 0a4a 	vmov.f32	s0, s20
 800535c:	eef0 0a6a 	vmov.f32	s1, s21
 8005360:	f000 fda2 	bl	8005ea8 <sqrt>
 8005364:	ec53 2b10 	vmov	r2, r3, d0
                            J[1][0] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 8005368:	eeb0 0a4a 	vmov.f32	s0, s20
 800536c:	eef0 0a6a 	vmov.f32	s1, s21
//                                J[0][1] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
//                                J[1][0] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
//                                J[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);

                            J[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            J[0][1] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
 8005370:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
                            J[1][0] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 8005374:	f000 fd98 	bl	8005ea8 <sqrt>
 8005378:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800537c:	eeb0 0a4a 	vmov.f32	s0, s20
 8005380:	eef0 0a6a 	vmov.f32	s1, s21
 8005384:	f000 fd90 	bl	8005ea8 <sqrt>
 8005388:	ed8d 0b18 	vstr	d0, [sp, #96]	; 0x60
                            J[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 800538c:	eeb0 0a4a 	vmov.f32	s0, s20
 8005390:	eef0 0a6a 	vmov.f32	s1, s21
 8005394:	f000 fd88 	bl	8005ea8 <sqrt>
 8005398:	ec55 4b10 	vmov	r4, r5, d0
 800539c:	eeb0 0a4a 	vmov.f32	s0, s20
 80053a0:	eef0 0a6a 	vmov.f32	s1, s21
 80053a4:	f000 fd80 	bl	8005ea8 <sqrt>

                            r_d_fbk = J[0][0]*dphi1 + J[0][1]*dphi2;
 80053a8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80053ac:	4630      	mov	r0, r6
 80053ae:	4639      	mov	r1, r7
//                                J[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);

                            J[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            J[0][1] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            J[1][0] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
                            J[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
 80053b0:	ed8d 0b1a 	vstr	d0, [sp, #104]	; 0x68

                            r_d_fbk = J[0][0]*dphi1 + J[0][1]*dphi2;
 80053b4:	f7fb f9ee 	bl	8000794 <__aeabi_ddiv>
 80053b8:	a32d      	add	r3, pc, #180	; (adr r3, 8005470 <StartController+0x638>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fb f8bf 	bl	8000540 <__aeabi_dmul>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4640      	mov	r0, r8
 80053c8:	4649      	mov	r1, r9
 80053ca:	f7fa ff05 	bl	80001d8 <__aeabi_dsub>
 80053ce:	f7fb fb8f 	bl	8000af0 <__aeabi_d2f>
 80053d2:	ee07 0a90 	vmov	s15, r0
 80053d6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80053da:	4630      	mov	r0, r6
 80053dc:	4639      	mov	r1, r7
 80053de:	ee67 aa88 	vmul.f32	s21, s15, s16
 80053e2:	f7fb f9d7 	bl	8000794 <__aeabi_ddiv>
 80053e6:	a322      	add	r3, pc, #136	; (adr r3, 8005470 <StartController+0x638>)
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	f7fb f8a8 	bl	8000540 <__aeabi_dmul>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fa feee 	bl	80001d8 <__aeabi_dsub>
 80053fc:	f7fb fb78 	bl	8000af0 <__aeabi_d2f>
 8005400:	ee07 0a90 	vmov	s15, r0
                            theta_d_fbk = J[1][0]*dphi1 + J[1][1]*dphi2;

                            //Arc-length = r*theta
                            s_fbk = r_fbk*theta_fbk;
                            s_d_fbk = r_d_fbk*theta_fbk + r_fbk*theta_d_fbk; //chain rule
 8005404:	4622      	mov	r2, r4
 8005406:	462b      	mov	r3, r5
 8005408:	4630      	mov	r0, r6
 800540a:	4639      	mov	r1, r7
                            J[0][0] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            J[0][1] = sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2);
                            J[1][0] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(-3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)+sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);
                            J[1][1] = cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)+(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*(3.0/4.0E1)-cosf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0))*1.0/sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(9.0/8.0E2))*(phi1-phi2)*(1.0/2.0)-sqrt(pow(sinf(phi1*(1.0/2.0)+phi2*(1.0/2.0)),2.0)*(-9.0/4.0E2)+9.0/1.0E2)*(1.0/2.0);

                            r_d_fbk = J[0][0]*dphi1 + J[0][1]*dphi2;
 800540c:	eeee aa27 	vfma.f32	s21, s28, s15
                            theta_d_fbk = J[1][0]*dphi1 + J[1][1]*dphi2;

                            //Arc-length = r*theta
                            s_fbk = r_fbk*theta_fbk;
                            s_d_fbk = r_d_fbk*theta_fbk + r_fbk*theta_d_fbk; //chain rule
 8005410:	f7fb f9c0 	bl	8000794 <__aeabi_ddiv>
 8005414:	a316      	add	r3, pc, #88	; (adr r3, 8005470 <StartController+0x638>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fb f891 	bl	8000540 <__aeabi_dmul>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4640      	mov	r0, r8
 8005424:	4649      	mov	r1, r9
 8005426:	f7fa fed7 	bl	80001d8 <__aeabi_dsub>
 800542a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542e:	f7fb f887 	bl	8000540 <__aeabi_dmul>
 8005432:	2200      	movs	r2, #0
 8005434:	4b12      	ldr	r3, [pc, #72]	; (8005480 <StartController+0x648>)
 8005436:	f7fb f883 	bl	8000540 <__aeabi_dmul>
 800543a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800543e:	f7fa fecd 	bl	80001dc <__adddf3>
 8005442:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
 8005446:	4604      	mov	r4, r0
 8005448:	460d      	mov	r5, r1
 800544a:	2200      	movs	r2, #0
 800544c:	ec51 0b10 	vmov	r0, r1, d0
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <StartController+0x648>)
 8005452:	f7fb f875 	bl	8000540 <__aeabi_dmul>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	e013      	b.n	8005488 <StartController+0x650>
 8005460:	70a3d70a 	.word	0x70a3d70a
 8005464:	bf970a3d 	.word	0xbf970a3d
 8005468:	70a3d70a 	.word	0x70a3d70a
 800546c:	3fb70a3d 	.word	0x3fb70a3d
 8005470:	70a3d70a 	.word	0x70a3d70a
 8005474:	3f870a3d 	.word	0x3f870a3d
 8005478:	33333333 	.word	0x33333333
 800547c:	bfb33333 	.word	0xbfb33333
 8005480:	3fe00000 	.word	0x3fe00000
 8005484:	3fb33333 	.word	0x3fb33333
 8005488:	f7fa fea6 	bl	80001d8 <__aeabi_dsub>
 800548c:	f7fb fb30 	bl	8000af0 <__aeabi_d2f>
 8005490:	ee07 0a90 	vmov	s15, r0
 8005494:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005498:	4630      	mov	r0, r6
 800549a:	4639      	mov	r1, r7
 800549c:	ee27 8a88 	vmul.f32	s16, s15, s16
 80054a0:	f7fb f978 	bl	8000794 <__aeabi_ddiv>
 80054a4:	a3bb      	add	r3, pc, #748	; (adr r3, 8005794 <StartController+0x95c>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f7fb f849 	bl	8000540 <__aeabi_dmul>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4640      	mov	r0, r8
 80054b4:	4649      	mov	r1, r9
 80054b6:	f7fa fe8f 	bl	80001d8 <__aeabi_dsub>
 80054ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054be:	f7fb f83f 	bl	8000540 <__aeabi_dmul>
 80054c2:	2200      	movs	r2, #0
 80054c4:	4ba0      	ldr	r3, [pc, #640]	; (8005748 <StartController+0x910>)
 80054c6:	f7fb f83b 	bl	8000540 <__aeabi_dmul>
 80054ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054ce:	f7fa fe85 	bl	80001dc <__adddf3>
 80054d2:	2200      	movs	r2, #0
 80054d4:	4604      	mov	r4, r0
 80054d6:	460d      	mov	r5, r1
 80054d8:	4b9b      	ldr	r3, [pc, #620]	; (8005748 <StartController+0x910>)
 80054da:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80054de:	f7fb f82f 	bl	8000540 <__aeabi_dmul>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4620      	mov	r0, r4
 80054e8:	4629      	mov	r1, r5
 80054ea:	f7fa fe77 	bl	80001dc <__adddf3>
 80054ee:	f7fb faff 	bl	8000af0 <__aeabi_d2f>
 80054f2:	ee07 0a90 	vmov	s15, r0
 80054f6:	eeae 8a27 	vfma.f32	s16, s28, s15
                            // else{
                            //         ELAPSED++;
                            // }


if(TRIGGER){
 80054fa:	4b94      	ldr	r3, [pc, #592]	; (800574c <StartController+0x914>)
 80054fc:	781a      	ldrb	r2, [r3, #0]
                            r_d_fbk = J[0][0]*dphi1 + J[0][1]*dphi2;
                            theta_d_fbk = J[1][0]*dphi1 + J[1][1]*dphi2;

                            //Arc-length = r*theta
                            s_fbk = r_fbk*theta_fbk;
                            s_d_fbk = r_d_fbk*theta_fbk + r_fbk*theta_d_fbk; //chain rule
 80054fe:	ee28 8a2b 	vmul.f32	s16, s16, s23

                            r_d_fbk = J[0][0]*dphi1 + J[0][1]*dphi2;
                            theta_d_fbk = J[1][0]*dphi1 + J[1][1]*dphi2;

                            //Arc-length = r*theta
                            s_fbk = r_fbk*theta_fbk;
 8005502:	ee2b aaad 	vmul.f32	s20, s23, s27
                            s_d_fbk = r_d_fbk*theta_fbk + r_fbk*theta_d_fbk; //chain rule
 8005506:	eead 8aaa 	vfma.f32	s16, s27, s21
                            // else{
                            //         ELAPSED++;
                            // }


if(TRIGGER){
 800550a:	b1aa      	cbz	r2, 8005538 <StartController+0x700>
i_traj++;
 800550c:	f10a 0a01 	add.w	sl, sl, #1

if(i_traj==4000){
 8005510:	f5ba 6f7a 	cmp.w	sl, #4000	; 0xfa0
 8005514:	d104      	bne.n	8005520 <StartController+0x6e8>
  TRIGGER = 0;
 8005516:	f04f 0a00 	mov.w	sl, #0
 800551a:	f883 a000 	strb.w	sl, [r3]
  i_traj = 0;
  goto end;
 800551e:	e00b      	b.n	8005538 <StartController+0x700>
}
r_cmd = r_traj[i_traj];
 8005520:	4a8b      	ldr	r2, [pc, #556]	; (8005750 <StartController+0x918>)
 8005522:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8005526:	441a      	add	r2, r3
 8005528:	edd2 ca00 	vldr	s25, [r2]
s_cmd = r_traj[i_traj]*theta_traj[i_traj];
 800552c:	4a89      	ldr	r2, [pc, #548]	; (8005754 <StartController+0x91c>)
 800552e:	4413      	add	r3, r2
 8005530:	ed93 ca00 	vldr	s24, [r3]
 8005534:	ee2c ca8c 	vmul.f32	s24, s25, s24
//									kd_s = 10;
//									SHOT = 1;
//                                }

                            //Integral term
                            Error_r_CV = r_cmd - r_fbk;
 8005538:	ee7c daeb 	vsub.f32	s27, s25, s23
                            Error_r = Error_r_CV + Error_r_PV;
                            if(Error_r > 1) {Error_r = 1; }
 800553c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
//									SHOT = 1;
//                                }

                            //Integral term
                            Error_r_CV = r_cmd - r_fbk;
                            Error_r = Error_r_CV + Error_r_PV;
 8005540:	ee39 9a2d 	vadd.f32	s18, s18, s27
                            if(Error_r > 1) {Error_r = 1; }
 8005544:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8005548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554c:	dc09      	bgt.n	8005562 <StartController+0x72a>
                            if(Error_r < -1) {Error_r = -1; }
 800554e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005552:	eeb4 9a47 	vcmp.f32	s18, s14
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555a:	bf48      	it	mi
 800555c:	eeb0 9a47 	vmovmi.f32	s18, s14
 8005560:	e001      	b.n	8005566 <StartController+0x72e>
//                                }

                            //Integral term
                            Error_r_CV = r_cmd - r_fbk;
                            Error_r = Error_r_CV + Error_r_PV;
                            if(Error_r > 1) {Error_r = 1; }
 8005562:	eeb0 9a67 	vmov.f32	s18, s15
                            if(Error_r < -1) {Error_r = -1; }

                            Error_s_CV = s_cmd - s_fbk;
 8005566:	ee3c ea4a 	vsub.f32	s28, s24, s20
                            Error_s = Error_s_CV + Error_s_PV;
 800556a:	ee79 9a8e 	vadd.f32	s19, s19, s28
                            if(Error_s > 1) {Error_s = 1;}
 800556e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8005572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005576:	dc09      	bgt.n	800558c <StartController+0x754>
                            if(Error_s < -1) {Error_s = -1;}
 8005578:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800557c:	eef4 9a47 	vcmp.f32	s19, s14
 8005580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005584:	bf48      	it	mi
 8005586:	eef0 9a47 	vmovmi.f32	s19, s14
 800558a:	e001      	b.n	8005590 <StartController+0x758>
                            if(Error_r > 1) {Error_r = 1; }
                            if(Error_r < -1) {Error_r = -1; }

                            Error_s_CV = s_cmd - s_fbk;
                            Error_s = Error_s_CV + Error_s_PV;
                            if(Error_s > 1) {Error_s = 1;}
 800558c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
                            f_r = ks_r*(r_fbk - r_cmd) + kd_r*(r_d_fbk - r_d_cmd) - ki_r*(Error_r);
                            f_s = ks_s*(s_fbk - s_cmd) + kd_s*(s_d_fbk - s_d_cmd) - ki_s*(Error_s);
                            Error_r_PV = Error_r_CV;
                            Error_s_PV = Error_s_CV;

                            F[0] = k_r*(f_r);
 8005590:	ee3b 7aec 	vsub.f32	s14, s23, s25
 8005594:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8005598:	ee6f aaaa 	vmul.f32	s21, s31, s21
 800559c:	eee6 aa87 	vfma.f32	s21, s13, s14
 80055a0:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
                            F[1] = k_s*(f_s);
 80055a4:	eddd 6a07 	vldr	s13, [sp, #28]
                            f_r = ks_r*(r_fbk - r_cmd) + kd_r*(r_d_fbk - r_d_cmd) - ki_r*(Error_r);
                            f_s = ks_s*(s_fbk - s_cmd) + kd_s*(s_d_fbk - s_d_cmd) - ki_s*(Error_s);
                            Error_r_PV = Error_r_CV;
                            Error_s_PV = Error_s_CV;

                            F[0] = k_r*(f_r);
 80055a8:	eee9 aa47 	vfms.f32	s21, s18, s14
 80055ac:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 80055b0:	ee6a aa87 	vmul.f32	s21, s21, s14
                            F[1] = k_s*(f_s);
 80055b4:	ed9d 7a08 	vldr	s14, [sp, #32]
 80055b8:	ee27 8a08 	vmul.f32	s16, s14, s16
 80055bc:	ee3a 7a4c 	vsub.f32	s14, s20, s24
 80055c0:	eea6 8a87 	vfma.f32	s16, s13, s14
 80055c4:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 80055c8:	eea9 8acb 	vfms.f32	s16, s19, s22
 80055cc:	ee28 8a07 	vmul.f32	s16, s16, s14
//									Tau[0] = f_j_1;
//									Tau[1] = f_j_2;
//                                }

                            //Motor 1 Control
                            I_cmd[0] = (1/k_i)*Tau[0];
 80055d0:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34

                            F[0] = k_r*(f_r);
                            F[1] = k_s*(f_s);

                            Tau[0] = JT[0][0]*F[0] + JT[0][1]*F[1];
                            Tau[1] = JT[1][0]*F[0] + JT[1][1]*F[1];
 80055d4:	ee2d da08 	vmul.f32	s26, s26, s16
//									Tau[0] = f_j_1;
//									Tau[1] = f_j_2;
//                                }

                            //Motor 1 Control
                            I_cmd[0] = (1/k_i)*Tau[0];
 80055d8:	ee68 8a88 	vmul.f32	s17, s17, s16

                            F[0] = k_r*(f_r);
                            F[1] = k_s*(f_s);

                            Tau[0] = JT[0][0]*F[0] + JT[0][1]*F[1];
                            Tau[1] = JT[1][0]*F[0] + JT[1][1]*F[1];
 80055dc:	eeaf da2a 	vfma.f32	s26, s30, s21
//									Tau[0] = f_j_1;
//									Tau[1] = f_j_2;
//                                }

                            //Motor 1 Control
                            I_cmd[0] = (1/k_i)*Tau[0];
 80055e0:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80055e4:	eeee 8aaa 	vfma.f32	s17, s29, s21
                            if(I_cmd[0] > 58) {I_cmd[0] = 58; }
 80055e8:	eddf ea5b 	vldr	s29, [pc, #364]	; 8005758 <StartController+0x920>
//									Tau[0] = f_j_1;
//									Tau[1] = f_j_2;
//                                }

                            //Motor 1 Control
                            I_cmd[0] = (1/k_i)*Tau[0];
 80055ec:	ee68 8a8f 	vmul.f32	s17, s17, s30
                            if(I_cmd[0] > 58) {I_cmd[0] = 58; }
 80055f0:	eef4 8aee 	vcmpe.f32	s17, s29
 80055f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f8:	dc09      	bgt.n	800560e <StartController+0x7d6>
                            if(I_cmd[0] < -58) {I_cmd[0] = -58; }
 80055fa:	eddf 7a58 	vldr	s15, [pc, #352]	; 800575c <StartController+0x924>
 80055fe:	eef4 8a67 	vcmp.f32	s17, s15
 8005602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005606:	bf48      	it	mi
 8005608:	eef0 8a67 	vmovmi.f32	s17, s15
 800560c:	e001      	b.n	8005612 <StartController+0x7da>
//									Tau[1] = f_j_2;
//                                }

                            //Motor 1 Control
                            I_cmd[0] = (1/k_i)*Tau[0];
                            if(I_cmd[0] > 58) {I_cmd[0] = 58; }
 800560e:	eef0 8a6e 	vmov.f32	s17, s29
                            if(I_cmd[0] < -58) {I_cmd[0] = -58; }
                            F2BM1.INT32 = I_cmd[0]*(pow(2.0,15)/60.0);
 8005612:	ee18 0a90 	vmov	r0, s17
 8005616:	f7fa ff3f 	bl	8000498 <__aeabi_f2d>
 800561a:	a349      	add	r3, pc, #292	; (adr r3, 8005740 <StartController+0x908>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f7fa ff8e 	bl	8000540 <__aeabi_dmul>
 8005624:	f7fb fa3c 	bl	8000aa0 <__aeabi_d2iz>
 8005628:	4f4d      	ldr	r7, [pc, #308]	; (8005760 <StartController+0x928>)
                            swap_int32( F2BM1.INT32 );
                            BaseCommandPTR = &BaseCommand[CONTROL_CURRENT_M1];
 800562a:	4d4e      	ldr	r5, [pc, #312]	; (8005764 <StartController+0x92c>)
 800562c:	4b4e      	ldr	r3, [pc, #312]	; (8005768 <StartController+0x930>)

                            //Motor 1 Control
                            I_cmd[0] = (1/k_i)*Tau[0];
                            if(I_cmd[0] > 58) {I_cmd[0] = 58; }
                            if(I_cmd[0] < -58) {I_cmd[0] = -58; }
                            F2BM1.INT32 = I_cmd[0]*(pow(2.0,15)/60.0);
 800562e:	6038      	str	r0, [r7, #0]
                            swap_int32( F2BM1.INT32 );
                            BaseCommandPTR = &BaseCommand[CONTROL_CURRENT_M1];
                            BaseCommandCompile(CONTROL_CURRENT_M1, 0b0011, 0x02, 0x45, 0x02, F2BM1.BYTE, 2, 0);
 8005630:	2402      	movs	r4, #2
 8005632:	2600      	movs	r6, #0
                            I_cmd[0] = (1/k_i)*Tau[0];
                            if(I_cmd[0] > 58) {I_cmd[0] = 58; }
                            if(I_cmd[0] < -58) {I_cmd[0] = -58; }
                            F2BM1.INT32 = I_cmd[0]*(pow(2.0,15)/60.0);
                            swap_int32( F2BM1.INT32 );
                            BaseCommandPTR = &BaseCommand[CONTROL_CURRENT_M1];
 8005634:	602b      	str	r3, [r5, #0]
                            BaseCommandCompile(CONTROL_CURRENT_M1, 0b0011, 0x02, 0x45, 0x02, F2BM1.BYTE, 2, 0);
 8005636:	2103      	movs	r1, #3
 8005638:	9603      	str	r6, [sp, #12]
 800563a:	9402      	str	r4, [sp, #8]
 800563c:	e88d 0090 	stmia.w	sp, {r4, r7}
 8005640:	2345      	movs	r3, #69	; 0x45
 8005642:	4622      	mov	r2, r4
 8005644:	2028      	movs	r0, #40	; 0x28
 8005646:	f7fe fd09 	bl	800405c <BaseCommandCompile>
 800564a:	4629      	mov	r1, r5
                            if(valid) {xQueueOverwrite( ICommandM1QHandle, &BaseCommandPTR); }
 800564c:	f1bb 0f00 	cmp.w	fp, #0
 8005650:	d005      	beq.n	800565e <StartController+0x826>
 8005652:	4846      	ldr	r0, [pc, #280]	; (800576c <StartController+0x934>)
 8005654:	4623      	mov	r3, r4
 8005656:	4632      	mov	r2, r6
 8005658:	6800      	ldr	r0, [r0, #0]
 800565a:	f7fc ff91 	bl	8002580 <xQueueGenericSend>

                            //Motor 2 Control
                            I_cmd[1] = -(1/k_i)*Tau[1];
 800565e:	ee2f da4d 	vnmul.f32	s26, s30, s26
                            if(I_cmd[1] > 58) {I_cmd[1] = 58; }
 8005662:	eeb4 daee 	vcmpe.f32	s26, s29
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	dc09      	bgt.n	8005680 <StartController+0x848>
                            if(I_cmd[1] < -58) {I_cmd[1] = -58; }
 800566c:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800575c <StartController+0x924>
 8005670:	eeb4 da67 	vcmp.f32	s26, s15
 8005674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005678:	bf48      	it	mi
 800567a:	eeb0 da67 	vmovmi.f32	s26, s15
 800567e:	e001      	b.n	8005684 <StartController+0x84c>
                            BaseCommandCompile(CONTROL_CURRENT_M1, 0b0011, 0x02, 0x45, 0x02, F2BM1.BYTE, 2, 0);
                            if(valid) {xQueueOverwrite( ICommandM1QHandle, &BaseCommandPTR); }

                            //Motor 2 Control
                            I_cmd[1] = -(1/k_i)*Tau[1];
                            if(I_cmd[1] > 58) {I_cmd[1] = 58; }
 8005680:	ed9f da35 	vldr	s26, [pc, #212]	; 8005758 <StartController+0x920>
                            if(I_cmd[1] < -58) {I_cmd[1] = -58; }
                            F2BM2.INT32 = I_cmd[1]*(pow(2.0,15)/60.0);
 8005684:	4e3a      	ldr	r6, [pc, #232]	; (8005770 <StartController+0x938>)
 8005686:	ee1d 0a10 	vmov	r0, s26
 800568a:	f7fa ff05 	bl	8000498 <__aeabi_f2d>
 800568e:	a32c      	add	r3, pc, #176	; (adr r3, 8005740 <StartController+0x908>)
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f7fa ff54 	bl	8000540 <__aeabi_dmul>
 8005698:	f7fb fa02 	bl	8000aa0 <__aeabi_d2iz>
                            swap_int32( F2BM2.INT32 );
                            BaseCommandPTR = &BaseCommand[CONTROL_CURRENT_M2];
 800569c:	4b35      	ldr	r3, [pc, #212]	; (8005774 <StartController+0x93c>)
 800569e:	602b      	str	r3, [r5, #0]
                            BaseCommandCompile(CONTROL_CURRENT_M2, 0b0011, 0x02, 0x45, 0x02, F2BM2.BYTE, 2, 0);
 80056a0:	2402      	movs	r4, #2
 80056a2:	2500      	movs	r5, #0

                            //Motor 2 Control
                            I_cmd[1] = -(1/k_i)*Tau[1];
                            if(I_cmd[1] > 58) {I_cmd[1] = 58; }
                            if(I_cmd[1] < -58) {I_cmd[1] = -58; }
                            F2BM2.INT32 = I_cmd[1]*(pow(2.0,15)/60.0);
 80056a4:	6030      	str	r0, [r6, #0]
                            swap_int32( F2BM2.INT32 );
                            BaseCommandPTR = &BaseCommand[CONTROL_CURRENT_M2];
                            BaseCommandCompile(CONTROL_CURRENT_M2, 0b0011, 0x02, 0x45, 0x02, F2BM2.BYTE, 2, 0);
 80056a6:	2345      	movs	r3, #69	; 0x45
 80056a8:	9503      	str	r5, [sp, #12]
 80056aa:	9402      	str	r4, [sp, #8]
 80056ac:	e88d 0050 	stmia.w	sp, {r4, r6}
 80056b0:	4622      	mov	r2, r4
 80056b2:	2103      	movs	r1, #3
 80056b4:	2029      	movs	r0, #41	; 0x29
 80056b6:	f7fe fcd1 	bl	800405c <BaseCommandCompile>
                            if(valid) {xQueueOverwrite( ICommandM2QHandle, &BaseCommandPTR); }
 80056ba:	f1bb 0f00 	cmp.w	fp, #0
 80056be:	d006      	beq.n	80056ce <StartController+0x896>
 80056c0:	482d      	ldr	r0, [pc, #180]	; (8005778 <StartController+0x940>)
 80056c2:	4928      	ldr	r1, [pc, #160]	; (8005764 <StartController+0x92c>)
 80056c4:	6800      	ldr	r0, [r0, #0]
 80056c6:	4623      	mov	r3, r4
 80056c8:	462a      	mov	r2, r5
 80056ca:	f7fc ff59 	bl	8002580 <xQueueGenericSend>

                            //PC Logging
                            ControlLogPacket.I_cmd_0 = I_cmd[0];
 80056ce:	4a2b      	ldr	r2, [pc, #172]	; (800577c <StartController+0x944>)
                            ControlLogPacket.f_s = F[1];
                            ControlLogPacket.r_fbk = r_fbk;
                            ControlLogPacket.s_fbk = s_fbk;
                            ControlLogPacket.r_d_fbk = Error_r; //TODO
                            ControlLogPacket.s_d_fbk = Error_s; //TODO
                            xQueueOverwrite(ProcessQControlHandle, &ControlLogPacketPTR);
 80056d0:	482b      	ldr	r0, [pc, #172]	; (8005780 <StartController+0x948>)
 80056d2:	492c      	ldr	r1, [pc, #176]	; (8005784 <StartController+0x94c>)
 80056d4:	6800      	ldr	r0, [r0, #0]
                            BaseCommandPTR = &BaseCommand[CONTROL_CURRENT_M2];
                            BaseCommandCompile(CONTROL_CURRENT_M2, 0b0011, 0x02, 0x45, 0x02, F2BM2.BYTE, 2, 0);
                            if(valid) {xQueueOverwrite( ICommandM2QHandle, &BaseCommandPTR); }

                            //PC Logging
                            ControlLogPacket.I_cmd_0 = I_cmd[0];
 80056d6:	ee18 3a90 	vmov	r3, s17
 80056da:	6013      	str	r3, [r2, #0]
                            ControlLogPacket.I_cmd_1 = I_cmd[1];
 80056dc:	ee1d 3a10 	vmov	r3, s26
 80056e0:	6053      	str	r3, [r2, #4]
                            ControlLogPacket.f_r = F[0];
 80056e2:	ee1a 3a90 	vmov	r3, s21
 80056e6:	6093      	str	r3, [r2, #8]
                            ControlLogPacket.f_s = F[1];
 80056e8:	ee18 3a10 	vmov	r3, s16
 80056ec:	60d3      	str	r3, [r2, #12]
                            ControlLogPacket.r_fbk = r_fbk;
 80056ee:	ee1b 3a90 	vmov	r3, s23
 80056f2:	6113      	str	r3, [r2, #16]
                            ControlLogPacket.s_fbk = s_fbk;
 80056f4:	ee1a 3a10 	vmov	r3, s20
 80056f8:	6153      	str	r3, [r2, #20]
                            ControlLogPacket.r_d_fbk = Error_r; //TODO
 80056fa:	ee19 3a10 	vmov	r3, s18
 80056fe:	6193      	str	r3, [r2, #24]
                            ControlLogPacket.s_d_fbk = Error_s; //TODO
 8005700:	ee19 3a90 	vmov	r3, s19
 8005704:	61d3      	str	r3, [r2, #28]
                            xQueueOverwrite(ProcessQControlHandle, &ControlLogPacketPTR);
 8005706:	2302      	movs	r3, #2
 8005708:	2200      	movs	r2, #0
 800570a:	f7fc ff39 	bl	8002580 <xQueueGenericSend>

                            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800570e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005712:	481d      	ldr	r0, [pc, #116]	; (8005788 <StartController+0x950>)
 8005714:	f7fb fdac 	bl	8001270 <HAL_GPIO_TogglePin>
                            xSemaphoreGive( TXMotorM1Handle );
 8005718:	481c      	ldr	r0, [pc, #112]	; (800578c <StartController+0x954>)
 800571a:	2300      	movs	r3, #0
 800571c:	461a      	mov	r2, r3
 800571e:	4619      	mov	r1, r3
 8005720:	6800      	ldr	r0, [r0, #0]
 8005722:	f7fc ff2d 	bl	8002580 <xQueueGenericSend>
                            xSemaphoreGive( TXMotorM2Handle );
 8005726:	481a      	ldr	r0, [pc, #104]	; (8005790 <StartController+0x958>)
 8005728:	2300      	movs	r3, #0
 800572a:	461a      	mov	r2, r3
 800572c:	4619      	mov	r1, r3
 800572e:	6800      	ldr	r0, [r0, #0]
 8005730:	f7fc ff26 	bl	8002580 <xQueueGenericSend>

                            //Virtual spring dampener
                            f_r = ks_r*(r_fbk - r_cmd) + kd_r*(r_d_fbk - r_d_cmd) - ki_r*(Error_r);
                            f_s = ks_s*(s_fbk - s_cmd) + kd_s*(s_d_fbk - s_d_cmd) - ki_s*(Error_s);
                            Error_r_PV = Error_r_CV;
                            Error_s_PV = Error_s_CV;
 8005734:	eef0 9a4e 	vmov.f32	s19, s28
                            if(Error_s < -1) {Error_s = -1;}

                            //Virtual spring dampener
                            f_r = ks_r*(r_fbk - r_cmd) + kd_r*(r_d_fbk - r_d_cmd) - ki_r*(Error_r);
                            f_s = ks_s*(s_fbk - s_cmd) + kd_s*(s_d_fbk - s_d_cmd) - ki_s*(Error_s);
                            Error_r_PV = Error_r_CV;
 8005738:	eeb0 9a6d 	vmov.f32	s18, s27
 800573c:	f7ff bba1 	b.w	8004e82 <StartController+0x4a>
 8005740:	11111111 	.word	0x11111111
 8005744:	40811111 	.word	0x40811111
 8005748:	3fe00000 	.word	0x3fe00000
 800574c:	2000c30b 	.word	0x2000c30b
 8005750:	20003ea0 	.word	0x20003ea0
 8005754:	20000018 	.word	0x20000018
 8005758:	42680000 	.word	0x42680000
 800575c:	c2680000 	.word	0xc2680000
 8005760:	2000cbf4 	.word	0x2000cbf4
 8005764:	2000c320 	.word	0x2000c320
 8005768:	2000c904 	.word	0x2000c904
 800576c:	2000ca14 	.word	0x2000ca14
 8005770:	2000cc64 	.word	0x2000cc64
 8005774:	2000c912 	.word	0x2000c912
 8005778:	2000c45c 	.word	0x2000c45c
 800577c:	2000cb6d 	.word	0x2000cb6d
 8005780:	2000c3ec 	.word	0x2000c3ec
 8005784:	20000004 	.word	0x20000004
 8005788:	40020400 	.word	0x40020400
 800578c:	2000c500 	.word	0x2000c500
 8005790:	2000c454 	.word	0x2000c454
 8005794:	70a3d70a 	.word	0x70a3d70a
 8005798:	3f870a3d 	.word	0x3f870a3d

0800579c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800579c:	6803      	ldr	r3, [r0, #0]
 800579e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a2:	d101      	bne.n	80057a8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80057a4:	f7fb ba0e 	b.w	8000bc4 <HAL_IncTick>
 80057a8:	4770      	bx	lr

080057aa <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80057aa:	e7fe      	b.n	80057aa <Error_Handler>

080057ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ae:	2003      	movs	r0, #3
 80057b0:	f7fb fa26 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80057b4:	2200      	movs	r2, #0
 80057b6:	4611      	mov	r1, r2
 80057b8:	f06f 000b 	mvn.w	r0, #11
 80057bc:	f7fb fa32 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80057c0:	2200      	movs	r2, #0
 80057c2:	4611      	mov	r1, r2
 80057c4:	f06f 000a 	mvn.w	r0, #10
 80057c8:	f7fb fa2c 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80057cc:	2200      	movs	r2, #0
 80057ce:	4611      	mov	r1, r2
 80057d0:	f06f 0009 	mvn.w	r0, #9
 80057d4:	f7fb fa26 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80057d8:	2200      	movs	r2, #0
 80057da:	4611      	mov	r1, r2
 80057dc:	f06f 0004 	mvn.w	r0, #4
 80057e0:	f7fb fa20 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80057e4:	2200      	movs	r2, #0
 80057e6:	4611      	mov	r1, r2
 80057e8:	f06f 0003 	mvn.w	r0, #3
 80057ec:	f7fb fa1a 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80057f0:	2200      	movs	r2, #0
 80057f2:	210f      	movs	r1, #15
 80057f4:	f06f 0001 	mvn.w	r0, #1
 80057f8:	f7fb fa14 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80057fc:	2200      	movs	r2, #0
 80057fe:	210f      	movs	r1, #15
 8005800:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005808:	f7fb ba0c 	b.w	8000c24 <HAL_NVIC_SetPriority>

0800580c <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800580c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800580e:	6803      	ldr	r3, [r0, #0]
 8005810:	4a87      	ldr	r2, [pc, #540]	; (8005a30 <HAL_UART_MspInit+0x224>)
 8005812:	4293      	cmp	r3, r2

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005814:	b08a      	sub	sp, #40	; 0x28
 8005816:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8005818:	d155      	bne.n	80058c6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800581a:	2600      	movs	r6, #0
 800581c:	4b85      	ldr	r3, [pc, #532]	; (8005a34 <HAL_UART_MspInit+0x228>)
 800581e:	9601      	str	r6, [sp, #4]
 8005820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005822:	4885      	ldr	r0, [pc, #532]	; (8005a38 <HAL_UART_MspInit+0x22c>)

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005824:	4d85      	ldr	r5, [pc, #532]	; (8005a3c <HAL_UART_MspInit+0x230>)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005826:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	9b01      	ldr	r3, [sp, #4]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005836:	2202      	movs	r2, #2
  
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8005838:	2303      	movs	r3, #3
 800583a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800583e:	9308      	str	r3, [sp, #32]
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005840:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005842:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005844:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005846:	9309      	str	r3, [sp, #36]	; 0x24
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005848:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584a:	f7fb fc2d 	bl	80010a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800584e:	4b7c      	ldr	r3, [pc, #496]	; (8005a40 <HAL_UART_MspInit+0x234>)
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005850:	60ae      	str	r6, [r5, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005852:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8005856:	e885 1008 	stmia.w	r5, {r3, ip}
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800585a:	4628      	mov	r0, r5
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800585c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005860:	60ee      	str	r6, [r5, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005862:	612b      	str	r3, [r5, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005864:	616e      	str	r6, [r5, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005866:	61ae      	str	r6, [r5, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005868:	61ee      	str	r6, [r5, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800586a:	622e      	str	r6, [r5, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800586c:	626e      	str	r6, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800586e:	f7fb fa51 	bl	8000d14 <HAL_DMA_Init>
 8005872:	b118      	cbz	r0, 800587c <HAL_UART_MspInit+0x70>
    {
      Error_Handler(__FILE__, __LINE__);
 8005874:	218d      	movs	r1, #141	; 0x8d
 8005876:	4873      	ldr	r0, [pc, #460]	; (8005a44 <HAL_UART_MspInit+0x238>)
 8005878:	f7ff ff97 	bl	80057aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800587c:	6365      	str	r5, [r4, #52]	; 0x34

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800587e:	4b72      	ldr	r3, [pc, #456]	; (8005a48 <HAL_UART_MspInit+0x23c>)
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
    {
      Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8005880:	63ac      	str	r4, [r5, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8005882:	4d72      	ldr	r5, [pc, #456]	; (8005a4c <HAL_UART_MspInit+0x240>)
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005884:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8005888:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800588c:	e885 4048 	stmia.w	r5, {r3, r6, lr}
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005890:	f44f 6280 	mov.w	r2, #1024	; 0x400

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005894:	2300      	movs	r3, #0
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005896:	4628      	mov	r0, r5

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005898:	60eb      	str	r3, [r5, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800589a:	612a      	str	r2, [r5, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800589c:	616b      	str	r3, [r5, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800589e:	61ab      	str	r3, [r5, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80058a0:	61eb      	str	r3, [r5, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058a2:	622b      	str	r3, [r5, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058a4:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80058a6:	f7fb fa35 	bl	8000d14 <HAL_DMA_Init>
 80058aa:	b118      	cbz	r0, 80058b4 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler(__FILE__, __LINE__);
 80058ac:	219f      	movs	r1, #159	; 0x9f
 80058ae:	4865      	ldr	r0, [pc, #404]	; (8005a44 <HAL_UART_MspInit+0x238>)
 80058b0:	f7ff ff7b 	bl	80057aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80058b4:	6325      	str	r5, [r4, #48]	; 0x30

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80058b6:	2034      	movs	r0, #52	; 0x34
 80058b8:	2200      	movs	r2, #0
 80058ba:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
    {
      Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80058bc:	63ac      	str	r4, [r5, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80058be:	f7fb f9b1 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80058c2:	2034      	movs	r0, #52	; 0x34
 80058c4:	e135      	b.n	8005b32 <HAL_UART_MspInit+0x326>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80058c6:	4a62      	ldr	r2, [pc, #392]	; (8005a50 <HAL_UART_MspInit+0x244>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d156      	bne.n	800597a <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058cc:	2600      	movs	r6, #0
 80058ce:	4b59      	ldr	r3, [pc, #356]	; (8005a34 <HAL_UART_MspInit+0x228>)
 80058d0:	9602      	str	r6, [sp, #8]
 80058d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058d4:	4858      	ldr	r0, [pc, #352]	; (8005a38 <HAL_UART_MspInit+0x22c>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80058d6:	4d5f      	ldr	r5, [pc, #380]	; (8005a54 <HAL_UART_MspInit+0x248>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
 80058e8:	230c      	movs	r3, #12
 80058ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ec:	2302      	movs	r3, #2
 80058ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058f0:	2301      	movs	r3, #1
 80058f2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f4:	2303      	movs	r3, #3
 80058f6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f8:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = Motor2_TX_Pin|Motor2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80058fa:	2307      	movs	r3, #7
 80058fc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058fe:	f7fb fbd3 	bl	80010a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005902:	4b55      	ldr	r3, [pc, #340]	; (8005a58 <HAL_UART_MspInit+0x24c>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005904:	60ae      	str	r6, [r5, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005906:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 800590a:	e885 1008 	stmia.w	r5, {r3, ip}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800590e:	4628      	mov	r0, r5
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005910:	f44f 6380 	mov.w	r3, #1024	; 0x400
    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005914:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005916:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005918:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800591a:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800591c:	61ee      	str	r6, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800591e:	622e      	str	r6, [r5, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005920:	626e      	str	r6, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005922:	f7fb f9f7 	bl	8000d14 <HAL_DMA_Init>
 8005926:	b118      	cbz	r0, 8005930 <HAL_UART_MspInit+0x124>
    {
      Error_Handler(__FILE__, __LINE__);
 8005928:	21cc      	movs	r1, #204	; 0xcc
 800592a:	4846      	ldr	r0, [pc, #280]	; (8005a44 <HAL_UART_MspInit+0x238>)
 800592c:	f7ff ff3d 	bl	80057aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005930:	6365      	str	r5, [r4, #52]	; 0x34

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005932:	4b4a      	ldr	r3, [pc, #296]	; (8005a5c <HAL_UART_MspInit+0x250>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
    {
      Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005934:	63ac      	str	r4, [r5, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005936:	4d4a      	ldr	r5, [pc, #296]	; (8005a60 <HAL_UART_MspInit+0x254>)
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005938:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 800593c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8005940:	e885 4048 	stmia.w	r5, {r3, r6, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005944:	f44f 6280 	mov.w	r2, #1024	; 0x400

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005948:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800594a:	4628      	mov	r0, r5

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800594c:	60eb      	str	r3, [r5, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800594e:	612a      	str	r2, [r5, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005950:	616b      	str	r3, [r5, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005952:	61ab      	str	r3, [r5, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005954:	61eb      	str	r3, [r5, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005956:	622b      	str	r3, [r5, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005958:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800595a:	f7fb f9db 	bl	8000d14 <HAL_DMA_Init>
 800595e:	b118      	cbz	r0, 8005968 <HAL_UART_MspInit+0x15c>
    {
      Error_Handler(__FILE__, __LINE__);
 8005960:	21de      	movs	r1, #222	; 0xde
 8005962:	4838      	ldr	r0, [pc, #224]	; (8005a44 <HAL_UART_MspInit+0x238>)
 8005964:	f7ff ff21 	bl	80057aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005968:	6325      	str	r5, [r4, #48]	; 0x30

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800596a:	2026      	movs	r0, #38	; 0x26
 800596c:	2200      	movs	r2, #0
 800596e:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
    {
      Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005970:	63ac      	str	r4, [r5, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005972:	f7fb f957 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005976:	2026      	movs	r0, #38	; 0x26
 8005978:	e0db      	b.n	8005b32 <HAL_UART_MspInit+0x326>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800597a:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <HAL_UART_MspInit+0x258>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d17d      	bne.n	8005a7c <HAL_UART_MspInit+0x270>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005980:	2600      	movs	r6, #0
 8005982:	4b2c      	ldr	r3, [pc, #176]	; (8005a34 <HAL_UART_MspInit+0x228>)
 8005984:	9603      	str	r6, [sp, #12]
 8005986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005988:	4837      	ldr	r0, [pc, #220]	; (8005a68 <HAL_UART_MspInit+0x25c>)

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800598a:	4d38      	ldr	r5, [pc, #224]	; (8005a6c <HAL_UART_MspInit+0x260>)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800598c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005998:	9303      	str	r3, [sp, #12]
 800599a:	9b03      	ldr	r3, [sp, #12]
  
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
 800599c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a2:	2302      	movs	r3, #2
 80059a4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059a6:	2301      	movs	r3, #1
 80059a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059aa:	2303      	movs	r3, #3
 80059ac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ae:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = Motor1_TX_Pin|Motor1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80059b0:	2307      	movs	r3, #7
 80059b2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059b4:	f7fb fb78 	bl	80010a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80059b8:	4b2d      	ldr	r3, [pc, #180]	; (8005a70 <HAL_UART_MspInit+0x264>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059ba:	60ae      	str	r6, [r5, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80059bc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 80059c0:	e885 1008 	stmia.w	r5, {r3, ip}
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80059c4:	4628      	mov	r0, r5
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059ca:	60ee      	str	r6, [r5, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059cc:	612b      	str	r3, [r5, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059ce:	616e      	str	r6, [r5, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059d0:	61ae      	str	r6, [r5, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80059d2:	61ee      	str	r6, [r5, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059d4:	622e      	str	r6, [r5, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059d6:	626e      	str	r6, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80059d8:	f7fb f99c 	bl	8000d14 <HAL_DMA_Init>
 80059dc:	b120      	cbz	r0, 80059e8 <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler(__FILE__, __LINE__);
 80059de:	f240 110b 	movw	r1, #267	; 0x10b
 80059e2:	4818      	ldr	r0, [pc, #96]	; (8005a44 <HAL_UART_MspInit+0x238>)
 80059e4:	f7ff fee1 	bl	80057aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80059e8:	6365      	str	r5, [r4, #52]	; 0x34

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059ea:	4b22      	ldr	r3, [pc, #136]	; (8005a74 <HAL_UART_MspInit+0x268>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    {
      Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80059ec:	63ac      	str	r4, [r5, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80059ee:	4d22      	ldr	r5, [pc, #136]	; (8005a78 <HAL_UART_MspInit+0x26c>)
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059f0:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80059f4:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80059f8:	e885 4048 	stmia.w	r5, {r3, r6, lr}
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059fc:	f44f 6280 	mov.w	r2, #1024	; 0x400

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a00:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005a02:	4628      	mov	r0, r5

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a04:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a06:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a08:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a0a:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005a0c:	61eb      	str	r3, [r5, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a0e:	622b      	str	r3, [r5, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a10:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005a12:	f7fb f97f 	bl	8000d14 <HAL_DMA_Init>
 8005a16:	b108      	cbz	r0, 8005a1c <HAL_UART_MspInit+0x210>
    {
      Error_Handler();
 8005a18:	f7ff fec7 	bl	80057aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005a1c:	6325      	str	r5, [r4, #48]	; 0x30

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005a1e:	2027      	movs	r0, #39	; 0x27
 8005a20:	2200      	movs	r2, #0
 8005a22:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005a24:	63ac      	str	r4, [r5, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005a26:	f7fb f8fd 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a2a:	2027      	movs	r0, #39	; 0x27
 8005a2c:	e081      	b.n	8005b32 <HAL_UART_MspInit+0x326>
 8005a2e:	bf00      	nop
 8005a30:	40004c00 	.word	0x40004c00
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40020000 	.word	0x40020000
 8005a3c:	2000c328 	.word	0x2000c328
 8005a40:	40026040 	.word	0x40026040
 8005a44:	08006c0f 	.word	0x08006c0f
 8005a48:	40026070 	.word	0x40026070
 8005a4c:	2000cc04 	.word	0x2000cc04
 8005a50:	40004400 	.word	0x40004400
 8005a54:	2000c38c 	.word	0x2000c38c
 8005a58:	40026088 	.word	0x40026088
 8005a5c:	400260a0 	.word	0x400260a0
 8005a60:	2000c66c 	.word	0x2000c66c
 8005a64:	40004800 	.word	0x40004800
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	2000c460 	.word	0x2000c460
 8005a70:	40026028 	.word	0x40026028
 8005a74:	40026058 	.word	0x40026058
 8005a78:	2000c534 	.word	0x2000c534
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005a7c:	4a2f      	ldr	r2, [pc, #188]	; (8005b3c <HAL_UART_MspInit+0x330>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d159      	bne.n	8005b36 <HAL_UART_MspInit+0x32a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005a82:	2600      	movs	r6, #0
 8005a84:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <HAL_UART_MspInit+0x334>)
 8005a86:	9604      	str	r6, [sp, #16]
 8005a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = iNemo_RX_Pin|iNemo_RXC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a8a:	482e      	ldr	r0, [pc, #184]	; (8005b44 <HAL_UART_MspInit+0x338>)

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005a8c:	4d2e      	ldr	r5, [pc, #184]	; (8005b48 <HAL_UART_MspInit+0x33c>)
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005a8e:	f042 0220 	orr.w	r2, r2, #32
 8005a92:	645a      	str	r2, [r3, #68]	; 0x44
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	9b04      	ldr	r3, [sp, #16]
  
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = iNemo_RX_Pin|iNemo_RXC7_Pin;
 8005a9e:	23c0      	movs	r3, #192	; 0xc0
 8005aa0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aae:	a905      	add	r1, sp, #20
    */
    GPIO_InitStruct.Pin = iNemo_RX_Pin|iNemo_RXC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ab4:	f7fb faf8 	bl	80010a8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005ab8:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <HAL_UART_MspInit+0x340>)
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005aba:	60ae      	str	r6, [r5, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005abc:	f04f 6c20 	mov.w	ip, #167772160	; 0xa000000
 8005ac0:	e885 1008 	stmia.w	r5, {r3, ip}
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005ac4:	4628      	mov	r0, r5
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005aca:	60ee      	str	r6, [r5, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005acc:	612b      	str	r3, [r5, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ace:	616e      	str	r6, [r5, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ad0:	61ae      	str	r6, [r5, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8005ad2:	61ee      	str	r6, [r5, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ad4:	622e      	str	r6, [r5, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ad6:	626e      	str	r6, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005ad8:	f7fb f91c 	bl	8000d14 <HAL_DMA_Init>
 8005adc:	b120      	cbz	r0, 8005ae8 <HAL_UART_MspInit+0x2dc>
    {
      Error_Handler(__FILE__, __LINE__);
 8005ade:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005ae2:	481b      	ldr	r0, [pc, #108]	; (8005b50 <HAL_UART_MspInit+0x344>)
 8005ae4:	f7ff fe61 	bl	80057aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005ae8:	6365      	str	r5, [r4, #52]	; 0x34

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <HAL_UART_MspInit+0x348>)
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
    {
      Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005aec:	63ac      	str	r4, [r5, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005aee:	4d1a      	ldr	r5, [pc, #104]	; (8005b58 <HAL_UART_MspInit+0x34c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005af0:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 8005af4:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8005af8:	e885 4048 	stmia.w	r5, {r3, r6, lr}
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005afc:	f44f 6280 	mov.w	r2, #1024	; 0x400

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b00:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005b02:	4628      	mov	r0, r5

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b04:	60eb      	str	r3, [r5, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b06:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b08:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b0a:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8005b0c:	61eb      	str	r3, [r5, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b0e:	622b      	str	r3, [r5, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b10:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005b12:	f7fb f8ff 	bl	8000d14 <HAL_DMA_Init>
 8005b16:	b120      	cbz	r0, 8005b22 <HAL_UART_MspInit+0x316>
    {
      Error_Handler(__FILE__, __LINE__);
 8005b18:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8005b1c:	480c      	ldr	r0, [pc, #48]	; (8005b50 <HAL_UART_MspInit+0x344>)
 8005b1e:	f7ff fe44 	bl	80057aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8005b22:	6325      	str	r5, [r4, #48]	; 0x30

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005b24:	2047      	movs	r0, #71	; 0x47
 8005b26:	2200      	movs	r2, #0
 8005b28:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
    {
      Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8005b2a:	63ac      	str	r4, [r5, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005b2c:	f7fb f87a 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005b30:	2047      	movs	r0, #71	; 0x47
 8005b32:	f7fb f8ab 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005b36:	b00a      	add	sp, #40	; 0x28
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40011400 	.word	0x40011400
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40020800 	.word	0x40020800
 8005b48:	2000c3f0 	.word	0x2000c3f0
 8005b4c:	40026428 	.word	0x40026428
 8005b50:	08006c0f 	.word	0x08006c0f
 8005b54:	400264a0 	.word	0x400264a0
 8005b58:	2000c5d0 	.word	0x2000c5d0

08005b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b5c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8005b5e:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b60:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8005b62:	2200      	movs	r2, #0
 8005b64:	201c      	movs	r0, #28
 8005b66:	f7fb f85d 	bl	8000c24 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8005b6a:	201c      	movs	r0, #28
 8005b6c:	f7fb f88e 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005b70:	2500      	movs	r5, #0
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_InitTick+0x6c>)
 8005b74:	9502      	str	r5, [sp, #8]
 8005b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8005b78:	4c14      	ldr	r4, [pc, #80]	; (8005bcc <HAL_InitTick+0x70>)
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b88:	a901      	add	r1, sp, #4
 8005b8a:	a803      	add	r0, sp, #12
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005b8c:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b8e:	f7fb fe29 	bl	80017e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005b92:	f7fb fdf7 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8005b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b9a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8005b9c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005ba0:	60e3      	str	r3, [r4, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005ba2:	0040      	lsls	r0, r0, #1
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <HAL_InitTick+0x74>)
 8005ba6:	fbb0 f0f3 	udiv	r0, r0, r3
 8005baa:	3801      	subs	r0, #1
 8005bac:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8005bae:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8005bb0:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bb2:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8005bb4:	f7fb ff4a 	bl	8001a4c <HAL_TIM_Base_Init>
 8005bb8:	b918      	cbnz	r0, 8005bc2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f7fb fe31 	bl	8001822 <HAL_TIM_Base_Start_IT>
 8005bc0:	e000      	b.n	8005bc4 <HAL_InitTick+0x68>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005bc2:	2001      	movs	r0, #1
}
 8005bc4:	b009      	add	sp, #36	; 0x24
 8005bc6:	bd30      	pop	{r4, r5, pc}
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	2000cc70 	.word	0x2000cc70
 8005bd0:	000f4240 	.word	0x000f4240

08005bd4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8005bd4:	f7fc bab1 	b.w	800213a <osSystickHandler>

08005bd8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005bd8:	4801      	ldr	r0, [pc, #4]	; (8005be0 <DMA1_Stream1_IRQHandler+0x8>)
 8005bda:	f7fb b9a7 	b.w	8000f2c <HAL_DMA_IRQHandler>
 8005bde:	bf00      	nop
 8005be0:	2000c460 	.word	0x2000c460

08005be4 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <DMA1_Stream2_IRQHandler+0x8>)
 8005be6:	f7fb b9a1 	b.w	8000f2c <HAL_DMA_IRQHandler>
 8005bea:	bf00      	nop
 8005bec:	2000c328 	.word	0x2000c328

08005bf0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <DMA1_Stream3_IRQHandler+0x8>)
 8005bf2:	f7fb b99b 	b.w	8000f2c <HAL_DMA_IRQHandler>
 8005bf6:	bf00      	nop
 8005bf8:	2000c534 	.word	0x2000c534

08005bfc <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <DMA1_Stream4_IRQHandler+0x8>)
 8005bfe:	f7fb b995 	b.w	8000f2c <HAL_DMA_IRQHandler>
 8005c02:	bf00      	nop
 8005c04:	2000cc04 	.word	0x2000cc04

08005c08 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005c08:	4801      	ldr	r0, [pc, #4]	; (8005c10 <DMA1_Stream5_IRQHandler+0x8>)
 8005c0a:	f7fb b98f 	b.w	8000f2c <HAL_DMA_IRQHandler>
 8005c0e:	bf00      	nop
 8005c10:	2000c38c 	.word	0x2000c38c

08005c14 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005c14:	4801      	ldr	r0, [pc, #4]	; (8005c1c <DMA1_Stream6_IRQHandler+0x8>)
 8005c16:	f7fb b989 	b.w	8000f2c <HAL_DMA_IRQHandler>
 8005c1a:	bf00      	nop
 8005c1c:	2000c66c 	.word	0x2000c66c

08005c20 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c20:	4801      	ldr	r0, [pc, #4]	; (8005c28 <TIM2_IRQHandler+0x8>)
 8005c22:	f7fb be0d 	b.w	8001840 <HAL_TIM_IRQHandler>
 8005c26:	bf00      	nop
 8005c28:	2000cc70 	.word	0x2000cc70

08005c2c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005c2c:	4801      	ldr	r0, [pc, #4]	; (8005c34 <USART2_IRQHandler+0x8>)
 8005c2e:	f7fc b9a7 	b.w	8001f80 <HAL_UART_IRQHandler>
 8005c32:	bf00      	nop
 8005c34:	2000cae4 	.word	0x2000cae4

08005c38 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <USART3_IRQHandler+0x8>)
 8005c3a:	f7fc b9a1 	b.w	8001f80 <HAL_UART_IRQHandler>
 8005c3e:	bf00      	nop
 8005c40:	2000c4c0 	.word	0x2000c4c0

08005c44 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <UART4_IRQHandler+0x8>)
 8005c46:	f7fc b99b 	b.w	8001f80 <HAL_UART_IRQHandler>
 8005c4a:	bf00      	nop
 8005c4c:	2000ca64 	.word	0x2000ca64

08005c50 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <DMA2_Stream1_IRQHandler+0x8>)
 8005c52:	f7fb b96b 	b.w	8000f2c <HAL_DMA_IRQHandler>
 8005c56:	bf00      	nop
 8005c58:	2000c3f0 	.word	0x2000c3f0

08005c5c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <DMA2_Stream6_IRQHandler+0x8>)
 8005c5e:	f7fb b965 	b.w	8000f2c <HAL_DMA_IRQHandler>
 8005c62:	bf00      	nop
 8005c64:	2000c5d0 	.word	0x2000c5d0

08005c68 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005c68:	4801      	ldr	r0, [pc, #4]	; (8005c70 <USART6_IRQHandler+0x8>)
 8005c6a:	f7fc b989 	b.w	8001f80 <HAL_UART_IRQHandler>
 8005c6e:	bf00      	nop
 8005c70:	2000ca20 	.word	0x2000ca20

08005c74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c74:	490f      	ldr	r1, [pc, #60]	; (8005cb4 <SystemInit+0x40>)
 8005c76:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005c7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c82:	4b0d      	ldr	r3, [pc, #52]	; (8005cb8 <SystemInit+0x44>)
 8005c84:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c86:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c8e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005c96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005c9c:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <SystemInit+0x48>)
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005ca8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005caa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cae:	608b      	str	r3, [r1, #8]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	e000ed00 	.word	0xe000ed00
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	24003010 	.word	0x24003010

08005cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005cc6:	e003      	b.n	8005cd0 <LoopCopyDataInit>

08005cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005cce:	3104      	adds	r1, #4

08005cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005cd0:	480b      	ldr	r0, [pc, #44]	; (8005d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005cd8:	d3f6      	bcc.n	8005cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8005cda:	4a0b      	ldr	r2, [pc, #44]	; (8005d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005cdc:	e002      	b.n	8005ce4 <LoopFillZerobss>

08005cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ce0:	f842 3b04 	str.w	r3, [r2], #4

08005ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ce8:	d3f9      	bcc.n	8005cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cea:	f7ff ffc3 	bl	8005c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cee:	f000 f811 	bl	8005d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cf2:	f7fd ff39 	bl	8003b68 <main>
  bx  lr    
 8005cf6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005cf8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005cfc:	08007008 	.word	0x08007008
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005d04:	20007d94 	.word	0x20007d94
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005d08:	20007d94 	.word	0x20007d94
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d0c:	2000ccac 	.word	0x2000ccac

08005d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d10:	e7fe      	b.n	8005d10 <ADC_IRQHandler>
	...

08005d14 <__libc_init_array>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <__libc_init_array+0x3c>)
 8005d18:	4c0e      	ldr	r4, [pc, #56]	; (8005d54 <__libc_init_array+0x40>)
 8005d1a:	1ae4      	subs	r4, r4, r3
 8005d1c:	10a4      	asrs	r4, r4, #2
 8005d1e:	2500      	movs	r5, #0
 8005d20:	461e      	mov	r6, r3
 8005d22:	42a5      	cmp	r5, r4
 8005d24:	d004      	beq.n	8005d30 <__libc_init_array+0x1c>
 8005d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d2a:	4798      	blx	r3
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	e7f8      	b.n	8005d22 <__libc_init_array+0xe>
 8005d30:	f000 febc 	bl	8006aac <_init>
 8005d34:	4c08      	ldr	r4, [pc, #32]	; (8005d58 <__libc_init_array+0x44>)
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <__libc_init_array+0x48>)
 8005d38:	1ae4      	subs	r4, r4, r3
 8005d3a:	10a4      	asrs	r4, r4, #2
 8005d3c:	2500      	movs	r5, #0
 8005d3e:	461e      	mov	r6, r3
 8005d40:	42a5      	cmp	r5, r4
 8005d42:	d004      	beq.n	8005d4e <__libc_init_array+0x3a>
 8005d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d48:	4798      	blx	r3
 8005d4a:	3501      	adds	r5, #1
 8005d4c:	e7f8      	b.n	8005d40 <__libc_init_array+0x2c>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	08007000 	.word	0x08007000
 8005d54:	08007000 	.word	0x08007000
 8005d58:	08007004 	.word	0x08007004
 8005d5c:	08007000 	.word	0x08007000

08005d60 <memcmp>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	3901      	subs	r1, #1
 8005d64:	4402      	add	r2, r0
 8005d66:	4290      	cmp	r0, r2
 8005d68:	d007      	beq.n	8005d7a <memcmp+0x1a>
 8005d6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d72:	42a3      	cmp	r3, r4
 8005d74:	d0f7      	beq.n	8005d66 <memcmp+0x6>
 8005d76:	1b18      	subs	r0, r3, r4
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	bd10      	pop	{r4, pc}

08005d7e <memcpy>:
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	1e43      	subs	r3, r0, #1
 8005d82:	440a      	add	r2, r1
 8005d84:	4291      	cmp	r1, r2
 8005d86:	d004      	beq.n	8005d92 <memcpy+0x14>
 8005d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d90:	e7f8      	b.n	8005d84 <memcpy+0x6>
 8005d92:	bd10      	pop	{r4, pc}

08005d94 <memset>:
 8005d94:	4402      	add	r2, r0
 8005d96:	4603      	mov	r3, r0
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d002      	beq.n	8005da2 <memset+0xe>
 8005d9c:	f803 1b01 	strb.w	r1, [r3], #1
 8005da0:	e7fa      	b.n	8005d98 <memset+0x4>
 8005da2:	4770      	bx	lr

08005da4 <cosf>:
 8005da4:	ee10 3a10 	vmov	r3, s0
 8005da8:	b507      	push	{r0, r1, r2, lr}
 8005daa:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <cosf+0x78>)
 8005dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	4293      	cmp	r3, r2
 8005db2:	dc02      	bgt.n	8005dba <cosf+0x16>
 8005db4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005e20 <cosf+0x7c>
 8005db8:	e013      	b.n	8005de2 <cosf+0x3e>
 8005dba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005dbe:	db02      	blt.n	8005dc6 <cosf+0x22>
 8005dc0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005dc4:	e027      	b.n	8005e16 <cosf+0x72>
 8005dc6:	4668      	mov	r0, sp
 8005dc8:	f000 f97e 	bl	80060c8 <__ieee754_rem_pio2f>
 8005dcc:	f000 0003 	and.w	r0, r0, #3
 8005dd0:	2801      	cmp	r0, #1
 8005dd2:	d009      	beq.n	8005de8 <cosf+0x44>
 8005dd4:	2802      	cmp	r0, #2
 8005dd6:	d00e      	beq.n	8005df6 <cosf+0x52>
 8005dd8:	b9b0      	cbnz	r0, 8005e08 <cosf+0x64>
 8005dda:	eddd 0a01 	vldr	s1, [sp, #4]
 8005dde:	ed9d 0a00 	vldr	s0, [sp]
 8005de2:	f000 fa9b 	bl	800631c <__kernel_cosf>
 8005de6:	e016      	b.n	8005e16 <cosf+0x72>
 8005de8:	eddd 0a01 	vldr	s1, [sp, #4]
 8005dec:	ed9d 0a00 	vldr	s0, [sp]
 8005df0:	f000 fd58 	bl	80068a4 <__kernel_sinf>
 8005df4:	e005      	b.n	8005e02 <cosf+0x5e>
 8005df6:	eddd 0a01 	vldr	s1, [sp, #4]
 8005dfa:	ed9d 0a00 	vldr	s0, [sp]
 8005dfe:	f000 fa8d 	bl	800631c <__kernel_cosf>
 8005e02:	eeb1 0a40 	vneg.f32	s0, s0
 8005e06:	e006      	b.n	8005e16 <cosf+0x72>
 8005e08:	2001      	movs	r0, #1
 8005e0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e0e:	ed9d 0a00 	vldr	s0, [sp]
 8005e12:	f000 fd47 	bl	80068a4 <__kernel_sinf>
 8005e16:	b003      	add	sp, #12
 8005e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e1c:	3f490fd8 	.word	0x3f490fd8
 8005e20:	00000000 	.word	0x00000000

08005e24 <sinf>:
 8005e24:	ee10 3a10 	vmov	r3, s0
 8005e28:	b507      	push	{r0, r1, r2, lr}
 8005e2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ea0 <sinf+0x7c>)
 8005e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e30:	4293      	cmp	r3, r2
 8005e32:	dc03      	bgt.n	8005e3c <sinf+0x18>
 8005e34:	2000      	movs	r0, #0
 8005e36:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005ea4 <sinf+0x80>
 8005e3a:	e014      	b.n	8005e66 <sinf+0x42>
 8005e3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005e40:	db02      	blt.n	8005e48 <sinf+0x24>
 8005e42:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005e46:	e028      	b.n	8005e9a <sinf+0x76>
 8005e48:	4668      	mov	r0, sp
 8005e4a:	f000 f93d 	bl	80060c8 <__ieee754_rem_pio2f>
 8005e4e:	f000 0003 	and.w	r0, r0, #3
 8005e52:	2801      	cmp	r0, #1
 8005e54:	d00a      	beq.n	8005e6c <sinf+0x48>
 8005e56:	2802      	cmp	r0, #2
 8005e58:	d00f      	beq.n	8005e7a <sinf+0x56>
 8005e5a:	b9b0      	cbnz	r0, 8005e8a <sinf+0x66>
 8005e5c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e60:	ed9d 0a00 	vldr	s0, [sp]
 8005e64:	2001      	movs	r0, #1
 8005e66:	f000 fd1d 	bl	80068a4 <__kernel_sinf>
 8005e6a:	e016      	b.n	8005e9a <sinf+0x76>
 8005e6c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e70:	ed9d 0a00 	vldr	s0, [sp]
 8005e74:	f000 fa52 	bl	800631c <__kernel_cosf>
 8005e78:	e00f      	b.n	8005e9a <sinf+0x76>
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e80:	ed9d 0a00 	vldr	s0, [sp]
 8005e84:	f000 fd0e 	bl	80068a4 <__kernel_sinf>
 8005e88:	e005      	b.n	8005e96 <sinf+0x72>
 8005e8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e8e:	ed9d 0a00 	vldr	s0, [sp]
 8005e92:	f000 fa43 	bl	800631c <__kernel_cosf>
 8005e96:	eeb1 0a40 	vneg.f32	s0, s0
 8005e9a:	b003      	add	sp, #12
 8005e9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ea0:	3f490fd8 	.word	0x3f490fd8
 8005ea4:	00000000 	.word	0x00000000

08005ea8 <sqrt>:
 8005ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eac:	ed2d 8b02 	vpush	{d8}
 8005eb0:	b08b      	sub	sp, #44	; 0x2c
 8005eb2:	ec55 4b10 	vmov	r4, r5, d0
 8005eb6:	f000 f853 	bl	8005f60 <__ieee754_sqrt>
 8005eba:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <sqrt+0xb0>)
 8005ebc:	eeb0 8a40 	vmov.f32	s16, s0
 8005ec0:	eef0 8a60 	vmov.f32	s17, s1
 8005ec4:	f993 6000 	ldrsb.w	r6, [r3]
 8005ec8:	1c73      	adds	r3, r6, #1
 8005eca:	d03b      	beq.n	8005f44 <sqrt+0x9c>
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	f7fa fdce 	bl	8000a74 <__aeabi_dcmpun>
 8005ed8:	4607      	mov	r7, r0
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d132      	bne.n	8005f44 <sqrt+0x9c>
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	f04f 0900 	mov.w	r9, #0
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	464b      	mov	r3, r9
 8005eea:	4620      	mov	r0, r4
 8005eec:	4629      	mov	r1, r5
 8005eee:	f7fa fd99 	bl	8000a24 <__aeabi_dcmplt>
 8005ef2:	b338      	cbz	r0, 8005f44 <sqrt+0x9c>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4b18      	ldr	r3, [pc, #96]	; (8005f5c <sqrt+0xb4>)
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	9708      	str	r7, [sp, #32]
 8005efe:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005f02:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005f06:	b916      	cbnz	r6, 8005f0e <sqrt+0x66>
 8005f08:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005f0c:	e009      	b.n	8005f22 <sqrt+0x7a>
 8005f0e:	4642      	mov	r2, r8
 8005f10:	464b      	mov	r3, r9
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	f7fa fc3d 	bl	8000794 <__aeabi_ddiv>
 8005f1a:	2e02      	cmp	r6, #2
 8005f1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f20:	d003      	beq.n	8005f2a <sqrt+0x82>
 8005f22:	4668      	mov	r0, sp
 8005f24:	f000 fd06 	bl	8006934 <matherr>
 8005f28:	b918      	cbnz	r0, 8005f32 <sqrt+0x8a>
 8005f2a:	f000 fdb9 	bl	8006aa0 <__errno>
 8005f2e:	2321      	movs	r3, #33	; 0x21
 8005f30:	6003      	str	r3, [r0, #0]
 8005f32:	9b08      	ldr	r3, [sp, #32]
 8005f34:	b11b      	cbz	r3, 8005f3e <sqrt+0x96>
 8005f36:	f000 fdb3 	bl	8006aa0 <__errno>
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	6003      	str	r3, [r0, #0]
 8005f3e:	ed9d 0b06 	vldr	d0, [sp, #24]
 8005f42:	e003      	b.n	8005f4c <sqrt+0xa4>
 8005f44:	eeb0 0a48 	vmov.f32	s0, s16
 8005f48:	eef0 0a68 	vmov.f32	s1, s17
 8005f4c:	b00b      	add	sp, #44	; 0x2c
 8005f4e:	ecbd 8b02 	vpop	{d8}
 8005f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f56:	bf00      	nop
 8005f58:	20007d2c 	.word	0x20007d2c
 8005f5c:	08006c2a 	.word	0x08006c2a

08005f60 <__ieee754_sqrt>:
 8005f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f64:	4957      	ldr	r1, [pc, #348]	; (80060c4 <__ieee754_sqrt+0x164>)
 8005f66:	4f57      	ldr	r7, [pc, #348]	; (80060c4 <__ieee754_sqrt+0x164>)
 8005f68:	ec55 4b10 	vmov	r4, r5, d0
 8005f6c:	4029      	ands	r1, r5
 8005f6e:	42b9      	cmp	r1, r7
 8005f70:	462a      	mov	r2, r5
 8005f72:	462b      	mov	r3, r5
 8005f74:	4626      	mov	r6, r4
 8005f76:	d10c      	bne.n	8005f92 <__ieee754_sqrt+0x32>
 8005f78:	ee10 2a10 	vmov	r2, s0
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	ee10 0a10 	vmov	r0, s0
 8005f82:	4629      	mov	r1, r5
 8005f84:	f7fa fadc 	bl	8000540 <__aeabi_dmul>
 8005f88:	4622      	mov	r2, r4
 8005f8a:	462b      	mov	r3, r5
 8005f8c:	f7fa f926 	bl	80001dc <__adddf3>
 8005f90:	e094      	b.n	80060bc <__ieee754_sqrt+0x15c>
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	dc11      	bgt.n	8005fba <__ieee754_sqrt+0x5a>
 8005f96:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8005f9a:	4321      	orrs	r1, r4
 8005f9c:	f000 808b 	beq.w	80060b6 <__ieee754_sqrt+0x156>
 8005fa0:	b15d      	cbz	r5, 8005fba <__ieee754_sqrt+0x5a>
 8005fa2:	ee10 2a10 	vmov	r2, s0
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa f914 	bl	80001d8 <__aeabi_dsub>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	f7fa fbee 	bl	8000794 <__aeabi_ddiv>
 8005fb8:	e080      	b.n	80060bc <__ieee754_sqrt+0x15c>
 8005fba:	1512      	asrs	r2, r2, #20
 8005fbc:	d112      	bne.n	8005fe4 <__ieee754_sqrt+0x84>
 8005fbe:	b91b      	cbnz	r3, 8005fc8 <__ieee754_sqrt+0x68>
 8005fc0:	0af3      	lsrs	r3, r6, #11
 8005fc2:	3a15      	subs	r2, #21
 8005fc4:	0576      	lsls	r6, r6, #21
 8005fc6:	e7fa      	b.n	8005fbe <__ieee754_sqrt+0x5e>
 8005fc8:	2100      	movs	r1, #0
 8005fca:	02d8      	lsls	r0, r3, #11
 8005fcc:	d402      	bmi.n	8005fd4 <__ieee754_sqrt+0x74>
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	3101      	adds	r1, #1
 8005fd2:	e7fa      	b.n	8005fca <__ieee754_sqrt+0x6a>
 8005fd4:	1e48      	subs	r0, r1, #1
 8005fd6:	1a12      	subs	r2, r2, r0
 8005fd8:	f1c1 0020 	rsb	r0, r1, #32
 8005fdc:	fa26 f000 	lsr.w	r0, r6, r0
 8005fe0:	4303      	orrs	r3, r0
 8005fe2:	408e      	lsls	r6, r1
 8005fe4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fec:	07d1      	lsls	r1, r2, #31
 8005fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ff2:	bf42      	ittt	mi
 8005ff4:	005b      	lslmi	r3, r3, #1
 8005ff6:	eb03 73d6 	addmi.w	r3, r3, r6, lsr #31
 8005ffa:	0076      	lslmi	r6, r6, #1
 8005ffc:	1055      	asrs	r5, r2, #1
 8005ffe:	f04f 0e00 	mov.w	lr, #0
 8006002:	eb03 72d6 	add.w	r2, r3, r6, lsr #31
 8006006:	4413      	add	r3, r2
 8006008:	0076      	lsls	r6, r6, #1
 800600a:	2216      	movs	r2, #22
 800600c:	4677      	mov	r7, lr
 800600e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006012:	1878      	adds	r0, r7, r1
 8006014:	4298      	cmp	r0, r3
 8006016:	bfde      	ittt	le
 8006018:	1a1b      	suble	r3, r3, r0
 800601a:	1847      	addle	r7, r0, r1
 800601c:	448e      	addle	lr, r1
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	3a01      	subs	r2, #1
 8006022:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 8006026:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800602a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800602e:	d1f0      	bne.n	8006012 <__ieee754_sqrt+0xb2>
 8006030:	2420      	movs	r4, #32
 8006032:	4694      	mov	ip, r2
 8006034:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006038:	429f      	cmp	r7, r3
 800603a:	eb01 000c 	add.w	r0, r1, ip
 800603e:	db02      	blt.n	8006046 <__ieee754_sqrt+0xe6>
 8006040:	d116      	bne.n	8006070 <__ieee754_sqrt+0x110>
 8006042:	42b0      	cmp	r0, r6
 8006044:	d813      	bhi.n	800606e <__ieee754_sqrt+0x10e>
 8006046:	2800      	cmp	r0, #0
 8006048:	eb00 0c01 	add.w	ip, r0, r1
 800604c:	da05      	bge.n	800605a <__ieee754_sqrt+0xfa>
 800604e:	f1bc 0f00 	cmp.w	ip, #0
 8006052:	db02      	blt.n	800605a <__ieee754_sqrt+0xfa>
 8006054:	f107 0801 	add.w	r8, r7, #1
 8006058:	e000      	b.n	800605c <__ieee754_sqrt+0xfc>
 800605a:	46b8      	mov	r8, r7
 800605c:	1bdb      	subs	r3, r3, r7
 800605e:	42b0      	cmp	r0, r6
 8006060:	bf88      	it	hi
 8006062:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006066:	1a36      	subs	r6, r6, r0
 8006068:	440a      	add	r2, r1
 800606a:	4647      	mov	r7, r8
 800606c:	e000      	b.n	8006070 <__ieee754_sqrt+0x110>
 800606e:	463b      	mov	r3, r7
 8006070:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 8006074:	3c01      	subs	r4, #1
 8006076:	4403      	add	r3, r0
 8006078:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800607c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006080:	d1da      	bne.n	8006038 <__ieee754_sqrt+0xd8>
 8006082:	4333      	orrs	r3, r6
 8006084:	d007      	beq.n	8006096 <__ieee754_sqrt+0x136>
 8006086:	1c53      	adds	r3, r2, #1
 8006088:	bf13      	iteet	ne
 800608a:	f002 0301 	andne.w	r3, r2, #1
 800608e:	f10e 0e01 	addeq.w	lr, lr, #1
 8006092:	4622      	moveq	r2, r4
 8006094:	18d2      	addne	r2, r2, r3
 8006096:	ea4f 046e 	mov.w	r4, lr, asr #1
 800609a:	0853      	lsrs	r3, r2, #1
 800609c:	f104 547f 	add.w	r4, r4, #1069547520	; 0x3fc00000
 80060a0:	f01e 0f01 	tst.w	lr, #1
 80060a4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
 80060a8:	bf18      	it	ne
 80060aa:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	eb04 5105 	add.w	r1, r4, r5, lsl #20
 80060b2:	4618      	mov	r0, r3
 80060b4:	e002      	b.n	80060bc <__ieee754_sqrt+0x15c>
 80060b6:	ee10 0a10 	vmov	r0, s0
 80060ba:	4629      	mov	r1, r5
 80060bc:	ec41 0b10 	vmov	d0, r0, r1
 80060c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c4:	7ff00000 	.word	0x7ff00000

080060c8 <__ieee754_rem_pio2f>:
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	ee10 6a10 	vmov	r6, s0
 80060ce:	4b85      	ldr	r3, [pc, #532]	; (80062e4 <__ieee754_rem_pio2f+0x21c>)
 80060d0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80060d4:	429c      	cmp	r4, r3
 80060d6:	b087      	sub	sp, #28
 80060d8:	4605      	mov	r5, r0
 80060da:	dc04      	bgt.n	80060e6 <__ieee754_rem_pio2f+0x1e>
 80060dc:	2300      	movs	r3, #0
 80060de:	ed85 0a00 	vstr	s0, [r5]
 80060e2:	6043      	str	r3, [r0, #4]
 80060e4:	e0b7      	b.n	8006256 <__ieee754_rem_pio2f+0x18e>
 80060e6:	4b80      	ldr	r3, [pc, #512]	; (80062e8 <__ieee754_rem_pio2f+0x220>)
 80060e8:	429c      	cmp	r4, r3
 80060ea:	dc37      	bgt.n	800615c <__ieee754_rem_pio2f+0x94>
 80060ec:	2e00      	cmp	r6, #0
 80060ee:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80062ec <__ieee754_rem_pio2f+0x224>
 80060f2:	4b7f      	ldr	r3, [pc, #508]	; (80062f0 <__ieee754_rem_pio2f+0x228>)
 80060f4:	f024 040f 	bic.w	r4, r4, #15
 80060f8:	dd17      	ble.n	800612a <__ieee754_rem_pio2f+0x62>
 80060fa:	429c      	cmp	r4, r3
 80060fc:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006100:	bf09      	itett	eq
 8006102:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80062f4 <__ieee754_rem_pio2f+0x22c>
 8006106:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80062f8 <__ieee754_rem_pio2f+0x230>
 800610a:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800610e:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80062fc <__ieee754_rem_pio2f+0x234>
 8006112:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006116:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800611a:	edc0 6a00 	vstr	s13, [r0]
 800611e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006122:	edc0 7a01 	vstr	s15, [r0, #4]
 8006126:	2001      	movs	r0, #1
 8006128:	e0da      	b.n	80062e0 <__ieee754_rem_pio2f+0x218>
 800612a:	429c      	cmp	r4, r3
 800612c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006130:	bf09      	itett	eq
 8006132:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80062f4 <__ieee754_rem_pio2f+0x22c>
 8006136:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80062f8 <__ieee754_rem_pio2f+0x230>
 800613a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800613e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80062fc <__ieee754_rem_pio2f+0x234>
 8006142:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006146:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800614a:	edc0 6a00 	vstr	s13, [r0]
 800614e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006152:	edc0 7a01 	vstr	s15, [r0, #4]
 8006156:	f04f 30ff 	mov.w	r0, #4294967295
 800615a:	e0c1      	b.n	80062e0 <__ieee754_rem_pio2f+0x218>
 800615c:	4b68      	ldr	r3, [pc, #416]	; (8006300 <__ieee754_rem_pio2f+0x238>)
 800615e:	429c      	cmp	r4, r3
 8006160:	dc70      	bgt.n	8006244 <__ieee754_rem_pio2f+0x17c>
 8006162:	f000 fbe9 	bl	8006938 <fabsf>
 8006166:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006304 <__ieee754_rem_pio2f+0x23c>
 800616a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800616e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006172:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80062ec <__ieee754_rem_pio2f+0x224>
 8006176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800617e:	ee17 0a90 	vmov	r0, s15
 8006182:	eef1 7a46 	vneg.f32	s15, s12
 8006186:	eea7 0a87 	vfma.f32	s0, s15, s14
 800618a:	281f      	cmp	r0, #31
 800618c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80062f8 <__ieee754_rem_pio2f+0x230>
 8006190:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006194:	ee70 6a47 	vsub.f32	s13, s0, s14
 8006198:	ee16 3a90 	vmov	r3, s13
 800619c:	dc07      	bgt.n	80061ae <__ieee754_rem_pio2f+0xe6>
 800619e:	1e47      	subs	r7, r0, #1
 80061a0:	4959      	ldr	r1, [pc, #356]	; (8006308 <__ieee754_rem_pio2f+0x240>)
 80061a2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80061a6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80061aa:	428a      	cmp	r2, r1
 80061ac:	d105      	bne.n	80061ba <__ieee754_rem_pio2f+0xf2>
 80061ae:	15e4      	asrs	r4, r4, #23
 80061b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80061b4:	1aa2      	subs	r2, r4, r2
 80061b6:	2a08      	cmp	r2, #8
 80061b8:	dc01      	bgt.n	80061be <__ieee754_rem_pio2f+0xf6>
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	e02f      	b.n	800621e <__ieee754_rem_pio2f+0x156>
 80061be:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80062f4 <__ieee754_rem_pio2f+0x22c>
 80061c2:	eef0 6a40 	vmov.f32	s13, s0
 80061c6:	eee7 6a87 	vfma.f32	s13, s15, s14
 80061ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 80061ce:	eea7 0a87 	vfma.f32	s0, s15, s14
 80061d2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80062fc <__ieee754_rem_pio2f+0x234>
 80061d6:	ee96 0a07 	vfnms.f32	s0, s12, s14
 80061da:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80061de:	eeb0 7a40 	vmov.f32	s14, s0
 80061e2:	ee15 3a90 	vmov	r3, s11
 80061e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80061ea:	1aa4      	subs	r4, r4, r2
 80061ec:	2c19      	cmp	r4, #25
 80061ee:	dc04      	bgt.n	80061fa <__ieee754_rem_pio2f+0x132>
 80061f0:	edc5 5a00 	vstr	s11, [r5]
 80061f4:	eeb0 0a66 	vmov.f32	s0, s13
 80061f8:	e011      	b.n	800621e <__ieee754_rem_pio2f+0x156>
 80061fa:	eddf 5a44 	vldr	s11, [pc, #272]	; 800630c <__ieee754_rem_pio2f+0x244>
 80061fe:	eeb0 0a66 	vmov.f32	s0, s13
 8006202:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8006206:	ee36 7ac0 	vsub.f32	s14, s13, s0
 800620a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800620e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8006310 <__ieee754_rem_pio2f+0x248>
 8006212:	ee96 7a27 	vfnms.f32	s14, s12, s15
 8006216:	ee70 7a47 	vsub.f32	s15, s0, s14
 800621a:	edc5 7a00 	vstr	s15, [r5]
 800621e:	edd5 6a00 	vldr	s13, [r5]
 8006222:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006226:	2e00      	cmp	r6, #0
 8006228:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800622c:	ed85 0a01 	vstr	s0, [r5, #4]
 8006230:	da56      	bge.n	80062e0 <__ieee754_rem_pio2f+0x218>
 8006232:	eef1 6a66 	vneg.f32	s13, s13
 8006236:	eeb1 0a40 	vneg.f32	s0, s0
 800623a:	edc5 6a00 	vstr	s13, [r5]
 800623e:	ed85 0a01 	vstr	s0, [r5, #4]
 8006242:	e04c      	b.n	80062de <__ieee754_rem_pio2f+0x216>
 8006244:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006248:	db07      	blt.n	800625a <__ieee754_rem_pio2f+0x192>
 800624a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800624e:	edc0 7a01 	vstr	s15, [r0, #4]
 8006252:	edc0 7a00 	vstr	s15, [r0]
 8006256:	2000      	movs	r0, #0
 8006258:	e042      	b.n	80062e0 <__ieee754_rem_pio2f+0x218>
 800625a:	15e2      	asrs	r2, r4, #23
 800625c:	3a86      	subs	r2, #134	; 0x86
 800625e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8006262:	ee06 3a90 	vmov	s13, r3
 8006266:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 800626a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8006314 <__ieee754_rem_pio2f+0x24c>
 800626e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006272:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006276:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800627a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800627e:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8006282:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006286:	ee37 7a66 	vsub.f32	s14, s14, s13
 800628a:	edcd 6a04 	vstr	s13, [sp, #16]
 800628e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629a:	edcd 7a05 	vstr	s15, [sp, #20]
 800629e:	d107      	bne.n	80062b0 <__ieee754_rem_pio2f+0x1e8>
 80062a0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	bf14      	ite	ne
 80062aa:	2302      	movne	r3, #2
 80062ac:	2301      	moveq	r3, #1
 80062ae:	e000      	b.n	80062b2 <__ieee754_rem_pio2f+0x1ea>
 80062b0:	2303      	movs	r3, #3
 80062b2:	4919      	ldr	r1, [pc, #100]	; (8006318 <__ieee754_rem_pio2f+0x250>)
 80062b4:	9101      	str	r1, [sp, #4]
 80062b6:	2102      	movs	r1, #2
 80062b8:	9100      	str	r1, [sp, #0]
 80062ba:	a803      	add	r0, sp, #12
 80062bc:	4629      	mov	r1, r5
 80062be:	f000 f88b 	bl	80063d8 <__kernel_rem_pio2f>
 80062c2:	2e00      	cmp	r6, #0
 80062c4:	da0c      	bge.n	80062e0 <__ieee754_rem_pio2f+0x218>
 80062c6:	edd5 7a00 	vldr	s15, [r5]
 80062ca:	eef1 7a67 	vneg.f32	s15, s15
 80062ce:	edc5 7a00 	vstr	s15, [r5]
 80062d2:	edd5 7a01 	vldr	s15, [r5, #4]
 80062d6:	eef1 7a67 	vneg.f32	s15, s15
 80062da:	edc5 7a01 	vstr	s15, [r5, #4]
 80062de:	4240      	negs	r0, r0
 80062e0:	b007      	add	sp, #28
 80062e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e4:	3f490fd8 	.word	0x3f490fd8
 80062e8:	4016cbe3 	.word	0x4016cbe3
 80062ec:	3fc90f80 	.word	0x3fc90f80
 80062f0:	3fc90fd0 	.word	0x3fc90fd0
 80062f4:	37354400 	.word	0x37354400
 80062f8:	37354443 	.word	0x37354443
 80062fc:	2e85a308 	.word	0x2e85a308
 8006300:	43490f80 	.word	0x43490f80
 8006304:	3f22f984 	.word	0x3f22f984
 8006308:	08006c30 	.word	0x08006c30
 800630c:	2e85a300 	.word	0x2e85a300
 8006310:	248d3132 	.word	0x248d3132
 8006314:	43800000 	.word	0x43800000
 8006318:	08006cb0 	.word	0x08006cb0

0800631c <__kernel_cosf>:
 800631c:	ee10 3a10 	vmov	r3, s0
 8006320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006324:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006328:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800632c:	da05      	bge.n	800633a <__kernel_cosf+0x1e>
 800632e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006332:	ee17 2a90 	vmov	r2, s15
 8006336:	2a00      	cmp	r2, #0
 8006338:	d03b      	beq.n	80063b2 <__kernel_cosf+0x96>
 800633a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800633e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80063b8 <__kernel_cosf+0x9c>
 8006342:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80063bc <__kernel_cosf+0xa0>
 8006346:	eddf 5a1e 	vldr	s11, [pc, #120]	; 80063c0 <__kernel_cosf+0xa4>
 800634a:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <__kernel_cosf+0xa8>)
 800634c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006350:	4293      	cmp	r3, r2
 8006352:	ee60 0a20 	vmul.f32	s1, s0, s1
 8006356:	eee7 5a06 	vfma.f32	s11, s14, s12
 800635a:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80063c8 <__kernel_cosf+0xac>
 800635e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006362:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80063cc <__kernel_cosf+0xb0>
 8006366:	eee7 5a06 	vfma.f32	s11, s14, s12
 800636a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80063d0 <__kernel_cosf+0xb4>
 800636e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006372:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8006376:	ee26 6a07 	vmul.f32	s12, s12, s14
 800637a:	dc06      	bgt.n	800638a <__kernel_cosf+0x6e>
 800637c:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8006380:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8006384:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8006388:	4770      	bx	lr
 800638a:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <__kernel_cosf+0xb8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	bfda      	itte	le
 8006390:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8006394:	ee07 3a90 	vmovle	s15, r3
 8006398:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 800639c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80063a0:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80063a4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80063a8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80063ac:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80063b0:	4770      	bx	lr
 80063b2:	eeb0 0a66 	vmov.f32	s0, s13
 80063b6:	4770      	bx	lr
 80063b8:	310f74f6 	.word	0x310f74f6
 80063bc:	ad47d74e 	.word	0xad47d74e
 80063c0:	b493f27c 	.word	0xb493f27c
 80063c4:	3e999999 	.word	0x3e999999
 80063c8:	37d00d01 	.word	0x37d00d01
 80063cc:	bab60b61 	.word	0xbab60b61
 80063d0:	3d2aaaab 	.word	0x3d2aaaab
 80063d4:	3f480000 	.word	0x3f480000

080063d8 <__kernel_rem_pio2f>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	ed2d 8b04 	vpush	{d8-d9}
 80063e0:	b0d5      	sub	sp, #340	; 0x154
 80063e2:	460f      	mov	r7, r1
 80063e4:	9000      	str	r0, [sp, #0]
 80063e6:	49cf      	ldr	r1, [pc, #828]	; (8006724 <__kernel_rem_pio2f+0x34c>)
 80063e8:	9862      	ldr	r0, [sp, #392]	; 0x188
 80063ea:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 80063ec:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80063f0:	f103 3aff 	add.w	sl, r3, #4294967295
 80063f4:	1ed0      	subs	r0, r2, #3
 80063f6:	2408      	movs	r4, #8
 80063f8:	fb90 f0f4 	sdiv	r0, r0, r4
 80063fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006400:	1c45      	adds	r5, r0, #1
 8006402:	ebca 0e00 	rsb	lr, sl, r0
 8006406:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800640a:	eb09 0c0a 	add.w	ip, r9, sl
 800640e:	ac18      	add	r4, sp, #96	; 0x60
 8006410:	eb06 088e 	add.w	r8, r6, lr, lsl #2
 8006414:	2200      	movs	r2, #0
 8006416:	4562      	cmp	r2, ip
 8006418:	dc0e      	bgt.n	8006438 <__kernel_rem_pio2f+0x60>
 800641a:	eb1e 0f02 	cmn.w	lr, r2
 800641e:	bf57      	itett	pl
 8006420:	f858 1022 	ldrpl.w	r1, [r8, r2, lsl #2]
 8006424:	eddf 7ac0 	vldrmi	s15, [pc, #768]	; 8006728 <__kernel_rem_pio2f+0x350>
 8006428:	ee07 1a90 	vmovpl	s15, r1
 800642c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006430:	3201      	adds	r2, #1
 8006432:	ece4 7a01 	vstmia	r4!, {s15}
 8006436:	e7ee      	b.n	8006416 <__kernel_rem_pio2f+0x3e>
 8006438:	f50d 7c80 	add.w	ip, sp, #256	; 0x100
 800643c:	2400      	movs	r4, #0
 800643e:	454c      	cmp	r4, r9
 8006440:	dc18      	bgt.n	8006474 <__kernel_rem_pio2f+0x9c>
 8006442:	191a      	adds	r2, r3, r4
 8006444:	a918      	add	r1, sp, #96	; 0x60
 8006446:	f8dd e000 	ldr.w	lr, [sp]
 800644a:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8006728 <__kernel_rem_pio2f+0x350>
 800644e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006452:	f04f 0800 	mov.w	r8, #0
 8006456:	45d0      	cmp	r8, sl
 8006458:	dc08      	bgt.n	800646c <__kernel_rem_pio2f+0x94>
 800645a:	ecfe 6a01 	vldmia	lr!, {s13}
 800645e:	ed32 7a01 	vldmdb	r2!, {s14}
 8006462:	f108 0801 	add.w	r8, r8, #1
 8006466:	eee6 7a87 	vfma.f32	s15, s13, s14
 800646a:	e7f4      	b.n	8006456 <__kernel_rem_pio2f+0x7e>
 800646c:	ecec 7a01 	vstmia	ip!, {s15}
 8006470:	3401      	adds	r4, #1
 8006472:	e7e4      	b.n	800643e <__kernel_rem_pio2f+0x66>
 8006474:	aa04      	add	r2, sp, #16
 8006476:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800647a:	9201      	str	r2, [sp, #4]
 800647c:	eddf 8aab 	vldr	s17, [pc, #684]	; 800672c <__kernel_rem_pio2f+0x354>
 8006480:	ed9f 9aab 	vldr	s18, [pc, #684]	; 8006730 <__kernel_rem_pio2f+0x358>
 8006484:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8006488:	9202      	str	r2, [sp, #8]
 800648a:	464c      	mov	r4, r9
 800648c:	aa54      	add	r2, sp, #336	; 0x150
 800648e:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 8006492:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006496:	f108 38ff 	add.w	r8, r8, #4294967295
 800649a:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 800649e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80064a2:	aa54      	add	r2, sp, #336	; 0x150
 80064a4:	eb02 0008 	add.w	r0, r2, r8
 80064a8:	384c      	subs	r0, #76	; 0x4c
 80064aa:	2200      	movs	r2, #0
 80064ac:	1aa6      	subs	r6, r4, r2
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	dd14      	ble.n	80064dc <__kernel_rem_pio2f+0x104>
 80064b2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80064b6:	ae04      	add	r6, sp, #16
 80064b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80064c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80064c8:	ee10 1a10 	vmov	r1, s0
 80064cc:	ed30 0a01 	vldmdb	r0!, {s0}
 80064d0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80064d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80064d8:	3201      	adds	r2, #1
 80064da:	e7e7      	b.n	80064ac <__kernel_rem_pio2f+0xd4>
 80064dc:	4628      	mov	r0, r5
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	f000 fa74 	bl	80069cc <scalbnf>
 80064e4:	eeb0 8a40 	vmov.f32	s16, s0
 80064e8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80064ec:	ee28 0a00 	vmul.f32	s0, s16, s0
 80064f0:	f000 fa2a 	bl	8006948 <floorf>
 80064f4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80064f8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80064fc:	2d00      	cmp	r5, #0
 80064fe:	9b03      	ldr	r3, [sp, #12]
 8006500:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006504:	ee17 ba90 	vmov	fp, s15
 8006508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800650c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006510:	dd14      	ble.n	800653c <__kernel_rem_pio2f+0x164>
 8006512:	f104 3eff 	add.w	lr, r4, #4294967295
 8006516:	aa04      	add	r2, sp, #16
 8006518:	f1c5 0608 	rsb	r6, r5, #8
 800651c:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8006520:	fa42 f006 	asr.w	r0, r2, r6
 8006524:	fa00 f606 	lsl.w	r6, r0, r6
 8006528:	a904      	add	r1, sp, #16
 800652a:	1b92      	subs	r2, r2, r6
 800652c:	f1c5 0607 	rsb	r6, r5, #7
 8006530:	4483      	add	fp, r0
 8006532:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 8006536:	fa42 f606 	asr.w	r6, r2, r6
 800653a:	e00f      	b.n	800655c <__kernel_rem_pio2f+0x184>
 800653c:	d105      	bne.n	800654a <__kernel_rem_pio2f+0x172>
 800653e:	1e62      	subs	r2, r4, #1
 8006540:	a904      	add	r1, sp, #16
 8006542:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8006546:	1236      	asrs	r6, r6, #8
 8006548:	e008      	b.n	800655c <__kernel_rem_pio2f+0x184>
 800654a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800654e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006556:	da04      	bge.n	8006562 <__kernel_rem_pio2f+0x18a>
 8006558:	2600      	movs	r6, #0
 800655a:	e03f      	b.n	80065dc <__kernel_rem_pio2f+0x204>
 800655c:	2e00      	cmp	r6, #0
 800655e:	dc01      	bgt.n	8006564 <__kernel_rem_pio2f+0x18c>
 8006560:	e03c      	b.n	80065dc <__kernel_rem_pio2f+0x204>
 8006562:	2602      	movs	r6, #2
 8006564:	2200      	movs	r2, #0
 8006566:	f10b 0b01 	add.w	fp, fp, #1
 800656a:	4610      	mov	r0, r2
 800656c:	4294      	cmp	r4, r2
 800656e:	dd0f      	ble.n	8006590 <__kernel_rem_pio2f+0x1b8>
 8006570:	a904      	add	r1, sp, #16
 8006572:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8006576:	b918      	cbnz	r0, 8006580 <__kernel_rem_pio2f+0x1a8>
 8006578:	b141      	cbz	r1, 800658c <__kernel_rem_pio2f+0x1b4>
 800657a:	f5c1 7080 	rsb	r0, r1, #256	; 0x100
 800657e:	e001      	b.n	8006584 <__kernel_rem_pio2f+0x1ac>
 8006580:	f1c1 00ff 	rsb	r0, r1, #255	; 0xff
 8006584:	a904      	add	r1, sp, #16
 8006586:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800658a:	2001      	movs	r0, #1
 800658c:	3201      	adds	r2, #1
 800658e:	e7ed      	b.n	800656c <__kernel_rem_pio2f+0x194>
 8006590:	2d00      	cmp	r5, #0
 8006592:	dd15      	ble.n	80065c0 <__kernel_rem_pio2f+0x1e8>
 8006594:	2d01      	cmp	r5, #1
 8006596:	d009      	beq.n	80065ac <__kernel_rem_pio2f+0x1d4>
 8006598:	2d02      	cmp	r5, #2
 800659a:	d111      	bne.n	80065c0 <__kernel_rem_pio2f+0x1e8>
 800659c:	f104 3eff 	add.w	lr, r4, #4294967295
 80065a0:	aa04      	add	r2, sp, #16
 80065a2:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80065a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80065aa:	e006      	b.n	80065ba <__kernel_rem_pio2f+0x1e2>
 80065ac:	f104 3eff 	add.w	lr, r4, #4294967295
 80065b0:	aa04      	add	r2, sp, #16
 80065b2:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80065b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065ba:	a904      	add	r1, sp, #16
 80065bc:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 80065c0:	2e02      	cmp	r6, #2
 80065c2:	d10b      	bne.n	80065dc <__kernel_rem_pio2f+0x204>
 80065c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80065c8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80065cc:	b130      	cbz	r0, 80065dc <__kernel_rem_pio2f+0x204>
 80065ce:	4628      	mov	r0, r5
 80065d0:	9303      	str	r3, [sp, #12]
 80065d2:	f000 f9fb 	bl	80069cc <scalbnf>
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80065dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80065e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e4:	d154      	bne.n	8006690 <__kernel_rem_pio2f+0x2b8>
 80065e6:	f104 3cff 	add.w	ip, r4, #4294967295
 80065ea:	4660      	mov	r0, ip
 80065ec:	2200      	movs	r2, #0
 80065ee:	4548      	cmp	r0, r9
 80065f0:	db05      	blt.n	80065fe <__kernel_rem_pio2f+0x226>
 80065f2:	a904      	add	r1, sp, #16
 80065f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80065f8:	3801      	subs	r0, #1
 80065fa:	430a      	orrs	r2, r1
 80065fc:	e7f7      	b.n	80065ee <__kernel_rem_pio2f+0x216>
 80065fe:	2a00      	cmp	r2, #0
 8006600:	d13d      	bne.n	800667e <__kernel_rem_pio2f+0x2a6>
 8006602:	2201      	movs	r2, #1
 8006604:	f06f 0603 	mvn.w	r6, #3
 8006608:	fb06 f002 	mul.w	r0, r6, r2
 800660c:	9901      	ldr	r1, [sp, #4]
 800660e:	5808      	ldr	r0, [r1, r0]
 8006610:	b908      	cbnz	r0, 8006616 <__kernel_rem_pio2f+0x23e>
 8006612:	3201      	adds	r2, #1
 8006614:	e7f8      	b.n	8006608 <__kernel_rem_pio2f+0x230>
 8006616:	eb03 0e04 	add.w	lr, r3, r4
 800661a:	1c60      	adds	r0, r4, #1
 800661c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006620:	f108 0804 	add.w	r8, r8, #4
 8006624:	2600      	movs	r6, #0
 8006626:	4414      	add	r4, r2
 8006628:	42a0      	cmp	r0, r4
 800662a:	f73f af2f 	bgt.w	800648c <__kernel_rem_pio2f+0xb4>
 800662e:	3604      	adds	r6, #4
 8006630:	a918      	add	r1, sp, #96	; 0x60
 8006632:	eb06 020e 	add.w	r2, r6, lr
 8006636:	440a      	add	r2, r1
 8006638:	9902      	ldr	r1, [sp, #8]
 800663a:	f8dd b000 	ldr.w	fp, [sp]
 800663e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006642:	9103      	str	r1, [sp, #12]
 8006644:	ee07 1a90 	vmov	s15, r1
 8006648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800664c:	f04f 0c00 	mov.w	ip, #0
 8006650:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006654:	eddf 7a34 	vldr	s15, [pc, #208]	; 8006728 <__kernel_rem_pio2f+0x350>
 8006658:	45d4      	cmp	ip, sl
 800665a:	dc08      	bgt.n	800666e <__kernel_rem_pio2f+0x296>
 800665c:	ecfb 6a01 	vldmia	fp!, {s13}
 8006660:	ed32 7a01 	vldmdb	r2!, {s14}
 8006664:	f10c 0c01 	add.w	ip, ip, #1
 8006668:	eee6 7a87 	vfma.f32	s15, s13, s14
 800666c:	e7f4      	b.n	8006658 <__kernel_rem_pio2f+0x280>
 800666e:	eb06 0208 	add.w	r2, r6, r8
 8006672:	a940      	add	r1, sp, #256	; 0x100
 8006674:	440a      	add	r2, r1
 8006676:	edc2 7a00 	vstr	s15, [r2]
 800667a:	3001      	adds	r0, #1
 800667c:	e7d4      	b.n	8006628 <__kernel_rem_pio2f+0x250>
 800667e:	3d08      	subs	r5, #8
 8006680:	4664      	mov	r4, ip
 8006682:	ab04      	add	r3, sp, #16
 8006684:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006688:	bb6b      	cbnz	r3, 80066e6 <__kernel_rem_pio2f+0x30e>
 800668a:	3c01      	subs	r4, #1
 800668c:	3d08      	subs	r5, #8
 800668e:	e7f8      	b.n	8006682 <__kernel_rem_pio2f+0x2aa>
 8006690:	4268      	negs	r0, r5
 8006692:	eeb0 0a48 	vmov.f32	s0, s16
 8006696:	f000 f999 	bl	80069cc <scalbnf>
 800669a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006730 <__kernel_rem_pio2f+0x358>
 800669e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80066a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a6:	db17      	blt.n	80066d8 <__kernel_rem_pio2f+0x300>
 80066a8:	eddf 7a20 	vldr	s15, [pc, #128]	; 800672c <__kernel_rem_pio2f+0x354>
 80066ac:	ee60 7a27 	vmul.f32	s15, s0, s15
 80066b0:	aa04      	add	r2, sp, #16
 80066b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066b6:	3508      	adds	r5, #8
 80066b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80066c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80066c8:	ee10 3a10 	vmov	r3, s0
 80066cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80066d0:	3401      	adds	r4, #1
 80066d2:	ee17 3a90 	vmov	r3, s15
 80066d6:	e004      	b.n	80066e2 <__kernel_rem_pio2f+0x30a>
 80066d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80066dc:	aa04      	add	r2, sp, #16
 80066de:	ee10 3a10 	vmov	r3, s0
 80066e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80066e6:	4628      	mov	r0, r5
 80066e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80066ec:	f000 f96e 	bl	80069cc <scalbnf>
 80066f0:	00a3      	lsls	r3, r4, #2
 80066f2:	a940      	add	r1, sp, #256	; 0x100
 80066f4:	1d1a      	adds	r2, r3, #4
 80066f6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800672c <__kernel_rem_pio2f+0x354>
 80066fa:	1888      	adds	r0, r1, r2
 80066fc:	4621      	mov	r1, r4
 80066fe:	2900      	cmp	r1, #0
 8006700:	db18      	blt.n	8006734 <__kernel_rem_pio2f+0x35c>
 8006702:	ad04      	add	r5, sp, #16
 8006704:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8006708:	9500      	str	r5, [sp, #0]
 800670a:	ee07 5a90 	vmov	s15, r5
 800670e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006712:	3901      	subs	r1, #1
 8006714:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006718:	ee20 0a07 	vmul.f32	s0, s0, s14
 800671c:	ed60 7a01 	vstmdb	r0!, {s15}
 8006720:	e7ed      	b.n	80066fe <__kernel_rem_pio2f+0x326>
 8006722:	bf00      	nop
 8006724:	08006fc8 	.word	0x08006fc8
 8006728:	00000000 	.word	0x00000000
 800672c:	3b800000 	.word	0x3b800000
 8006730:	43800000 	.word	0x43800000
 8006734:	f10d 0cb0 	add.w	ip, sp, #176	; 0xb0
 8006738:	2100      	movs	r1, #0
 800673a:	1a65      	subs	r5, r4, r1
 800673c:	d417      	bmi.n	800676e <__kernel_rem_pio2f+0x396>
 800673e:	a840      	add	r0, sp, #256	; 0x100
 8006740:	f8df e15c 	ldr.w	lr, [pc, #348]	; 80068a0 <__kernel_rem_pio2f+0x4c8>
 8006744:	eddf 7a55 	vldr	s15, [pc, #340]	; 800689c <__kernel_rem_pio2f+0x4c4>
 8006748:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800674c:	2000      	movs	r0, #0
 800674e:	4548      	cmp	r0, r9
 8006750:	dc09      	bgt.n	8006766 <__kernel_rem_pio2f+0x38e>
 8006752:	4288      	cmp	r0, r1
 8006754:	dc07      	bgt.n	8006766 <__kernel_rem_pio2f+0x38e>
 8006756:	ecfe 6a01 	vldmia	lr!, {s13}
 800675a:	ecb5 7a01 	vldmia	r5!, {s14}
 800675e:	3001      	adds	r0, #1
 8006760:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006764:	e7f3      	b.n	800674e <__kernel_rem_pio2f+0x376>
 8006766:	ecec 7a01 	vstmia	ip!, {s15}
 800676a:	3101      	adds	r1, #1
 800676c:	e7e5      	b.n	800673a <__kernel_rem_pio2f+0x362>
 800676e:	9962      	ldr	r1, [sp, #392]	; 0x188
 8006770:	2903      	cmp	r1, #3
 8006772:	f200 808c 	bhi.w	800688e <__kernel_rem_pio2f+0x4b6>
 8006776:	e8df f001 	tbb	[pc, r1]
 800677a:	070d      	.short	0x070d
 800677c:	0207      	.short	0x0207
 800677e:	a92c      	add	r1, sp, #176	; 0xb0
 8006780:	440b      	add	r3, r1
 8006782:	4619      	mov	r1, r3
 8006784:	4620      	mov	r0, r4
 8006786:	e03b      	b.n	8006800 <__kernel_rem_pio2f+0x428>
 8006788:	ab2c      	add	r3, sp, #176	; 0xb0
 800678a:	441a      	add	r2, r3
 800678c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800689c <__kernel_rem_pio2f+0x4c4>
 8006790:	4623      	mov	r3, r4
 8006792:	e011      	b.n	80067b8 <__kernel_rem_pio2f+0x3e0>
 8006794:	ab2c      	add	r3, sp, #176	; 0xb0
 8006796:	eddf 7a41 	vldr	s15, [pc, #260]	; 800689c <__kernel_rem_pio2f+0x4c4>
 800679a:	441a      	add	r2, r3
 800679c:	2c00      	cmp	r4, #0
 800679e:	db05      	blt.n	80067ac <__kernel_rem_pio2f+0x3d4>
 80067a0:	ed32 7a01 	vldmdb	r2!, {s14}
 80067a4:	3c01      	subs	r4, #1
 80067a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067aa:	e7f7      	b.n	800679c <__kernel_rem_pio2f+0x3c4>
 80067ac:	b10e      	cbz	r6, 80067b2 <__kernel_rem_pio2f+0x3da>
 80067ae:	eef1 7a67 	vneg.f32	s15, s15
 80067b2:	edc7 7a00 	vstr	s15, [r7]
 80067b6:	e06a      	b.n	800688e <__kernel_rem_pio2f+0x4b6>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	db05      	blt.n	80067c8 <__kernel_rem_pio2f+0x3f0>
 80067bc:	ed72 7a01 	vldmdb	r2!, {s15}
 80067c0:	3b01      	subs	r3, #1
 80067c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067c6:	e7f7      	b.n	80067b8 <__kernel_rem_pio2f+0x3e0>
 80067c8:	b116      	cbz	r6, 80067d0 <__kernel_rem_pio2f+0x3f8>
 80067ca:	eef1 7a47 	vneg.f32	s15, s14
 80067ce:	e001      	b.n	80067d4 <__kernel_rem_pio2f+0x3fc>
 80067d0:	eef0 7a47 	vmov.f32	s15, s14
 80067d4:	edc7 7a00 	vstr	s15, [r7]
 80067d8:	eddd 7a2c 	vldr	s15, [sp, #176]	; 0xb0
 80067dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067e0:	aa2d      	add	r2, sp, #180	; 0xb4
 80067e2:	2301      	movs	r3, #1
 80067e4:	429c      	cmp	r4, r3
 80067e6:	db05      	blt.n	80067f4 <__kernel_rem_pio2f+0x41c>
 80067e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80067ec:	3301      	adds	r3, #1
 80067ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067f2:	e7f7      	b.n	80067e4 <__kernel_rem_pio2f+0x40c>
 80067f4:	b10e      	cbz	r6, 80067fa <__kernel_rem_pio2f+0x422>
 80067f6:	eef1 7a67 	vneg.f32	s15, s15
 80067fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80067fe:	e046      	b.n	800688e <__kernel_rem_pio2f+0x4b6>
 8006800:	2800      	cmp	r0, #0
 8006802:	dd0f      	ble.n	8006824 <__kernel_rem_pio2f+0x44c>
 8006804:	ed71 7a01 	vldmdb	r1!, {s15}
 8006808:	edd1 6a01 	vldr	s13, [r1, #4]
 800680c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006810:	3801      	subs	r0, #1
 8006812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006816:	ed81 7a00 	vstr	s14, [r1]
 800681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681e:	edc1 7a01 	vstr	s15, [r1, #4]
 8006822:	e7ed      	b.n	8006800 <__kernel_rem_pio2f+0x428>
 8006824:	4621      	mov	r1, r4
 8006826:	2901      	cmp	r1, #1
 8006828:	dd0f      	ble.n	800684a <__kernel_rem_pio2f+0x472>
 800682a:	ed73 7a01 	vldmdb	r3!, {s15}
 800682e:	edd3 6a01 	vldr	s13, [r3, #4]
 8006832:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006836:	3901      	subs	r1, #1
 8006838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800683c:	ed83 7a00 	vstr	s14, [r3]
 8006840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006844:	edc3 7a01 	vstr	s15, [r3, #4]
 8006848:	e7ed      	b.n	8006826 <__kernel_rem_pio2f+0x44e>
 800684a:	ab2c      	add	r3, sp, #176	; 0xb0
 800684c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800689c <__kernel_rem_pio2f+0x4c4>
 8006850:	441a      	add	r2, r3
 8006852:	2c01      	cmp	r4, #1
 8006854:	dd05      	ble.n	8006862 <__kernel_rem_pio2f+0x48a>
 8006856:	ed32 7a01 	vldmdb	r2!, {s14}
 800685a:	3c01      	subs	r4, #1
 800685c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006860:	e7f7      	b.n	8006852 <__kernel_rem_pio2f+0x47a>
 8006862:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8006866:	ed9d 7a2d 	vldr	s14, [sp, #180]	; 0xb4
 800686a:	b926      	cbnz	r6, 8006876 <__kernel_rem_pio2f+0x49e>
 800686c:	edc7 6a00 	vstr	s13, [r7]
 8006870:	ed87 7a01 	vstr	s14, [r7, #4]
 8006874:	e009      	b.n	800688a <__kernel_rem_pio2f+0x4b2>
 8006876:	eef1 6a66 	vneg.f32	s13, s13
 800687a:	eeb1 7a47 	vneg.f32	s14, s14
 800687e:	edc7 6a00 	vstr	s13, [r7]
 8006882:	ed87 7a01 	vstr	s14, [r7, #4]
 8006886:	eef1 7a67 	vneg.f32	s15, s15
 800688a:	edc7 7a02 	vstr	s15, [r7, #8]
 800688e:	f00b 0007 	and.w	r0, fp, #7
 8006892:	b055      	add	sp, #340	; 0x154
 8006894:	ecbd 8b04 	vpop	{d8-d9}
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	00000000 	.word	0x00000000
 80068a0:	08006fd4 	.word	0x08006fd4

080068a4 <__kernel_sinf>:
 80068a4:	ee10 3a10 	vmov	r3, s0
 80068a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80068b0:	da04      	bge.n	80068bc <__kernel_sinf+0x18>
 80068b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80068b6:	ee17 3a90 	vmov	r3, s15
 80068ba:	b35b      	cbz	r3, 8006914 <__kernel_sinf+0x70>
 80068bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80068c0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006918 <__kernel_sinf+0x74>
 80068c4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800691c <__kernel_sinf+0x78>
 80068c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80068cc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8006920 <__kernel_sinf+0x7c>
 80068d0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80068d4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006924 <__kernel_sinf+0x80>
 80068d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80068dc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006928 <__kernel_sinf+0x84>
 80068e0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80068e4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80068e8:	b930      	cbnz	r0, 80068f8 <__kernel_sinf+0x54>
 80068ea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800692c <__kernel_sinf+0x88>
 80068ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 80068f2:	eea6 0a86 	vfma.f32	s0, s13, s12
 80068f6:	4770      	bx	lr
 80068f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80068fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006900:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006904:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8006908:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006930 <__kernel_sinf+0x8c>
 800690c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006910:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	2f2ec9d3 	.word	0x2f2ec9d3
 800691c:	b2d72f34 	.word	0xb2d72f34
 8006920:	3638ef1b 	.word	0x3638ef1b
 8006924:	b9500d01 	.word	0xb9500d01
 8006928:	3c088889 	.word	0x3c088889
 800692c:	be2aaaab 	.word	0xbe2aaaab
 8006930:	3e2aaaab 	.word	0x3e2aaaab

08006934 <matherr>:
 8006934:	2000      	movs	r0, #0
 8006936:	4770      	bx	lr

08006938 <fabsf>:
 8006938:	ee10 3a10 	vmov	r3, s0
 800693c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006940:	ee00 3a10 	vmov	s0, r3
 8006944:	4770      	bx	lr
	...

08006948 <floorf>:
 8006948:	ee10 3a10 	vmov	r3, s0
 800694c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006950:	0dca      	lsrs	r2, r1, #23
 8006952:	3a7f      	subs	r2, #127	; 0x7f
 8006954:	2a16      	cmp	r2, #22
 8006956:	dc28      	bgt.n	80069aa <floorf+0x62>
 8006958:	2a00      	cmp	r2, #0
 800695a:	da0f      	bge.n	800697c <floorf+0x34>
 800695c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80069c0 <floorf+0x78>
 8006960:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006964:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696c:	dd24      	ble.n	80069b8 <floorf+0x70>
 800696e:	2b00      	cmp	r3, #0
 8006970:	da21      	bge.n	80069b6 <floorf+0x6e>
 8006972:	4a14      	ldr	r2, [pc, #80]	; (80069c4 <floorf+0x7c>)
 8006974:	2900      	cmp	r1, #0
 8006976:	bf18      	it	ne
 8006978:	4613      	movne	r3, r2
 800697a:	e01d      	b.n	80069b8 <floorf+0x70>
 800697c:	4912      	ldr	r1, [pc, #72]	; (80069c8 <floorf+0x80>)
 800697e:	4111      	asrs	r1, r2
 8006980:	420b      	tst	r3, r1
 8006982:	d01b      	beq.n	80069bc <floorf+0x74>
 8006984:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80069c0 <floorf+0x78>
 8006988:	ee30 0a27 	vadd.f32	s0, s0, s15
 800698c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006994:	dd10      	ble.n	80069b8 <floorf+0x70>
 8006996:	2b00      	cmp	r3, #0
 8006998:	bfbe      	ittt	lt
 800699a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800699e:	fa40 f202 	asrlt.w	r2, r0, r2
 80069a2:	189b      	addlt	r3, r3, r2
 80069a4:	ea23 0301 	bic.w	r3, r3, r1
 80069a8:	e006      	b.n	80069b8 <floorf+0x70>
 80069aa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80069ae:	d305      	bcc.n	80069bc <floorf+0x74>
 80069b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80069b4:	4770      	bx	lr
 80069b6:	2300      	movs	r3, #0
 80069b8:	ee00 3a10 	vmov	s0, r3
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	7149f2ca 	.word	0x7149f2ca
 80069c4:	bf800000 	.word	0xbf800000
 80069c8:	007fffff 	.word	0x007fffff

080069cc <scalbnf>:
 80069cc:	b508      	push	{r3, lr}
 80069ce:	ee10 2a10 	vmov	r2, s0
 80069d2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80069d6:	ed2d 8b02 	vpush	{d8}
 80069da:	eef0 0a40 	vmov.f32	s1, s0
 80069de:	d045      	beq.n	8006a6c <scalbnf+0xa0>
 80069e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80069e4:	d302      	bcc.n	80069ec <scalbnf+0x20>
 80069e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80069ea:	e03f      	b.n	8006a6c <scalbnf+0xa0>
 80069ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069f0:	d211      	bcs.n	8006a16 <scalbnf+0x4a>
 80069f2:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <scalbnf+0xa8>)
 80069f4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8006a78 <scalbnf+0xac>
 80069f8:	4298      	cmp	r0, r3
 80069fa:	ee60 0a27 	vmul.f32	s1, s0, s15
 80069fe:	db05      	blt.n	8006a0c <scalbnf+0x40>
 8006a00:	ee10 2a90 	vmov	r2, s1
 8006a04:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8006a08:	3b19      	subs	r3, #25
 8006a0a:	e005      	b.n	8006a18 <scalbnf+0x4c>
 8006a0c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8006a7c <scalbnf+0xb0>
 8006a10:	ee20 0a80 	vmul.f32	s0, s1, s0
 8006a14:	e02a      	b.n	8006a6c <scalbnf+0xa0>
 8006a16:	0ddb      	lsrs	r3, r3, #23
 8006a18:	4403      	add	r3, r0
 8006a1a:	2bfe      	cmp	r3, #254	; 0xfe
 8006a1c:	dc0f      	bgt.n	8006a3e <scalbnf+0x72>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dd06      	ble.n	8006a30 <scalbnf+0x64>
 8006a22:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006a26:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006a2a:	ee00 3a10 	vmov	s0, r3
 8006a2e:	e01d      	b.n	8006a6c <scalbnf+0xa0>
 8006a30:	f113 0f16 	cmn.w	r3, #22
 8006a34:	da0f      	bge.n	8006a56 <scalbnf+0x8a>
 8006a36:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a3a:	4298      	cmp	r0, r3
 8006a3c:	dd02      	ble.n	8006a44 <scalbnf+0x78>
 8006a3e:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8006a80 <scalbnf+0xb4>
 8006a42:	e001      	b.n	8006a48 <scalbnf+0x7c>
 8006a44:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8006a7c <scalbnf+0xb0>
 8006a48:	eeb0 0a48 	vmov.f32	s0, s16
 8006a4c:	f000 f81c 	bl	8006a88 <copysignf>
 8006a50:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006a54:	e00a      	b.n	8006a6c <scalbnf+0xa0>
 8006a56:	3319      	adds	r3, #25
 8006a58:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006a5c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006a60:	ee00 3a90 	vmov	s1, r3
 8006a64:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006a84 <scalbnf+0xb8>
 8006a68:	ee20 0aa7 	vmul.f32	s0, s1, s15
 8006a6c:	ecbd 8b02 	vpop	{d8}
 8006a70:	bd08      	pop	{r3, pc}
 8006a72:	bf00      	nop
 8006a74:	ffff3cb0 	.word	0xffff3cb0
 8006a78:	4c000000 	.word	0x4c000000
 8006a7c:	0da24260 	.word	0x0da24260
 8006a80:	7149f2ca 	.word	0x7149f2ca
 8006a84:	33000000 	.word	0x33000000

08006a88 <copysignf>:
 8006a88:	ee10 3a10 	vmov	r3, s0
 8006a8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a90:	ee10 3a90 	vmov	r3, s1
 8006a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	ee00 3a10 	vmov	s0, r3
 8006a9e:	4770      	bx	lr

08006aa0 <__errno>:
 8006aa0:	4b01      	ldr	r3, [pc, #4]	; (8006aa8 <__errno+0x8>)
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	20007d90 	.word	0x20007d90

08006aac <_init>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	bf00      	nop
 8006ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab2:	bc08      	pop	{r3}
 8006ab4:	469e      	mov	lr, r3
 8006ab6:	4770      	bx	lr

08006ab8 <_fini>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	bf00      	nop
 8006abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006abe:	bc08      	pop	{r3}
 8006ac0:	469e      	mov	lr, r3
 8006ac2:	4770      	bx	lr
